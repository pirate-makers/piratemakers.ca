<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Pirate Makers</title>
        <link>https://piratemakers.ca/posts/</link>
        <description>Recent content in Posts on Pirate Makers</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 20 Feb 2024 20:05:56 +0000</lastBuildDate>
        <atom:link href="https://piratemakers.ca/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Crossplane: review after 1.5 years</title>
            <link>https://piratemakers.ca/posts/2024/02/crossplane-review-after-1.5-years/</link>
            <pubDate>Tue, 20 Feb 2024 20:05:56 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2024/02/crossplane-review-after-1.5-years/</guid>
            <description>So, a year and a half ago, I wrote Playing with Crossplane, for real blog post (link to the Medium original version).
This blog post was relating a real POC I did for my company, where *I was pushing for using ArgoCD and Crossplane to handle our infrastructure in place of Terraform.
As you can read, the outcome wasn&amp;rsquo;t exactly what I thought.
I got contacted by Crossplane CEO, who shared my blog post to the team and I discussed many of my pain points with Crossplane Developers during the KubeCon North America 2022 (where I was a speaker, check out the blog and video).</description>
            <content type="html"><![CDATA[<p><img src="images/1.png#layoutTextWidth" alt="image"></p>
<p>So, a year and a half ago, I wrote <a href="https://piratemakers.ca/posts/2022/11/docker.io-opensource-fail-and-what-to-do-instead/">Playing with Crossplane, for real</a> blog post (<a href="https://medium.com/p/f591e66065ae">link to the Medium original version</a>).</p>
<p>This blog post was relating a real POC I did for my company, where *<em>I</em> was pushing for using ArgoCD and Crossplane to handle our infrastructure in place of Terraform.</p>
<p>As you can read, the outcome wasn&rsquo;t exactly what I thought.</p>
<p>I got contacted by Crossplane CEO, who shared my blog post to the team and I discussed many of my pain points with Crossplane Developers during the KubeCon North America 2022 (where I was a speaker, check out the <a href="https://cloud-native-canada.github.io/k8s_setup_tools/">blog</a> and <a href="https://www.youtube.com/watch?v=TKYAEjNg4Hw">video</a>).
Upbound, as a company, stand behind its product and was willing to make it work. At that time they shared that they would release more of their internal providers soon, which would solve most of my problems.</p>
<p>I wish I had a chance to do the POC once again before that, but.. meh&hellip; life, I guess&hellip; it&rsquo;s happening now !</p>
<p>So let&rsquo;s dive in, trying to follow the same agenda as the last blog post.</p>
<h2 id="install">Install</h2>
<p>While I previously only talked about the painpoints, I Installed Corssplane with Argo. One year later, let&rsquo;s chech how I do it now.</p>
<p>This is just a demo app, as in reality I use an <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/">ArgoCD ApplicationSet</a> to generate apps based on gitlab repos, folder structure and content of some files.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Application</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argocd-infrastructure-addons-central-cluster</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argocd</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">destination</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">central-cluster</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argocd-infrastructure-addons</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Owner</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">value</span>: <span style="color:#ae81ff">devops</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Team</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">value</span>: <span style="color:#ae81ff">infrastructure</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Environment</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">value</span>: <span style="color:#ae81ff">qa</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Description</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">value</span>: <span style="color:#ae81ff">Project to deploy GKE Addons using ArgoCD</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">project</span>: <span style="color:#ae81ff">infrastructure</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">path</span>: <span style="color:#ae81ff">deployments/k8s/overlays/qa/central-cluster</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">repoURL</span>: <span style="color:#ae81ff">https://gitlab.net/devops/cicd/argocd-infrastructure-addons.git</span> <span style="color:#75715e"># fake URL</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetRevision</span>: <span style="color:#ae81ff">deployment</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">syncPolicy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">automated</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">allowEmpty</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">prune</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selfHeal</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">managedNamespaceMetadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">wk/managedBy</span>: <span style="color:#ae81ff">argocd</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">wk/origin</span>: <span style="color:#ae81ff">devops_cicd_argocd_infrastructure_addons</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">syncOptions</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">CreateNamespace=true</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">ServerSideApply=true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ignoreDifferences</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">group</span>: <span style="color:#ae81ff">apps</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">jqPathExpressions</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">.spec.template.spec.containers[].env[].valueFrom.resourceFieldRef.divisor</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">.spec.template.spec.initContainers[].env[].valueFrom.resourceFieldRef.divisor</span>
</span></span></code></pre></div><p>Here, at the end, I had to tell Argo to not track the <code>divisor</code> key from the <code>env</code> values. The cluster is adding it back with a value on <code>0</code> (default should be <code>1</code>&hellip; not sure what&rsquo;s happening here), while Argo is trying to remove it. The <code>divisor</code> value was added in the <code>init container</code> but not in the main container in Crossplane Helm chart. Will PR for it&hellip;</p>
<p>So this will make ArgoCD scan my git repo and deploy the application.
The yaml itself is actually a <code>helm</code> chart + some other values. Everything is placed into the <code>deployments/k8s/overlays/qa/central-cluster</code> folder</p>
<p>The <code>kustomization.yaml</code> file will hold all the addons for my cluster, Crossplane being one:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># https://kubectl.docs.kubernetes.io/references/kustomize/builtins/#_helmchartinflationgenerator_</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">kustomize.config.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Kustomization</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">helmCharts</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># https://github.com/crossplane/crossplane/tree/master/cluster/charts/crossplane</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># TODO to have it working:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># - enable helm in the argocd-cm ConfigMap by adding to the data: `kustomize.buildOptions: --load-restrictor LoadRestrictionsNone --enable-helm`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># - Update the projects application to not track some fields:</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># ignoreDifferences:</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#   - group: apps</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#     kind: Deployment</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#     jqPathExpressions:</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#       - .spec.template.spec.containers[].env[].valueFrom.resourceFieldRef.divisor</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#       - .spec.template.spec.initContainers[].env[].valueFrom.resourceFieldRef.divisor</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">https://charts.crossplane.io/stable</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">releaseName</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># version: 0.1.0 # use latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">valuesFile</span>: <span style="color:#ae81ff">values.yaml</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">includeCRDs</span>: <span style="color:#66d9ef">false</span> <span style="color:#75715e">#no CRD in the chart, they are created by crossplane Operator</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">namespaces.yaml</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">providers.yaml</span>
</span></span></code></pre></div><p>So this is just <code>inflating</code> the helm chart, and apply 2 other resources:</p>
<ul>
<li>
<p>namespace
This is needed as ArgoCD will only maintain the namespace for my whole addons project, not specifically for Crossplane. Because I want Crossplane deployed in the <code>crossplane</code> repo, I have to add it myself (let me know if you have a better solution).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Namespace</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argocd.argoproj.io/sync-options</span>: <span style="color:#ae81ff">ServerSideApply=true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argocd.argoproj.io/sync-wave</span>: <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.io/metadata.name</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">crossplane</span>
</span></span></code></pre></div><p>Note the <code>sync-wave: &quot;0&quot;</code> to have that happen first.</p>
</li>
<li>
<p>Crossplace Providers
This is the list of providers I&rsquo;d like to install.
Note that the Crossplane Helm Chart can do it for you, but I&rsquo;d rather have it explicit here. I&rsquo;m only installing the <code>storage</code> (buckets) and <code>sql</code> (mysql/pg) providers for this test.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">pkg.crossplane.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Provider</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">provider-gcp-storage</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argocd.argoproj.io/sync-wave</span>: <span style="color:#e6db74">&#34;2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">package</span>: <span style="color:#ae81ff">xpkg.upbound.io/upbound/provider-gcp-storage:v0.41.1</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">pkg.crossplane.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Provider</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">provider-gcp-sql</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argocd.argoproj.io/sync-wave</span>: <span style="color:#e6db74">&#34;2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">package</span>: <span style="color:#ae81ff">xpkg.upbound.io/upbound/provider-gcp-sql:v0.41.1</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">pkg.crossplane.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Provider</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">provider-gcp-cloudplatform</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argocd.argoproj.io/sync-wave</span>: <span style="color:#e6db74">&#34;2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">package</span>: <span style="color:#ae81ff">xpkg.upbound.io/upbound/provider-gcp-cloudplatform:v0.41.1</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="providers-management">Providers Management</h2>
<p>In 2023, Upbound announced <a href="https://blog.upbound.io/new-provider-families">a new family of providers</a> that are smaller and have less impact on the K8s API.</p>
<p>For GCP, this means installing the <a href="https://marketplace.upbound.io/providers/upbound/provider-family-gcp/v0.41.0">provider-family-gcp</a>. This is automatically done by Crossplane when one of the sub-provider is installed. So there&rsquo;s nothing to do after we pushed the <code>Provider</code> resources above.</p>
<p>This is one of the key changed in Crossplane, which allow to only run the resources that you need, lowering the cost on the API Server.
That&rsquo;s one problem solved.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>❯ k get provider
</span></span><span style="display:flex;"><span>NAME                          INSTALLED   HEALTHY   PACKAGE                                                     AGE
</span></span><span style="display:flex;"><span>provider-gcp-cloudplatform    True        True      xpkg.upbound.io/upbound/provider-gcp-cloudplatform:v0.41.1  25h
</span></span><span style="display:flex;"><span>provider-gcp-sql              True        True      xpkg.upbound.io/upbound/provider-gcp-sql:v0.41.1            25h
</span></span><span style="display:flex;"><span>provider-gcp-storage          True        True      xpkg.upbound.io/upbound/provider-gcp-storage:v0.41.1        25h
</span></span><span style="display:flex;"><span>upbound-provider-family-gcp   True        True      xpkg.upbound.io/upbound/provider-family-gcp:v0.41.1         25h
</span></span></code></pre></div><p>Check the <a href="https://marketplace.upbound.io/providers/upbound/provider-family-gcp/v0.41.1">Provider&rsquo;s Marketplace</a> for more providers !
It&rsquo;s 72 sub-providers for GCP, each of which includes few resources. For the <a href="https://marketplace.upbound.io/providers/upbound/provider-gcp-sql/v0.41.1">SQL sub-provider</a>, it&rsquo;s 5 resources:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Kind</th>
<th style="text-align:center">Group</th>
<th style="text-align:center">Version</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DatabaseInstance</td>
<td style="text-align:center">sql.gcp.upbound.io</td>
<td style="text-align:center">v1beta1</td>
</tr>
<tr>
<td style="text-align:center">Database</td>
<td style="text-align:center">sql.gcp.upbound.io</td>
<td style="text-align:center">v1beta1</td>
</tr>
<tr>
<td style="text-align:center">SourceRepresentationInstance</td>
<td style="text-align:center">sql.gcp.upbound.io</td>
<td style="text-align:center">v1beta1</td>
</tr>
<tr>
<td style="text-align:center">SSLCert</td>
<td style="text-align:center">sql.gcp.upbound.io</td>
<td style="text-align:center">v1beta1</td>
</tr>
<tr>
<td style="text-align:center">User</td>
<td style="text-align:center">sql.gcp.upbound.io</td>
<td style="text-align:center">v1beta1</td>
</tr>
</tbody>
</table>
<p>Once deployed, you can also check the revisions that you installed (Crossplane keeps 2 revisions max as defaut):</p>
<pre tabindex="0"><code>kubectl get providerrevisions
NAME                                       HEALTHY   REVISION   IMAGE                                                        STATE      DEP-FOUND   DEP-INSTALLED   AGE
provider-gcp-cloudplatform-ce19993b3d91    True      1          xpkg.upbound.io/upbound/provider-gcp-cloudplatform:v0.41.1   Active     1           1               25s
provider-gcp-sql-58782c4213f5              True      2          xpkg.upbound.io/upbound/provider-gcp-sql:v0.41.1             Active     1           1               16h
provider-gcp-sql-ac45452bc4d2              True      1          xpkg.upbound.io/upbound/provider-gcp-sql:v0.41.0             Inactive   1           1               39d
provider-gcp-storage-23793d298dec          True      2          xpkg.upbound.io/upbound/provider-gcp-storage:v0.41.1         Active     1           1               16h
provider-gcp-storage-70a994bdf770          True      1          xpkg.upbound.io/upbound/provider-gcp-storage:v0.41.0         Inactive   1           1               39d
upbound-provider-family-gcp-d0f27e03505b   True      1          xpkg.upbound.io/upbound/provider-family-gcp:v0.41.0          Active                                 39d
</code></pre><p>The other problem was on the quality of the providers. We&rsquo;ll dive in later.</p>
<h2 id="docs">Docs</h2>
<p>Everything changed, so did the docs.</p>
<p>The provider&rsquo;s docs changed a lot, but is it for the better ?</p>
<p>At the time of this blog, Crossplane v1.15 is the latest so we&rsquo;ll use it. <a href="https://docs.crossplane.io/latest/">https://docs.crossplane.io/latest/</a> is the way to go.</p>
<p>Provider GCP, which is linked from the docs, is on the Upbound Marketplace and contains 347 resources. It can be reached at <a href="https://marketplace.upbound.io/providers/upbound/provider-gcp/v0.41.1/docs/quickstart">https://marketplace.upbound.io/providers/upbound/provider-gcp/v0.41.1/docs/quickstart</a>.</p>
<p><img src="images/upbound_provider-gcp_v0_41_1.png#layoutTextWidth" alt="image"></p>
<p>But you have a warning:</p>
<pre tabindex="0"><code>⚠️ Warning: The monolithic GCP provider (upbound/provider-gcp) has been deprecated in favor of the GCP provider family. 

You can read more about the provider families in our blog post and the official documentation for the provider families is here.  
We will continue support for the monolithic GCP provider until June 12, 2024. And you can find more information on migrating from the monolithic providers to the provider families here.
</code></pre><p>Ah&hellip;</p>
<p>Let&rsquo;s check the provider family at <a href="https://marketplace.upbound.io/providers/upbound/provider-family-gcp/v0.41.1">https://marketplace.upbound.io/providers/upbound/provider-family-gcp/v0.41.1</a></p>
<p><img src="images/upbound_provider-family-gcp_v0_41_1.png#layoutTextWidth" alt="image"></p>
<p>No more <code>Managed Resources</code>&hellip; only <code>Providers</code>.  That&rsquo;s the trick, GCP resources are now groupped in smaller <code>Providers</code> so you can deploy only what you need.</p>
<p>The <code>ServiceAccount</code> Resource is now defined in the <a href="https://marketplace.upbound.io/providers/upbound/provider-gcp-cloudplatform/v0.41.1/resources/cloudplatform.gcp.upbound.io/ServiceAccount/v1beta1">provider-gcp-cloudplatform</a> Provider.</p>
<p>I&rsquo;ve been searching for it for some time&hellip; so the trick is to <a href="https://marketplace.upbound.io/providers/upbound/provider-family-gcp/v0.41.1/providers?">use the search bar from the provider family</a>.</p>
<p>The docs are pretty useful here, at least for a resource as simple as a SericeAccount, and better describe the option:</p>
<p><img src="images/ServiceAccount_-_upbound_provider-gcp-cloudplatform_v0_41_1.png#layoutTextWidth" alt="image"></p>
<p>There&rsquo;s also 3 examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">cloudplatform.gcp.upbound.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">meta.upbound.io/example-id</span>: <span style="color:#ae81ff">cloudplatform/v1beta1/serviceaccountiammember</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">testing.upbound.io/example-name</span>: <span style="color:#ae81ff">service-account-iam-member</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">service-account-iam-member</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">forProvider</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">displayName</span>: <span style="color:#ae81ff">Upbound Example Service Account</span>
</span></span></code></pre></div><p>Crossplane docs also seems better to me, for now. Take for example the <a href="https://docs.crossplane.io/latest/concepts/managed-resources/#initprovider">InitProvider section</a>. It&rsquo;s simple and easy to understand.</p>
<h3 id="workload-identity">Workload Identity</h3>
<p>What I tried next, was to use GCP <code>Workload Identity</code> for the Providers. This is a way for the providers to gain permissions from a GCP ServiceAccount, bound to the K8s ServiceAccount used by the Provider.</p>
<p>By default, each Provider use a specific K8s ServiceAccount:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>k get sa
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME                                       SECRETS   AGE
</span></span><span style="display:flex;"><span>crossplane                                 <span style="color:#ae81ff">0</span>         39d
</span></span><span style="display:flex;"><span>default                                    <span style="color:#ae81ff">0</span>         39d
</span></span><span style="display:flex;"><span>provider-gcp-sql-58782c4213f5              <span style="color:#ae81ff">0</span>         16h
</span></span><span style="display:flex;"><span>provider-gcp-sql-ac45452bc4d2              <span style="color:#ae81ff">0</span>         39d
</span></span><span style="display:flex;"><span>provider-gcp-storage-23793d298dec          <span style="color:#ae81ff">0</span>         16h
</span></span><span style="display:flex;"><span>provider-gcp-storage-70a994bdf770          <span style="color:#ae81ff">0</span>         39d
</span></span><span style="display:flex;"><span>rbac-manager                               <span style="color:#ae81ff">0</span>         39d
</span></span><span style="display:flex;"><span>upbound-provider-family-gcp-d0f27e03505b   <span style="color:#ae81ff">0</span>         39d
</span></span></code></pre></div><p>Here, <code>crossplane</code> KSA is the one I created for <code>crossplane</code> itself. I first thought that this KSA was used to call the GCP API. This is not the case.</p>
<p>We then see multiple <code>provider-gcp-&lt;provider&gt;-&lt;id&gt;</code> KSA. Those are created along the Provider install, and a new KSA is created each time you deploy a new version of the Provider. This does not seem good for Workload Identity: because WI needs to bind a Google SA to a K8s SA, we need a stable naming.</p>
<p>I googled for the docs and first came to <a href="https://docs.upbound.io/providers/provider-gcp/authentication/#create-a-controllerconfig">Upbound official docs</a> which say to use a <code>ControllerConfig</code> to change the Providers settings:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">pkg.crossplane.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ControllerConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-controller-config</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">iam.gke.io/gcp-service-account</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">my-KSA-name</span>
</span></span></code></pre></div><p>But searching for more docs on <code>ControllerConfig</code> I then found the <a href="https://docs.crossplane.io/latest/concepts/providers/#controller-configuration">OSS Crossplane docs</a> with once again, contradictory statement:</p>
<p><img src="images/Providers_controllerconfig_Crossplane_v1_15.png#layoutTextWidth" alt="image"></p>
<p>So wee need to use a <a href="https://docs.crossplane.io/latest/concepts/providers/#runtime-configuration">DeploymentRuntimeConfigs</a> !</p>
<p>Which also includes a warning:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Important
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>DeploymentRuntimeConfigs is a beta feature.
</span></span></code></pre></div><p>Well, I guess we&rsquo;ll have to pick one of Deprecated or Beta&hellip; :)</p>
<h3 id="conclusion">Conclusion</h3>
<p>Overal conclusion is that doc is better, but the path from discovering Crossplane and going to Prod is still not straight.</p>
<p>So, how well did it went ? Let&rsquo;s keep diving in.</p>
<h2 id="creating-some-resources">Creating some Resources</h2>
<h3 id="workload-identity-2">Workload Identity (2)</h3>
<p>So, what I finally did was using a <code>DeploymentRuntimeConfigs</code> to force the provider&rsquo;s <code>ServiceAccount</code> to be <code>crossplane</code>, the one KSA that is bound to the GSA with the right permissions. It&rsquo;s like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">pkg.crossplane.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">DeploymentRuntimeConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">enable-workload-identity</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deploymentTemplate</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: {}
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">containers</span>: []
</span></span></code></pre></div><p>Then I updated all the providers to use this <code>DeploymentRuntimeConfig</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">pkg.crossplane.io/v1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Provider</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">provider-gcp-cloudplatform</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">argocd.argoproj.io/sync-wave</span>: <span style="color:#e6db74">&#34;2&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">package</span>: <span style="color:#ae81ff">xpkg.upbound.io/upbound/provider-gcp-cloudplatform:v0.41.1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runtimeConfigRef</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">enable-workload-identity</span>
</span></span></code></pre></div><p>I now have:</p>
<ul>
<li>the <code>crossplane</code> KSA that I want to use</li>
<li>the <code>provider-gcp-cloudplatform-1234567</code> KSA created by the provider</li>
<li>the <code>provider-gcp-cloudplatform-9876543</code> KSA created by the previous version of the provider</li>
</ul>
<p>But at least, my provider is using the <code>crossplane</code> KSA !!</p>
<h3 id="add-a-google-service-account">Add a Google Service Account</h3>
<p>So I went ahead to create a new Google Service Account:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">cloudplatform.gcp.upbound.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">meta.upbound.io/example-id</span>: <span style="color:#ae81ff">cloudplatform/v1beta1/serviceaccountiammember</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">testing.upbound.io/example-name</span>: <span style="color:#ae81ff">service-account-iam-member</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">demo-project-service-account</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">forProvider</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">displayName</span>: <span style="color:#ae81ff">GSA created from Corssplane</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">this is a GSA created from Corssplane from the kustomized version of the argocd-demo-project</span>
</span></span></code></pre></div><p>and I watched the logs of the provider, expecting it to create my GSA, of give an error:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>[controller-runtime] log.SetLogger(...) was never called; logs will not be displayed.
</span></span><span style="display:flex;"><span>Detected at:
</span></span><span style="display:flex;"><span>	&gt;  goroutine 2153 [running]:
</span></span><span style="display:flex;"><span>	&gt;  runtime/debug.Stack()
</span></span><span style="display:flex;"><span>	&gt;  	runtime/debug/stack.go:24 +0x5e
</span></span><span style="display:flex;"><span>	&gt;  sigs.k8s.io/controller-runtime/pkg/log.eventuallyFulfillRoot()
</span></span><span style="display:flex;"><span>	&gt;  	sigs.k8s.io/controller-runtime@v0.16.3/pkg/log/log.go:60 +0xcd
</span></span><span style="display:flex;"><span>	&gt;  sigs.k8s.io/controller-runtime/pkg/log.(*delegatingLogSink).WithValues(0xc0006af980, {0xc001a06440, 0x4, 0x4})
</span></span><span style="display:flex;"><span>	&gt;  	sigs.k8s.io/controller-runtime@v0.16.3/pkg/log/deleg.go:168 +0x49
</span></span><span style="display:flex;"><span>	&gt;  github.com/go-logr/logr.Logger.WithValues(...)
</span></span><span style="display:flex;"><span>	&gt;  	github.com/go-logr/logr@v1.3.0/logr.go:336
</span></span><span style="display:flex;"><span>	&gt;  sigs.k8s.io/controller-runtime/pkg/builder.(*Builder).doController.func1(0xc00080c1a0)
</span></span><span style="display:flex;"><span>	&gt;  	sigs.k8s.io/controller-runtime@v0.16.3/pkg/builder/controller.go:402 +0x2ba
</span></span><span style="display:flex;"><span>	&gt;  sigs.k8s.io/controller-runtime/pkg/internal/controller.(*Controller).reconcileHandler(0xc00065e640, {0x6857c88, 0xc000b1a870}, {0x54abde0?, 0xc00080c180?})
</span></span><span style="display:flex;"><span>	&gt;  	sigs.k8s.io/controller-runtime@v0.16.3/pkg/internal/controller/controller.go:306 +0x16a
</span></span><span style="display:flex;"><span>	&gt;  sigs.k8s.io/controller-runtime/pkg/internal/controller.(*Controller).processNextWorkItem(0xc00065e640, {0x6857c88, 0xc000b1a870})
</span></span><span style="display:flex;"><span>	&gt;  	sigs.k8s.io/controller-runtime@v0.16.3/pkg/internal/controller/controller.go:266 +0x1c9
</span></span><span style="display:flex;"><span>	&gt;  sigs.k8s.io/controller-runtime/pkg/internal/controller.(*Controller).Start.func2.2()
</span></span><span style="display:flex;"><span>	&gt;  	sigs.k8s.io/controller-runtime@v0.16.3/pkg/internal/controller/controller.go:227 +0x79
</span></span><span style="display:flex;"><span>	&gt;  created by sigs.k8s.io/controller-runtime/pkg/internal/controller.(*Controller).Start.func2 in goroutine 1087
</span></span><span style="display:flex;"><span>	&gt;  	sigs.k8s.io/controller-runtime@v0.16.3/pkg/internal/controller/controller.go:223 +0x565
</span></span></code></pre></div><p>It seems to be a Go stack-trace telling me that there&rsquo;s not going to be any logs generated&hellip; whaaaaaat ?</p>
<p>But we&rsquo;re OK, <a href="https://docs.crossplane.io/knowledge-base/guides/troubleshoot/#provider-logs">we have the docs</a> !!</p>
<p><img src="images/Troubleshoot_Logs_Crossplane.png#layoutTextWidth" alt="image"></p>
<p>WHAAAT ? I thought the <code>ControllerConfig</code> was deprecated ?</p>
<p>Let&rsquo;s update our <code>DeploymentRuntimeConfig</code> to add debug logs&hellip; that should do it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">pkg.crossplane.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">DeploymentRuntimeConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">enable-workload-identity</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deploymentTemplate</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: {}
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">package-runtime</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>                - --<span style="color:#ae81ff">debug</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">serviceAccountTemplate</span>: {}
</span></span></code></pre></div><p>OK, now we&rsquo;re good. What&rsquo;s in the logs ?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>2024-02-21T15:40:40Z	DEBUG	events	cannot initialize the no-fork async external client: cannot get terraform setup: cannot get referenced ProviderConfig: ProviderConfig.gcp.upbound.io &#34;default&#34; not found
</span></span></code></pre></div><p>Interresting that Terraform is still here&hellip; but whatever&hellip;</p>
<p>When you create a <code>Resource</code> to be managed by a <code>Provider</code>, you need to tell the provider which <code>Identity</code> or <code>Credentials</code> to use.</p>
<p>For this simple test, I was expecting using Workload Identity. So I need to attach my <code>ServiceAccount Resource</code> to a <code>ProviderConfig</code>.
You will get this informations <a href="https://docs.upbound.io/providers/provider-gcp/authentication/#create-a-providerconfig-2">from the Upbound docs</a> (not sure it exist in the OSS Crossplane docs)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">gcp.upbound.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ProviderConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workload-identity</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">credentials</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">source</span>: <span style="color:#ae81ff">InjectedIdentity</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">projectID</span>: <span style="color:#ae81ff">&lt;my-GCP-project&gt;</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">cloudplatform.gcp.upbound.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">meta.upbound.io/example-id</span>: <span style="color:#ae81ff">cloudplatform/v1beta1/serviceaccountiammember</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">testing.upbound.io/example-name</span>: <span style="color:#ae81ff">service-account-iam-member</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">demo-project-service-account</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">forProvider</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">displayName</span>: <span style="color:#ae81ff">GSA created from Corssplane</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">this is a GSA created from Corssplane from the kustomized version of the argocd-demo-project</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">providerConfigRef</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workload-identity</span>
</span></span></code></pre></div><p>And finally, after a Reconcile loop:</p>
<pre tabindex="0"><code>[INFO] Authenticating using DefaultClient...
[INFO]   -- Scopes: [https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/userinfo.email]
[DEBUG] Waiting for state to become: [success]
[INFO] Terraform is using this identity: crossplane@&lt;my-GCP-project&gt;.iam.gserviceaccount.com
DEBUG	provider-gcp	Observing the external resource	{&#34;uid&#34;: &#34;f13fe9c3-92c7-4b48-b7ca-ed41196d0165&#34;, &#34;name&#34;: &#34;demo-project-service-account&#34;, &#34;gvk&#34;: &#34;cloudplatform.gcp.upbound.io/v1beta1, Kind=ServiceAccount&#34;}
[INFO] Instantiating Google Cloud IAM client for path https://iam.googleapis.com/
[DEBUG] Retry Transport: starting RoundTrip retry loop
[DEBUG] Retry Transport: request attempt 0
[DEBUG] Retry Transport: Stopping retries, last request was successful
</code></pre><p><strong>The last request was successful !!!!</strong></p>
<p>If you follow the Upbound docs, the next section is <a href="https://docs.upbound.io/providers/provider-gcp/authentication/#service-account-impersonation">Service account impersonation</a> which is way more secure, as each Application (deployed in its own namespace) could use a different Google Service Account.</p>
<p>This way, your Infrastructure team could pre-create GSA for each of your apps (or deveopper groups) and assign them to many <code>ProviderConfig</code>. You could then create abstrations for each of the namespaces, so the App deploying in namespace A could only create a single kind of resource in a specifig Google project&hellip; Sounds complicated ? It is, but it&rsquo;s more secure in the end.</p>
<p>Let&rsquo;s move to the final step: reproduce the same Composition that I used in the previous blog post</p>
<h2 id="working-with-composition-xrd-and-claims">Working with Composition, XRD and Claims</h2>
<p>Last time I tried to create a Composite Resource that was creating a full usable Postgres SQL database.  As last time, thins involves creating multiple resources, like the <code>DatabseInstance</code>, the <code>Database</code>, and a <code>User</code>.</p>
<p>We&rsquo;ll use the <code>provider-gcp-sql</code> for that. So far, it all seems to be the same process.</p>
<h3 id="composition">Composition</h3>
<p>Going <a href="https://docs.crossplane.io/latest/concepts/compositions/">back to the docs</a>, it seems to start with the <code>Composition</code> so this time we&rsquo;ll do the same.</p>
<p>Compositions had small changes since the last blog post. Here&rsquo;s the new version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.crossplane.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Composition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">jetpostgresql.gcp.database.wk</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">provider</span>: <span style="color:#ae81ff">gcp</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">crossplane.io/xrd</span>: <span style="color:#ae81ff">xjetpostgresql.database.wk</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># should I set this here ? Please help</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># writeConnectionSecretsToNamespace: crossplane</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">compositeTypeRef</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">database.wk/v1alpha1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">XJetPostgreSQL</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqlinstance</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">base</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">sql.gcp.upbound.io/v1beta1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">DatabaseInstance</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">annotations</span>: 
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">crossplane.io/external-name</span>: <span style="color:#e6db74">&#34;crossplanesqlinstance&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">composition.upbound.io/name</span>: <span style="color:#ae81ff">crossplanesqlinstance</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">providerConfigRef</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workload-identity</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">deletionPolicy</span>: <span style="color:#ae81ff">Delete</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">forProvider</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">databaseVersion</span>: <span style="color:#ae81ff">POSTGRES_14</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">region</span>: <span style="color:#ae81ff">us-central1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">deletionProtection</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">settings</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">tier</span>: <span style="color:#ae81ff">db-f1-micro</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">diskType</span>: <span style="color:#ae81ff">PD_SSD</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">diskSize</span>: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">ipConfiguration</span>:
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">ipv4Enabled</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">authorizedNetworks</span>:
</span></span><span style="display:flex;"><span>                    - <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;0.0.0.0/0&#34;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">databaseFlags</span>:
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsql.iam_authentication</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;on&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">userLabels</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">creator</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">owner</span>: <span style="color:#ae81ff">prune</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">writeConnectionSecretToRef</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqlinstance</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">patches</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set diskSize based on the Claim</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;spec.parameters.storageGB&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.forProvider.settings[0].diskSize&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the secret name to the claim name</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.name&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">transforms</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">string</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Format</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">fmt</span>: <span style="color:#e6db74">&#34;%s-pginstance&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># change secret namespace to the one of the claim</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-namespace]&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.namespace&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set label app = name of the original claim</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/app]&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the name of the external resource to be the name of the claim</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;metadata.annotations[crossplane.io/external-name]&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set instance size to the one defined in the claim</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;spec.parameters.instanceSize&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.forProvider.settings[0].tier&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">transforms</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">map</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">map</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">small</span>: <span style="color:#ae81ff">db-custom-1-3840</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">medium</span>: <span style="color:#ae81ff">db-custom-2-7680</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">large</span>: <span style="color:#ae81ff">db-custom-4-15360</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">policy</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">fromFieldPath</span>: <span style="color:#ae81ff">Required</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqldb</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">base</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">sql.gcp.upbound.io/v1beta1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Database</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">annotations</span>: 
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">crossplane.io/external-name</span>: <span style="color:#e6db74">&#34;crossplanesqldb&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">providerConfigRef</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workload-identity</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">deletionPolicy</span>: <span style="color:#ae81ff">Delete</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">forProvider</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">instanceSelector</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">MatchControllerRef</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">matchLabels</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">composition.upbound.io/name</span>: <span style="color:#ae81ff">crossplanesqlinstance</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">writeConnectionSecretToRef</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqldb</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">patches</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the secret name to the claim name</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.name&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">transforms</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">string</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Format</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">fmt</span>: <span style="color:#e6db74">&#34;%s-pgdb&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># change secret namespace to the one of the claim</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-namespace]&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.namespace&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the name of the DB resource to be the name defined in the claim</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;spec.parameters.dbName&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;metadata.annotations[crossplane.io/external-name]&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set app Label</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/app]&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqldbuser</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">base</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">sql.gcp.upbound.io/v1beta1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">User</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">annotations</span>: 
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># set the name of the DB User, this is hardcoded for demo but should come from the CRD</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Cloud IAM service account should be created without &#34;.gserviceaccount.com&#34; suffix</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">crossplane.io/external-name</span>: <span style="color:#e6db74">&#34;demo-project-service-account@my-GCP-project.iam&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">providerConfigRef</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workload-identity</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">deletionPolicy</span>: <span style="color:#ae81ff">Delete</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">forProvider</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">instanceSelector</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">MatchControllerRef</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">matchLabels</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">composition.upbound.io/name</span>: <span style="color:#ae81ff">crossplanesqlinstance</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">type</span>: <span style="color:#ae81ff">CLOUD_IAM_SERVICE_ACCOUNT</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">writeConnectionSecretToRef</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqluser</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">patches</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the secret name to the claim name</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.name&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">transforms</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">string</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Format</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">fmt</span>: <span style="color:#e6db74">&#34;%s-pguser&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># change secret namespace to the one of the claim</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-namespace]&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.namespace&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the name of the DB User, this is hardcoded for demo but should come from the Claim CRD</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># - fromFieldPath: &#34;spec.parameters.dbName&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#   toFieldPath: &#34;metadata.annotations[crossplane.io/external-name]&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set app Label</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">FromCompositeFieldPath</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/app]&#34;</span>
</span></span></code></pre></div><p>In short, beside the <code>Provider</code> changes, the <code>patch</code> also slightly changed, with a <code>type: FromCompositeFieldPath</code>. All that is well documented.</p>
<p>I then applied this Composition, which gave me a warning:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>k apply -f Composition.yaml
</span></span><span style="display:flex;"><span>Warning: CustomResourceDefinition.apiextensions.k8s.io <span style="color:#e6db74">&#34;XJetPostgreSQL.database.wk&#34;</span> not found
</span></span><span style="display:flex;"><span>composition.apiextensions.crossplane.io/jetpostgresql.gcp.database.wk created
</span></span></code></pre></div><p>I guess I should have started with the XRD :)</p>
<h3 id="composite-resource-definition-xrd">Composite Resource Definition (XRD)</h3>
<p>It seems nothing changed here&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.crossplane.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CompositeResourceDefinition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">xjetpostgresqls.database.wk</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#ae81ff">database.wk</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">names</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">XJetPostgreSQL</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">xjetpostgresqls</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">claimNames</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">JetPostgreSQL</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">jetpostgresqls</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">versions</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">v1alpha1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">served</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">referenceable</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">schema</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">openAPIV3Schema</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">storageGB</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">size of the Database in GB - integer</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">dbName</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">name of the new DB inside the DB instance - string</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">instanceSize</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">instance size - string</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">enum</span>:
</span></span><span style="display:flex;"><span>                      - <span style="color:#ae81ff">small</span>
</span></span><span style="display:flex;"><span>                      - <span style="color:#ae81ff">medium</span>
</span></span><span style="display:flex;"><span>                      - <span style="color:#ae81ff">large</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">required</span>:
</span></span><span style="display:flex;"><span>                  - <span style="color:#ae81ff">storageGB</span>
</span></span><span style="display:flex;"><span>                  - <span style="color:#ae81ff">dbName</span>
</span></span><span style="display:flex;"><span>                  - <span style="color:#ae81ff">instanceSize</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">required</span>:
</span></span><span style="display:flex;"><span>              - <span style="color:#ae81ff">parameters</span>
</span></span></code></pre></div><h3 id="claims">Claims</h3>
<p>Last part is a <code>Claim</code> and again noting changed here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">database.wk/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">JetPostgreSQL</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># namespace: test-namespace</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">jet-db-claim</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">storageGB</span>: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">dbName</span>: <span style="color:#ae81ff">xrdb</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">instanceSize</span>: <span style="color:#ae81ff">small</span> <span style="color:#75715e"># small, medium, large</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">writeConnectionSecretToRef</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">jet-db-claim-details</span>
</span></span></code></pre></div><h2 id="conclusion-1">Conclusion</h2>
<p>I know this blog post is not a full fledged Crossplane test. I also did not iterate on my previous issues, like <code>what if I want a Composition to create 2 users or 2 DBs on the same instance ?</code>.</p>
<p>Let&rsquo;s say i&rsquo;m keeping all that for the next blog post :)</p>
<p>All in all, it feels that the <code>Jet</code> Providers (generated out of Terraform Providers) are now organized and supported by Upbound.</p>
<p>The documentation has been improved, even if there&rsquo;s still room to improve. For example, when you search for a Provider and check the examples associated with it, there&rsquo;s usually some fields, like <code>labels</code> or <code>annotations</code> with some strange values. While not a problem, I&rsquo;m always wondering <code>what am I missing here ?</code>.</p>
<p>My conclusion for today is that Crossplane matured and may now be production ready. But in the meantime, we started using the <a href="https://github.com/terraform-google-modules">Google Modules for Terraform</a>, which are some kind of <code>Compositions</code> for Terraform.</p>
<p>It&rsquo;s still complicated, but ease the pain for Developpers that don&rsquo;t know (and don&rsquo;t want to know) what needs to be created in the background to get a database.</p>
<p>I guess it&rsquo;s now time for the Corssplane Community to start sharing their <code>Compositions</code> (or Configurations) on the <a href="https://marketplace.upbound.io/configurations">Upbound Marketplace</a></p>
<p>Stay tuned for more &ldquo;production style&rdquo; use of Crossplane !</p>
]]></content>
        </item>
        
        <item>
            <title>ArgoCD Appset-of-Appset Pattern</title>
            <link>https://piratemakers.ca/posts/2024/01/argocd-appset-of-appset-pattern/</link>
            <pubDate>Wed, 10 Jan 2024 14:31:56 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2024/01/argocd-appset-of-appset-pattern/</guid>
            <description>We all know the App-of-Apps pattern, where one repo contains many other ArgoCD Applications.
While testing how to add my Kubernetes Cluster&amp;rsquo;s Addons using ArgoCD, which represents all the apps mandatory in all clustets, like crossplane, prometheus (victoriaMetrics), exporters&amp;hellip;, I came to test a &amp;ldquo;new&amp;rdquo; pattern: AppSet-Of-AppSet.
This is a quick post going over my experiements. It is not a howto, or a suggestion to go this route, it&amp;rsquo;s just a test.</description>
            <content type="html"><![CDATA[<p><img src="images/1.png#layoutTextWidth" alt="Docker Fail"></p>
<p>We all know the App-of-Apps pattern, where one repo contains many other <code>ArgoCD Applications</code>.</p>
<p>While testing how to add my Kubernetes Cluster&rsquo;s Addons using ArgoCD, which represents all the apps mandatory in all clustets, like crossplane, prometheus (victoriaMetrics), exporters&hellip;, I came to test a &ldquo;new&rdquo; pattern: <code>AppSet-Of-AppSet</code>.</p>
<p>This is a quick post going over my experiements. It is <strong>not</strong> a howto, or a suggestion to go this route, it&rsquo;s just a test.</p>
<h2 id="directory-structure">Directory Structure</h2>
<pre tabindex="0"><code>├── deployments
│   ├── argocd
│   │   └── qa.yaml
│   └── k8s
│       ├── addons
│       │   └── qa
│       │       └── qa-us-central-cluster
│       │           └── crossplane
│       │               └── kustomization.yaml
│       ├── base
│       │   ├── configmaps
│       │   │   ├── cm.yaml
│       │   │   └── kustomization.yaml
│       │   └── crossplane
│       │       ├── kustomization.yaml
│       │       ├── namespaces.yaml
│       │       ├── providers.yaml
│       │       └── values.yaml
│       ├── config.yaml
│       └── overlays
│           └── qa
│               └── qa-us-central-cluster
│                   └── crossplane.yaml
</code></pre><h2 id="original-appset">Original AppSet</h2>
<p>This is the AppSet scanning all my Git repos (Gitlab in this example) and generating Apps. This is classic, using a <code>Matrix</code> to create one app per cluster. It is not linked to deploying my Cluster Addons, it could also deploy any other apps, fron any repo.</p>
<p>In this case it is named <code>devops</code> as it will scann all the repos under <code>/devops</code> subgroup of my Gitlab Server. It will only track the <code>deployment</code> branch and will only pick repod with a <code>deployments/argocd/qa.yaml</code> file.<br>
If will then matrix the selected repos with two <code>git</code> generators:</p>
<ul>
<li>one <code>directory</code> looking for <code>deployments/k8s/overlays/qa/*</code> where <code>*</code> will be the cluster to target by the Application (<code>qa-us-central-cluster</code> from the tree above).</li>
<li>one <code>deployments/k8s/config.yaml</code> file, global to the repo, with some MANDATORY values in it. It is mandatory as the AppsetController WILL NOT pick the repo if the file does not contains certain valued needed by the template.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ApplicationSet</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">devops</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argocd</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generators</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">matrix</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">generators</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">scmProvider</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">cloneProtocol</span>: <span style="color:#ae81ff">https</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">filters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">branchMatch</span>: <span style="color:#ae81ff">^deployment$</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">pathsExist</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">deployments/argocd/qa.yaml</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">gitlab</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">allBranches</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">api</span>: <span style="color:#ae81ff">https://gitlab.mycompany.net/</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">group</span>: <span style="color:#ae81ff">devops</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">includeSubgroups</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">tokenRef</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">token</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">gitlab-token</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">matrix</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">generators</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">git</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">directories</span>:
</span></span><span style="display:flex;"><span>              - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">deployments/k8s/overlays/qa/*</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">pathParamPrefix</span>: <span style="color:#ae81ff">repo</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">repoURL</span>: <span style="color:#e6db74">&#39;{{ .url }}&#39;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">requeueAfterSeconds</span>: <span style="color:#ae81ff">60</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">revision</span>: <span style="color:#e6db74">&#39;{{ .branch }}&#39;</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">git</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">files</span>:
</span></span><span style="display:flex;"><span>              - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">deployments/k8s/config.yaml</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">pathParamPrefix</span>: <span style="color:#ae81ff">config</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">repoURL</span>: <span style="color:#e6db74">&#39;{{ .url }}&#39;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">requeueAfterSeconds</span>: <span style="color:#ae81ff">60</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">revision</span>: <span style="color:#e6db74">&#39;{{ .branch }}&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">goTemplate</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">preservedFields</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">environment</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">syncPolicy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">preserveResourcesOnDeletion</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;{{ $name := (printf &#34;%s-%s-%s&#34; .organization .repository .repo.path.basename)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }}{{ $name | normalize }}&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">destination</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;{{ .repo.path.basename }}&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">namespace</span>: <span style="color:#e6db74">&#39;{{ .repository }}&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Owner</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{.metadata.owner}}&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Team</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{.metadata.team}}&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Environment</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#ae81ff">qa</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Description</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{.metadata.description}}&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">project</span>: <span style="color:#e6db74">&#39;{{.metadata.team}}&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">deployments/k8s/overlays/qa/{{ .repo.path.basename }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">repoURL</span>: <span style="color:#e6db74">&#39;{{ .url }}&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">targetRevision</span>: <span style="color:#e6db74">&#39;{{ .branch }}&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">syncPolicy</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">automated</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">allowEmpty</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">prune</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">selfHeal</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">managedNamespaceMetadata</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">managedBy</span>: <span style="color:#ae81ff">argocd</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">origin</span>: <span style="color:#ae81ff">devops_cicd_argocd</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">syncOptions</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">CreateNamespace=true</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">ServerSideApply=true</span>
</span></span></code></pre></div><p>The <code>deployments/k8s/config.yaml</code> must contain something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">owner</span>: <span style="color:#e6db74">&#34;infra&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">team</span>: <span style="color:#e6db74">&#34;infrastructure&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">description</span>: <span style="color:#e6db74">&#34;This is part of the GKE Cluster Addons&#34;</span>
</span></span></code></pre></div><p>And the <code>team</code> value must reflect an existing <code>App Project</code> that already exist in ArgoCD. In my case:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">AppProject</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">meta.helm.sh/release-name</span>: <span style="color:#ae81ff">argocd</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">meta.helm.sh/release-namespace</span>: <span style="color:#ae81ff">argocd</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">finalizers</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">resources-finalizer.argocd.argoproj.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">infrastructure</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argocd</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">clusterResourceWhitelist</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">group</span>: <span style="color:#e6db74">&#39;*&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#e6db74">&#39;*&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">description</span>: <span style="color:#ae81ff">projects for Infrastructure Team</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">destinations</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">namespace</span>: <span style="color:#e6db74">&#39;*&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server</span>: <span style="color:#e6db74">&#39;*&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">roles</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Project Admin privileges to infrastructure project</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">groups</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">infrastructure@company.com</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">project-admin-infrastructure</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">policies</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">p, proj:infrastructure:project-admin, applicationsets, get, infrastructure/*,</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">allow</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">p, proj:infrastructure:project-admin, applications, get, infrastructure/*, allow</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">p, proj:infrastructure:project-admin, applications, sync, infrastructure/*,</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">allow</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">p, proj:infrastructure:project-admin, clusters, get, infrastructure/*, allow</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">p, proj:infrastructure:project-admin, repositories, get, infrastructure/*, allow</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">p, proj:infrastructure:project-admin, projects, get, infrastructure/*, allow</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">p, proj:infrastructure:project-admin, logs, get, infrastructure/*, allow</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">sourceRepos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#39;*&#39;</span>
</span></span></code></pre></div><p>Once deployed, a new <code>Application</code> will be created, and will deploy the content of the <code>deployments/overlays/qa/qa-us-central-cluster</code>, in our case, the <code>crossplane.yaml</code> file.</p>
<h2 id="the-appset-of-appset">The Appset of Appset</h2>
<p>The <code>crossplane.yaml</code> file contains another <code>ApplicationSet</code> that will be deployed, and generate new apps for each of the addons.</p>
<p>This Appset contains static values, because it is tied to this specific repo. This sounds a little dumb, but we&rsquo;ll discuss that at the end :)</p>
<p>So this time the cluster is a static list that I can manage for my addons. For example, this AppSet will only target the current repo, so we &ldquo;hardcode&rdquo; the URL&hellip;</p>
<p>Also, because this AppSet should only be deployed in the ArgoCD clusters, and not all of the clusters of your platform, we also grab the cluster names from the file&rsquo;s path.<br>
So the Git Generator is looking for <code>deployments/k8s/addons/qa/*/crossplane</code> so we explicitelly discover two folders:</p>
<ul>
<li>the name of the cluster</li>
<li>the name of the Addon (crossplane)</li>
</ul>
<p>The template also set a <code>ignoreDifferences</code> which is specific to Crossplane (as of today but PRed a change that was merged in the Helm Chart). This is the main reason I went to test this Appset-of-Appset pattern in the first place: Have each addons be configured with different values.</p>
<p>In theory, this Appset should only be used for Crossplane deployment. Let&rsquo;s say we want to deploy <code>VictoriaMetrics</code>, then we would have another Appset <code>victoriametrics.yaml</code> with hardcoded values for it. The Appset here is only used to auto-generate apps per cluster.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ApplicationSet</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">addon-crossplane</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argocd</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generators</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">matrix</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">generators</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">list</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">elements</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">url</span>: <span style="color:#ae81ff">https://gitlab.mycompany.net/devops/argocd-infrastructure-addons.git</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">branch</span>: <span style="color:#ae81ff">deployment</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">env</span>: <span style="color:#ae81ff">qa</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argocd</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">matrix</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">generators</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">git</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">directories</span>:
</span></span><span style="display:flex;"><span>              - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">deployments/k8s/addons/qa/*/crossplane</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">pathParamPrefix</span>: <span style="color:#ae81ff">repo</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">repoURL</span>: <span style="color:#e6db74">&#39;{{ .url }}&#39;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">requeueAfterSeconds</span>: <span style="color:#ae81ff">60</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">revision</span>: <span style="color:#e6db74">&#39;{{ .branch }}&#39;</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">git</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">files</span>:
</span></span><span style="display:flex;"><span>              - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">deployments/k8s/config.yaml</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">pathParamPrefix</span>: <span style="color:#ae81ff">config</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">repoURL</span>: <span style="color:#e6db74">&#39;{{ .url }}&#39;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">requeueAfterSeconds</span>: <span style="color:#ae81ff">60</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">revision</span>: <span style="color:#e6db74">&#39;{{ .branch }}&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">goTemplate</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">preservedFields</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">environment</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">syncPolicy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">preserveResourcesOnDeletion</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;{{ $name := (printf &#34;addons-%s-%s-%s&#34; .repo.path.basename .env (index .repo.path.segments 4))}}{{ $name | normalize }}&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">destination</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;{{ index .repo.path.segments 4 }}&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">namespace</span>: <span style="color:#e6db74">&#39;{{ .repo.path.basename }}&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">ignoreDifferences</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">group</span>: <span style="color:#ae81ff">apps</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">jqPathExpressions</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">.spec.template.spec.containers[].env[].valueFrom.resourceFieldRef.divisor</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">.spec.template.spec.initContainers[].env[].valueFrom.resourceFieldRef.divisor</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Owner</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{.metadata.owner}}&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Team</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{.metadata.team}}&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Environment</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#ae81ff">qa</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Description</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{.metadata.description}}&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">val4</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{ index .repo.path.segments 4 }}&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">val5</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{ index .repo.path.segments 5 }}&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">project</span>: <span style="color:#e6db74">&#39;{{.metadata.team}}&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">deployments/k8s/addons/{{ .env }}/{{ index .repo.path.segments 4 }}/{{ .repo.path.basename }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">repoURL</span>: <span style="color:#e6db74">&#39;{{ .url }}&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">targetRevision</span>: <span style="color:#e6db74">&#39;{{ .branch }}&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">syncPolicy</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">automated</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">allowEmpty</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">prune</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">selfHeal</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">managedNamespaceMetadata</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">wk/managedBy</span>: <span style="color:#ae81ff">argocd</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">wk/origin</span>: <span style="color:#ae81ff">devops_cicd_argocd</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">syncOptions</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">CreateNamespace=true</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">ServerSideApply=true</span>
</span></span></code></pre></div><h2 id="the-crossplane-kustomization">The Crossplane Kustomization</h2>
<p>The previous AppSet will, in turn, create an application that will deploy the content of <code>deployments/k8s/addons/qa/qa-us-central-cluster/crossplane/kustomization.yaml</code>.<br>
This file contains something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">kustomize.config.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Kustomization</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">../../../../base/crossplane</span>
</span></span></code></pre></div><p>And just as a hint, here&rsquo;s how I inflates the Crossplane Helm chart:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># kustomization.yaml from https://medium.com/@tharukam/generate-kubernetes-manifests-with-helm-charts-using-kustomize-2f82ab5c5f11</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://kubectl.docs.kubernetes.io/references/kustomize/builtins/#_helmchartinflationgenerator_</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">kustomize.config.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Kustomization</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">helmCharts</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># https://github.com/crossplane/crossplane/tree/master/cluster/charts/crossplane</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># TODO to have it working:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># - enable helm in the argocd-cm ConfigMap by adding to the data: `kustomize.buildOptions: --load-restrictor LoadRestrictionsNone --enable-helm`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># - enable some resources to be tracked by ArgoCD: &#34;Service&#34; and &#34;pkg.crossplane.io/*&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># - Update the projects application to not track some fields:</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># ignoreDifferences:</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#   - group: apps</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#     kind: Deployment</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#     jqPathExpressions:</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#       - .spec.template.spec.containers[].env[].valueFrom.resourceFieldRef.divisor</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#       - .spec.template.spec.initContainers[].env[].valueFrom.resourceFieldRef.divisor</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">https://charts.crossplane.io/stable</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">releaseName</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># version: 0.1.0 # use latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">valuesFile</span>: <span style="color:#ae81ff">values.yaml</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">includeCRDs</span>: <span style="color:#66d9ef">false</span> <span style="color:#75715e">#no CRD in the chart, they are created by crossplane Operator</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">namespaces.yaml</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">providers.yaml</span>
</span></span></code></pre></div><p>Providers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">pkg.crossplane.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Provider</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">provider-gcp-storage</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argocd.argoproj.io/sync-wave</span>: <span style="color:#e6db74">&#34;2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">package</span>: <span style="color:#ae81ff">xpkg.upbound.io/upbound/provider-gcp-storage:v0.41.0</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">pkg.crossplane.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Provider</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">provider-gcp-sql</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argocd.argoproj.io/sync-wave</span>: <span style="color:#e6db74">&#34;2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">package</span>: <span style="color:#ae81ff">xpkg.upbound.io/upbound/provider-gcp-sql:v0.41.0</span>
</span></span></code></pre></div><p>Namespace:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Namespace</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argocd.argoproj.io/sync-options</span>: <span style="color:#ae81ff">ServerSideApply=true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argocd.argoproj.io/sync-wave</span>: <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.io/metadata.name</span>: <span style="color:#ae81ff">crossplane</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">crossplane</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Is it worth it ?</p>
<p>Yes and No&hellip;</p>
<p>Yes as a testing solution, and a way to further customize your Apps while still automating your setup.</p>
<p>No, as it is overly complicated and needs hardcoded values.</p>
<p>Of course, this is a specific case of Infrastructure buildup, not a pattern to give to Developers.<br>
While I tested this solution to go around an issue with the specific case of the Crossplane Helm Chart needing to ignore some part of the generated yaml, there&rsquo;s a new feature in the (upcoming) ArgoCD 2.10: <a href="https://blog.argoproj.io/argo-cd-v2-10-release-candidate-f69ba7bf9e06#0504">ApplicationSet Template Patch</a> !<br>
And if you read down to <code>Argo CD Server-Side Diff</code>, there&rsquo;s also a new diff algorythm that should prevent the issue with the Crossplane Helm Chart, without doing anything&hellip;</p>
<p>My conclusion: AppSet-of-AppSet works and could be used in some strange situations.</p>
]]></content>
        </item>
        
        <item>
            <title>Docker.io &amp; OpenSource Fail (and what to do instead)</title>
            <link>https://piratemakers.ca/posts/2022/11/docker.io-opensource-fail-and-what-to-do-instead/</link>
            <pubDate>Tue, 29 Nov 2022 14:31:56 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2022/11/docker.io-opensource-fail-and-what-to-do-instead/</guid>
            <description>Ah Docker… what a sad story… The coolest and most promising openSource project, used by millions, and not able to make any profit out of it…
After a split of the many different parts of Docker, there was a move to finally try to make money with Docker Hub and Docker-For-Desktop.
Good or bad, I don’t know. What I know is that many openSource alternatives to Docker-For-Desktop now exist, and work perfectly, at least on macs, even on new M1/M2 processors.</description>
            <content type="html"><![CDATA[<p><img src="images/1.png#layoutTextWidth" alt="Docker Fail"></p>
<p>Ah Docker… what a sad story… The coolest and most promising openSource project, used by millions, and not able to make any profit out of it…</p>
<p>After a split of the many different parts of Docker, there was a move to finally try to make money with Docker Hub and Docker-For-Desktop.</p>
<p>Good or bad, I don’t know. What I know is that many openSource alternatives to Docker-For-Desktop now exist, and work perfectly, at least on macs, even on new M1/M2 processors.</p>
<p>Archy and I talked about it, too much, during our KubeCon NA 2022 session, that <a href="https://youtu.be/TKYAEjNg4Hw">you can see on Youtube</a> or <a href="https://cloud-native-canada.github.io/k8s_setup_tools/">read on our companion website</a>.</p>
<p>To name a few, <a href="https://github.com/abiosoft/colima">Colima</a>, <a href="https://rancherdesktop.io/">Rancher Desktop</a>, <a href="https://iongion.github.io/podman-desktop-companion/">PodMan</a>… Check <a href="https://cloud-native-canada.github.io/k8s_setup_tools/local_cluster/options/colima/">here</a>, <a href="https://cloud-native-canada.github.io/k8s_setup_tools/local_cluster/options/rancher/">here</a> and <a href="https://cloud-native-canada.github.io/k8s_setup_tools/local_cluster/podman/">here</a> for install examples, and learn a lot more. OK, we’re done with advertising :)</p>
<p>Kubernetes itself <a href="https://kubernetes.io/blog/2022/02/17/dockershim-faq/">moved away from the Docker Shim</a> (another docker component) in the latest versions.</p>
<p>Going back to Docker… When building my KubeCon talk, I realized that one of my favorite project, <a href="https://cloud-native-canada.github.io/k8s_setup_tools/kubectl_tooling/kubecolor/">KubeColor</a>, was mostly un-maintained for almost 2 years. As a good OpenSource user (and after many tries to reach the creator, through all means possible), I decided to “fork” it and start maintaining it.</p>
<p>Lucky for me, the <code>kubecolor</code> Github Org wasn’t existing yet. I ended up creating <a href="https://github.com/kubecolor/kubecolor">https://github.com/kubecolor/kubecolor</a> !</p>

    <img src="images/2.jpg"  alt="KubeColor"  class="center"  style="border-radius: 0px; background-color: #eeeeee;"  />


<p>That allowed me to also offer KubeColor install through <code>brew</code> with a cool command line, <code>brew install kubecolor/tap/kubecolor</code> .</p>
<p>But an OpenSource project is not complete until you have a docker image available !</p>
<h3 id="docker-oss">Docker OSS</h3>
<p>Back in the time, Docker Hub was free. stop.</p>
<p>It was easy to create an org and publish OSS projects. Really few clicks away.</p>
<p>Today, well, there’s a specific program for that: <a href="https://www.docker.com/community/open-source/application/">Docker-Sponsored Open Source Program</a>.</p>
<p><img src="images/3.jpeg#layoutTextWidth" alt="image"></p>
<p>What you get with that is:</p>
<ul>
<li>free autobuilds</li>
<li>rate-limit removal for all users pulling public images from your project namespace</li>
<li>special badging on Docker Hub (this will be visible within two weeks)</li>
</ul>
<p>So I applied to this program, somewhere in <strong>September</strong>.</p>
<p>And I waited…</p>
<p>Waited…</p>
<p>I finally got an answer on <strong>November 23</strong>:</p>
<blockquote>
<p>Congratulations! Your project has been approved for the Docker-Sponsored Open Source program</p>
</blockquote>
<p>Well, I don’t have the exact timeline, but oh man, OpenSource is moving fast… but I was waiting…</p>
<blockquote>
<p>A Docker Team subscription will be allocated to the project organization Docker ID specified in your application within the next 3 weeks</p>
</blockquote>
<p>3 weeks ?</p>
<h3 id="docker-miss">Docker Miss</h3>
<p>So, 3 days later, <strong>November 26</strong>, I received another email:</p>
<blockquote>
<p>We have been trying to get in touch with you, please provide us with the requested information. If we don’t hear back from you in 5 days, this case will be automatically marked as ‘Closed’.</p>
</blockquote>
<p>Wait, what ? 5 days ?</p>
<p>November 26 is the ThanksGiving week-end, right ?</p>
<p>And of course, <strong>November 28</strong>, the deadline was over, I missed my turn:</p>
<blockquote>
<p>Thank you for submitting your request. Since we have not heard back from you in 5 days, your case has been automatically marked as ‘Closed’.</p>
</blockquote>
<h3 id="what-to-do-to-not-waste-your-time">What to do to not waste your time</h3>
<p>I told you, OpenSource is moving fast.</p>
<p>Do you really think I waited all this time ? OF COURSE NOT !</p>
<p>As soon as my apply to Docker OSS program was done, I started looking for alternatives… and I didn’t had to look far away…</p>
<h3 id="github-"><strong>GITHUB !</strong></h3>
<p>I already had a Github Org for the project. Github (like other companies supporting OSS) started to add new features to their offer as soon as Docker shifted to a “paid product”. <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">Including “Docker” Images registries</a>.</p>
<p>And <a href="https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions">Github offers Actions for free</a> (with limited CPU time) !</p>
<p>How long did it took me to port everything to Github ?</p>
<p>Answer is: not much</p>
<h4 id="releasing-binaries">Releasing Binaries</h4>
<p>Because KubeColor is a Go program, I used the <code>goreleaser/goreleaser-action</code> to build the Release. This includes multi-OS binaries, package and so on. It’s all the stuff you fine in <a href="https://github.com/kubecolor/kubecolor/releases">the Release section of the project</a>.</p>
<p>Just create a <code>.github/workflows/release.yml</code> file in your repo and add:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">goreleaser</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#39;*&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">goreleaser</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Checkout</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">git fetch --force --tags</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Set up Go</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-go@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">go-version</span>: <span style="color:#e6db74">&#39;&gt;=1.19.1&#39;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">cache</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run GoReleaser</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">goreleaser/goreleaser-action@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">distribution</span>: <span style="color:#ae81ff">goreleaser</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">version</span>: <span style="color:#ae81ff">latest</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">args</span>: <span style="color:#ae81ff">release --rm-dist</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">GITHUB_TOKEN</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">GLOBAL_GITHUB_TOKEN</span>: <span style="color:#ae81ff">${{ secrets.GLOBAL_GITHUB_TOKEN }}</span>
</span></span></code></pre></div><p>The <code>GITHUB_TOKEN</code> secret is auto-provided by the Github Action pipeline.</p>
<p>The <code>GLOBAL_GITHUB_TOKEN</code> is one I created with more privileges.</p>
<p><strong>GoReleaser</strong> actually use a config file, in the root of your project, named <code>.goreleaser.yml</code>. Here’s mine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">release</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">before</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">go mod tidy</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">make testshort</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">builds</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">id</span>: <span style="color:#ae81ff">kubecolor</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">main</span>: <span style="color:#ae81ff">./cmd/kubecolor/main.go</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">binary</span>: <span style="color:#ae81ff">kubecolor</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ldflags</span>:
</span></span><span style="display:flex;"><span>    - -<span style="color:#ae81ff">s -w</span>
</span></span><span style="display:flex;"><span>    - -<span style="color:#ae81ff">X main.Version={{.Version}}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">goos</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">windows</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">darwin</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">linux</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">goarch</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">arm64</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">amd64</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">ppc64le</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">archives</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">builds</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">kubecolor</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replacements</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">darwin</span>: <span style="color:#ae81ff">Darwin</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">linux</span>: <span style="color:#ae81ff">Linux</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">windows</span>: <span style="color:#ae81ff">Windows</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">amd64</span>: <span style="color:#ae81ff">x86_64</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">format</span>: <span style="color:#ae81ff">tar.gz</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">format_overrides</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">goos</span>: <span style="color:#ae81ff">windows</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">format</span>: <span style="color:#ae81ff">zip</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">brews</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kubecolor</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tap</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">owner</span>: <span style="color:#ae81ff">kubecolor</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">homebrew-tap</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">token</span>: <span style="color:#e6db74">&#34;{{ .Env.GLOBAL_GITHUB_TOKEN }}&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">homepage</span>: <span style="color:#e6db74">&#34;https://github.com/kubecolor/kubecolor&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">description</span>: <span style="color:#e6db74">&#34;Colorize your kubectl output&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">license</span>: <span style="color:#e6db74">&#34;MIT&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">folder</span>: <span style="color:#ae81ff">Formula</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">install</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    bin.install &#34;kubecolor&#34;</span>    
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">checksum</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name_template</span>: <span style="color:#e6db74">&#39;checksums.txt&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">changelog</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">sort</span>: <span style="color:#ae81ff">asc</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">filters</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">exclude</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#39;^docs:&#39;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#39;^test:&#39;</span>
</span></span></code></pre></div><p>As you can see, the <code>GLOBAL_GITHUB_TOKEN</code> is used to “publish” the needed files into another GitHub project, <code>homebrew-tap</code>.</p>
<p>So before running this action, you have to create another Github project: <a href="https://github.com/kubecolor/homebrew-tap">https://github.com/kubecolor/homebrew-tap</a></p>
<p>You don’t have to put anything in there. The GoReleaser will do that for you.</p>
<p>The <code>GLOBAL_GITHUB_TOKEN</code> is actually a <a href="https://github.com/settings/tokens">Personnal Token</a> from my user, with sufficient privileges to manager both repos.</p>
<h4 id="kubecolor-docker-image">KubeColor Docker Image</h4>
<p><img src="images/4.png#layoutTextWidth" alt="image"></p>
<p>While having a docker image for KubeColor is not strictly needed, well, people will ask for it if there’s none…</p>
<p>Again, we’re going to use a Github Action for that. Create the file <code>.github/workflows/publish_docker_image.yml</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Publish docker image</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#39;main&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#39;*&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push_to_registry_on_merge</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Push docker image on merge to main</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">if</span>: <span style="color:#ae81ff">(!contains(github.event.head_commit.message, &#39;skip ci&#39;) &amp;&amp; !startsWith(github.ref, &#39;refs/tags/&#39;))</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Check out the repo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Set up Docker Buildx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">docker/setup-buildx-action@v1</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Login to GitHub Container Registry</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">docker/login-action@v1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">registry</span>: <span style="color:#ae81ff">ghcr.io</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">username</span>: <span style="color:#ae81ff">prune998</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">password</span>: <span style="color:#ae81ff">${{ secrets.GH_CONTAINER_REGISTRY_PUSHER }}</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build and push</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">docker/build-push-action@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">context</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">push</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">tags</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            ghcr.io/${{ github.repository }}:${{ github.sha }}</span>            
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push_to_registry_on_tag</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Push docker image to GitHub Container Registry on tag</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">if</span>: <span style="color:#ae81ff">startsWith(github.ref, &#39;refs/tags/v&#39;)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Check out the repo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Set up Docker Buildx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">docker/setup-buildx-action@v1</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Login to GitHub Container Registry</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">docker/login-action@v1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">registry</span>: <span style="color:#ae81ff">ghcr.io</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">username</span>: <span style="color:#ae81ff">prune998</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">password</span>: <span style="color:#ae81ff">${{ secrets.GH_CONTAINER_REGISTRY_PUSHER }}</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build and push</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">docker/build-push-action@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">context</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">push</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">tags</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            ghcr.io/${{ github.repository }}:${{ github.ref_name}}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            ghcr.io/${{ github.repository }}:latest</span>            
</span></span></code></pre></div><p>Here, we are using the <code>ghcr.io</code> Container (Docker) Registry. It’s as simple as that…</p>
<p>I have two different steps to tag the image differently if I merge to main branch or tag a release.</p>
<p>I’m no GH Actions expert, let me know if there’s a better (DRY-er) way for that. I just had to move fast…</p>
<p>Here, I’m using another Secret, <code>GH_CONTAINER_REGISTRY_PUSHER</code>, which allows this pipeline to push into the registry.</p>
<p>The registry lives at the ORG level. The <strong>GHCR</strong> is actually called <code>Packages</code> in the Org Setup at <code>https://github.com/organizations/&lt;your org&gt;/settings/packages</code> . You have to set it to Public so it’s a public repo.</p>
<p>You can then access your <code>packages</code> at <code>https://github.com/orgs/&lt;your org&gt;/packages</code></p>
<p><img src="images/5.png#layoutTextWidth" alt="image"></p>
<p>There’s not much to see about it:</p>
<p><img src="images/6.png#layoutTextWidth" alt="image"></p>
<p>When you click on the <code>Package Settings</code> at the right here, you can then change the visibility (public/private):</p>
<p><img src="images/7.png#layoutTextWidth" alt="image"></p>
<p><img src="images/8.png#layoutTextWidth" alt="image"></p>
<h3 id="wrap-up">Wrap-up</h3>
<p>To me, Docker is gone. We hopefully have alternatives for everything that was docker before.</p>
<p>I’m not sure what’s going to happen to docker in the future. I know a lot of big companies are paying so their docker images has no download or bandwidth limits, so I guess they will keep on for some time.</p>
<p>I’m really happy of this GitHub alternative though, which is really fast to setup, free and more secure as everything stays at the same place.</p>
<p>Note: All docker related images were generated using StableDiffusion at <a href="https://huggingface.co/spaces/lnyan/stablediffusion-infinity">https://huggingface.co/spaces/lnyan/stablediffusion-infinity</a></p>
]]></content>
        </item>
        
        <item>
            <title>Playing with Crossplane, for real</title>
            <link>https://piratemakers.ca/posts/2022/08/playing-with-crossplane-for-real/</link>
            <pubDate>Wed, 24 Aug 2022 18:27:29 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2022/08/playing-with-crossplane-for-real/</guid>
            <description>It’s 2022 ! We all know about the necessity of creating your Infra AS CODE. I guess we can all agree that Terraform (TF) is the leader in this field.
that said, TF is far from easy to use. This is actually not the fault of TF itself (or its parent company, Hashicorp), but to the fact that each provider is so specific that it’s impossible to build up something clean out of it.</description>
            <content type="html"><![CDATA[<p><img src="images/1.png#layoutTextWidth" alt="image"></p>
<p>It’s 2022 ! We all know about the necessity of creating your Infra AS CODE. I guess we can all agree that <a href="https://www.hashicorp.com/products/terraform">Terraform (TF)</a> is the leader in this field.</p>
<p>that said, TF is far from easy to use. This is actually not the fault of TF itself (or its parent company, <a href="https://www.hashicorp.com/">Hashicorp</a>), but to the fact that each provider is so specific that it’s impossible to build up something clean out of it.</p>
<p>So we end up with complicated code, tricks to make things happen or not (like using <code>count</code>) and the two biggest pain point:</p>
<ul>
<li>having to manage a state file which holds the result of the last apply</li>
<li>globally not possible to re-use code or build simple abstraction to create a resource in different clouds, like a K8s cluster in AWS and Google.</li>
</ul>
<p>The global consensus is that TF is too complicated for Devs team to use and maintain well. It’s down to the Ops to operate it, or at least, try to provide <code>modules</code> so Devs can work with what is supposed to be an abstraction.</p>
<h4 id="then-enters--crossplanehttpscrossplanegithubio-">Then enters  <a href="https://crossplane.github.io/">Crossplane</a> !</h4>
<p>Before diving into Crossplane, let’s put some notice, or as we like to call it:</p>
<h3 id="tl--dr">TL ; DR</h3>
<ul>
<li>I’m no Crossplane expert and only spent few days playing with it for a Proof Of Concept. Please, help me better understand/use it if you think i’m wrong</li>
<li>OSS Crossplane Providers are really limited</li>
<li>Jet Providers are on par with Terraform providers, but lack docs and may be buggy and are not well supported or updated by the community</li>
<li>Still unsure how to replicate 100% of what you can do with TF</li>
</ul>
<p><strong>Overall conclusion is that it’s not production ready for me</strong></p>
<p>Please follow up for details</p>
<h3 id="crossplane">Crossplane</h3>
<p>As stated on their website: <strong>The cloud native control plane framework</strong></p>
<p>Saying that Crossplane is a K8s native way to do IaC would be limitative. Crossplane is far more than that. Crossplane, to me, is a way to build simple abstractions in front of complex stuff, like infrastructure or deployments.</p>
<p>As TF, Crossplane is build up on <a href="https://github.com/crossplane-contrib"><strong>Providers</strong></a> (<a href="https://crossplane.github.io/docs/v1.9/concepts/providers.html">see official list here</a>), which extends Crossplane with new <em>Managed Resource Type</em> to work with.</p>
<p>But the strength of Crossplane lies in its <code>Composition</code> feature. It is exactly what the name implies: you build up a new type of resource by combining (composing) other type of resources. Ex: create a K8s cluster and a nodepool, or create a DB Instance, a DB schema and a DB user, all at one.</p>
<p>Let’s grab some pictures from the official docs:</p>
<p><img src="images/2.png#layoutTextWidth" alt="https://crossplane.github.io/docs/v1.9/concepts/composition.html#overview"></p>
<p>You <code>claim</code> a Postresql Instance, that references a <code>Composite Resource</code> that will trigger the creation of a <code>CloudSQL Instance</code> and a <code>Firewall Rule</code> to access it. Neat !</p>
<p>It’s a little bit more complicated, so here’s another picture from the doc that is supposed to be closer to reality:</p>
<p><img src="images/3.png#layoutTextWidth" alt="https://crossplane.github.io/docs/v1.9/concepts/composition.html#how-it-works"></p>
<p>AH ! There we go !</p>
<p>You can go read the docs at <a href="https://crossplane.github.io/docs/v1.9/concepts/composition.html#overview">https://crossplane.github.io/docs/v1.9/concepts/composition.html</a>. I personally read that again and again, and wasn’t able to fully understand the real thing until I played with it, and built my own schema:</p>
<p><img src="images/4.png#layoutTextWidth" alt="image"></p>
<p>Let me break things down:</p>
<ol>
<li><strong>Infra</strong>: Deploy a Provider, like GKE, AWS, Helm, K8s, even a <a href="https://github.com/crossplane-contrib/provider-terraform">Terraform provider</a></li>
<li>The provider created a set of CRDs corresponding to each Cloud resource it manages (yellow boxes)</li>
<li><strong>Infra</strong>: Create a CompositeResourceDefinition (XRD) which creates an interface with a limited set of parameters to tweak</li>
<li>Crossplane will create and maintain two new CRDs based on the XRD: a Claim and a CompositeResource (XR) (green boxes). Crossplane will start watching and reconciling CR based on those CRDs</li>
<li><strong>Infra</strong>: Create a Composition, which will reference a source XRD and a list of Resources to created (from the CRDs created by the Provider). It’s a sort of templating resources with values from the interface (the XRD)</li>
<li><strong>Dev</strong>: Claim a resource (purple box) -&gt; a Claim is actually a CustomResource of a type maintained by Crossplane</li>
<li>Crossplane will create a CompositeResource (XR) based on the Claim</li>
<li>Crossplane will create CustomResources (CR) which are instances of the Provider’s resources, based on the content of the CompositeResource (XR) (red boxes)</li>
<li>Provider will reconcile the resources he manages, and call GCP API (in case of the GCP provider) to create the resources declared in the CR</li>
</ol>
<p>This is really powerful, and the only limitation is actually in what a provider can do.</p>
<p>Talking of which, I guess you see me coming, it’s also the biggest problem Crossplane has: it all depends on what a Provider can do !Oh, by the way, I’ll be a speaker at <a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/">KubeCon North America 2022 in Detroit</a> , please <a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/program/schedule/">check my talk here</a>, register for Thursday, October 27 • 2:30pm — 4:00pm:</p>
<p><a href="https://kccncna2022.sched.com/event/182F7/tutorial-set-up-your-shell-for-kubernetes-productivity-and-be-efficient-quickly-sebastien-prune-thomas-wunderkind-archy-ayrat-khayretdinov-google">Tutorial: Set Up Your Shell For Kubernetes Productivity And Be Efficient Quickly — Sebastien “Prune” Thomas, Wunderkind &amp; Archy Ayrat Khayretdinov, Google</a></p>
<p><img src="images/5.png#layoutTextWidth" alt="image"></p>
<h3 id="question-1-providers">Question 1: Providers</h3>
<p>As stated, <code>Providers</code> are the part that manages some resources. In fact, it’s a <code>Pod</code> that will be deployed along Crossplane, will create CRD for the resource it manages and watch on them. Each instance of a managed resource will make the <code>Provider</code> create and maintain a resource. For the GCP provider, that means calling the GCP API and create some resources.</p>
<p>I’m not diving into <code>Providers</code>configuration here. It involves installing the provider, giving it a global config and some more specific variations of the config, like having a <code>Dev</code> , <code>Staging</code> and <code>Prod</code>provider for GCP. I would maybe have to create a mix of configurations for each of my <code>env</code> * <code>project</code> so I can ensure some devs can deploy to <code>Project A</code> in <code>Dev</code> but not on <code>Prod</code> or in <code>Project B</code> . This is something I haven’t explored yet… Please, again, comment.</p>
<p>You can usually check for Provider’s CRD (supported Resources) at <a href="https://doc.crds.dev/">https://doc.crds.dev/</a>.<br>
Ex:</p>
<ul>
<li>crossplane own CRDs: <a href="https://doc.crds.dev/github.com/crossplane/crossplane@v1.9.0">https://doc.crds.dev/github.com/crossplane/crossplane@v1.9.0</a></li>
<li>crossplane GCP Provider (official): <a href="https://doc.crds.dev/github.com/crossplane/provider-gcp@v0.21.0">https://doc.crds.dev/github.com/crossplane/provider-gcp@v0.21.0</a></li>
</ul>
<p>Let’s dive in the GCP provider:</p>
<p><img src="images/6.png#layoutTextWidth" alt="image"></p>
<p>28 CRDs discovered ? wait, what ? only 28 different GCP resources are managed by Crossplane ?</p>
<p>short answer: YES :(</p>
<p>So, for example, you can create a <code>CloudSQLInstance</code> which represents a Postgres or MySQL Database Instance:</p>
<p><img src="images/7.png#layoutTextWidth" alt="image"></p>
<p>But then, you just can’t create any specific DB, User or anything else related to this DB Instance. Because, well, the resources were not ported into the Provider.</p>
<p>AWS official Provider is a little better, with 172 resources.</p>
<p>This situation is just normal. Building up a provider is tedious, there are a lot of different resources, and Crossplane team is quite small compared to this huge work.<br>
At first, I guess the Cloud providers wanted to help, but it feels that in the end, they prefered build their own version of Crossplane for themselves. That is when Google created it <a href="https://cloud.google.com/config-connector/docs/overview">Config Connector</a> app, which in term is a lightweight version of Crossplane, or <a href="https://aws.amazon.com/blogs/containers/aws-controllers-for-kubernetes-ack/">AWS ACK</a>.</p>
<p>But Crossplane team is smart, so they asked <code>who else in the world is already maintaining Providers ?</code> and the answer was, as often… Terraform !</p>
<p>And the <a href="https://github.com/crossplane/terrajet">TerraJet</a> project was born !</p>
<p>TerraJet (Jet) is a way to convert Terraform Providers into Crossplane Providers, hiding the TF mechanics. With Jet, TF is run in the background and the TF State file is, let’s say, split and stored along each Crossplane Resource.</p>
<h4 id="_smart-_"><em>Smart ?</em></h4>
<p>Well, the GCP Jet Provider counts 438 resources, including all that we need to manage SQL DBs in GCP. AWS Jet Provider counts a wooping 780 resources ! I guess it’s more than you’ll ever use.</p>
<p><img src="images/8.png#layoutTextWidth" alt="image"></p>
<h3 id="question-2-docs-">Question 2: Docs ?</h3>
<p>It seems to be a lot of resources to use ! While TF docs are, well, not that bad in the end, and you have a LOT of blog posts and examples to play with, it’s not the same story for Crossplane.</p>
<p>The <a href="https://crossplane.github.io/docs/v1.9/concepts/composition.html">Composition Docs</a>, for example, showcase few different stuffs that will work out of the box if you copy/paste. But then, you want your own stuff, maybe not a DB instance. So you start digging in… and reach the <a href="https://crossplane.github.io/docs/v1.9/reference/composition.html">Composition Reference doc</a>.<br>
Once again, you’re driven through the same example, with little more detail that will just confuse you even more (at least it confused me):</p>
<ul>
<li>Should I create Claims or XR ?</li>
<li>what is this <code>compositionRef</code> about ?</li>
<li>where should I set <code>writeConnectionSecretToRef</code> ? in the Claim ? The XR ? the resource in the Composition ?</li>
<li>What are the <code>secret values</code> that the provider is returning ?</li>
</ul>
<p>Well, I guess the product is new, and not widely used yet, but man, EVERY doc, blog, talk, demo is using the same stuff. They all create a single bucket, <a href="https://crossplane.github.io/docs/v1.9/getting-started/create-configuration.html#create-compositions">a single DB instance, a VPC with few subnets</a>, and in a rare case, <a href="https://github.com/upbound/platform-ref-multi-k8s">some K8s clusters</a>.</p>
<p>To me, nothing that related to my needs.</p>
<p>And because what I want is not (yet?) supported in the official providers, I have to use the GCP Jet Provider.</p>
<h3 id="jet-providers-straight-from-terraform">Jet Providers, straight from Terraform</h3>
<p>Don’t expect to find docs on the Jet Providers… because they are transpositions from TF providers, the doc is minimal, usually <a href="https://registry.terraform.io/providers/hashicorp/google/latest/docs">a copy of the TF doc itself</a>, if any.</p>
<p>For my POC, I wanted something simple, and luckily, something that looks like what most of the examples are based on: a Postgres DB (CloudSQL). Of course, I want the Instance, plus a DB, plus few Users, hopefully using GCP WorkloadIdentity (IAM ServiceAccount binding).</p>
<p>Note that this is a really limited need so far. Only 3 resourceTypes are at play here. The real use-case would have been creating a Pub/Sub, a ComposerV2, some cloud-functions, and all the IAM stuff that allow one to trigger the other. All that at once, by Claiming ONE <code>Composition</code> .</p>
<h4 id="xrd">XRD</h4>
<p>I started creating a XRD:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.crossplane.io/v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CompositeResourceDefinition  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">xjetpostgresqls.database.wk  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#ae81ff">database.wk  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">names</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">XJetPostgreSQL  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">xjetpostgresqls  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">claimNames</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">JetPostgreSQL  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">jetpostgresqls  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">versions</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">v1alpha1  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">served</span>: <span style="color:#66d9ef">true</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">referenceable</span>: <span style="color:#66d9ef">true</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">schema</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">openAPIV3Schema</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">properties</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">properties</span>:  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>:  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object  </span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">properties</span>:  
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">storageGB</span>:  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer  </span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">size of the Database in GB - integer  </span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">dbName</span>:  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string  </span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">name of the new DB inside the DB instance - string  </span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">instanceSize</span>:  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string  </span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">instance size - string  </span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">enum</span>:  
</span></span><span style="display:flex;"><span>                      - <span style="color:#ae81ff">small  </span>
</span></span><span style="display:flex;"><span>                      - <span style="color:#ae81ff">medium  </span>
</span></span><span style="display:flex;"><span>                      - <span style="color:#ae81ff">large  </span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">required</span>:  
</span></span><span style="display:flex;"><span>                  - <span style="color:#ae81ff">storageGB  </span>
</span></span><span style="display:flex;"><span>                  - <span style="color:#ae81ff">dbName  </span>
</span></span><span style="display:flex;"><span>                  - <span style="color:#ae81ff">instanceSize  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">required</span>:  
</span></span><span style="display:flex;"><span>              - <span style="color:#ae81ff">parameters</span>
</span></span></code></pre></div><p>Here I can already see different problems. I wanted to create a DB, and a DB user with the same name, but what if I want 2 DBs ? 3 DBs? 2 users per DB ?</p>
<p>I guess I have to re-write the schema to use something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">properties</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dbs</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">array  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">items</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">properties</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">description</span>: <span style="color:#ae81ff">name of the new DB inside the DB instance - string  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">users</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">array  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">items</span>:  
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">properties</span>:  
</span></span><span style="display:flex;"><span>               <span style="color:#f92672">name</span>:  
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span></code></pre></div><p>Whatever, modelling those is not straightforward… but, well, it’s a one time effort. Totally worth it. Take your time building this, as it defines the parameters that your Dev team will use to create resources. Whatever is not defined here will use the defaults from the composition or the Provider. You’re creating your abstraction.</p>
<h4 id="compositions">Compositions</h4>
<p>Now we can create the Composition, which will take the values defined by the XRD and apply them to the Cloud Resources we need.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.crossplane.io/v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Composition  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">jetpostgresql.gcp.database.wk  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">provider</span>: <span style="color:#ae81ff">gcp  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">crossplane.io/xrd</span>: <span style="color:#ae81ff">xjetpostgresql.database.wk  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># should I set this here ? Please help  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># writeConnectionSecretsToNamespace: crossplane  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">compositeTypeRef</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">database.wk/v1alpha1  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">XJetPostgreSQL  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqlinstance  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">base</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">sql.gcp.jet.crossplane.io/v1alpha2  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">DatabaseInstance  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">annotations</span>:   
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">crossplane.io/external-name</span>: <span style="color:#e6db74">&#34;crossplanesqlinstance&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">providerConfigRef</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">crossplane-provider-jet-gcp  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">deletionPolicy</span>: <span style="color:#ae81ff">Delete  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">forProvider</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">databaseVersion</span>: <span style="color:#ae81ff">POSTGRES_14  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">region</span>: <span style="color:#ae81ff">us-central1  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">deletionProtection</span>: <span style="color:#66d9ef">false</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">settings</span>:  
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">tier</span>: <span style="color:#ae81ff">db-custom-1-3840  </span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">diskType</span>: <span style="color:#ae81ff">PD_SSD  </span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">diskSize</span>: <span style="color:#ae81ff">20</span>  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">ipConfiguration</span>:  
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">ipv4Enabled</span>: <span style="color:#66d9ef">true</span>  
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">authorizedNetworks</span>:  
</span></span><span style="display:flex;"><span>                    - <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;0.0.0.0/0&#34;</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">userLabels</span>:  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">creator</span>: <span style="color:#ae81ff">crossplane  </span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">owner</span>: <span style="color:#ae81ff">prune  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">writeConnectionSecretToRef</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">crossplane  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqlinstance  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">patches</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set diskSize based on the Claim  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;spec.parameters.storageGB&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.forProvider.settings[0].diskSize&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the secret name to the claim name  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.name&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">transforms</span>:  
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string  </span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">string</span>:  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">fmt</span>: <span style="color:#e6db74">&#34;%s-pginstance&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># change secret namespace to the one of the claim  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-namespace]&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.namespace&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set label app = name of the original claim  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/app]&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the name of the external resource to be the name of the claim  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;metadata.annotations[crossplane.io/external-name]&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set instance size to the one defined in the claim  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;spec.parameters.instanceSize&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.forProvider.settings[0].tier&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">transforms</span>:  
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">map  </span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">map</span>:  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">small</span>: <span style="color:#ae81ff">db-custom-1-3840  </span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">medium</span>: <span style="color:#ae81ff">db-custom-2-7680  </span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">large</span>: <span style="color:#ae81ff">db-custom-4-15360  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">policy</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">fromFieldPath</span>: <span style="color:#ae81ff">Required  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqldb  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">base</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">sql.gcp.jet.crossplane.io/v1alpha2  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Database  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">annotations</span>:   
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">crossplane.io/external-name</span>: <span style="color:#e6db74">&#34;crossplanesqldb&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">providerConfigRef</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">crossplane-provider-jet-gcp  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">deletionPolicy</span>: <span style="color:#ae81ff">Delete  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">forProvider</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">instanceSelector</span>:  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">MatchControllerRef</span>: <span style="color:#66d9ef">true</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">writeConnectionSecretToRef</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">crossplane  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqldb  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">patches</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the secret name to the claim name  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.name&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">transforms</span>:  
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string  </span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">string</span>:  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">fmt</span>: <span style="color:#e6db74">&#34;%s-pgdb&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># change secret namespace to the one of the claim  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-namespace]&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.namespace&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the name of the DB resource to be the name defined in the claim  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;spec.parameters.dbName&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;metadata.annotations[crossplane.io/external-name]&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set app Label  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/app]&#34;</span>  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqldbuser  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">base</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">sql.gcp.jet.crossplane.io/v1alpha2  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">User  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">annotations</span>:   
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># set the name of the DB User, this is hardcoded for demo but should come from the CRD  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">crossplane.io/external-name</span>: <span style="color:#e6db74">&#34;existing-sa-for-db@my-project.iam&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">providerConfigRef</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">crossplane-provider-jet-gcp  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">deletionPolicy</span>: <span style="color:#ae81ff">Delete  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">forProvider</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">instanceSelector</span>:  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">MatchControllerRef</span>: <span style="color:#66d9ef">true</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">type</span>: <span style="color:#ae81ff">CLOUD_IAM_SERVICE_ACCOUNT  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">writeConnectionSecretToRef</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">crossplane  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cloudsqluser  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">patches</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the secret name to the claim name  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.name&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">transforms</span>:  
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string  </span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">string</span>:  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">fmt</span>: <span style="color:#e6db74">&#34;%s-pguser&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># change secret namespace to the one of the claim  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-namespace]&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.namespace&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set the name of the DB User, this is hardcoded for demo but should come from the Claim CRD  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># - fromFieldPath: &#34;spec.parameters.dbName&#34;  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#   toFieldPath: &#34;metadata.annotations[crossplane.io/external-name]&#34;  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># set app Label  </span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/app]&#34;</span>
</span></span></code></pre></div><p>Here you can see that it’s not trivial either. A lot is going on here. Globally, you just list all the Provider’s Resources you want to instanciate, give default parameters you want to enforce, and patch some others from user-supplied values or other resources values.</p>
<p>Let’s go back to the issue I had describing the DBs and Users: Let’s say I have a list of DBs, and each DB has a list of Users… Then I need to iterate over the values and create as many <code>Database.sql.gcp.jet.crossplane.io</code> and <code>User.sql.gcp.jet.crossplane.io</code> that is in the list. I would achieve that in TF using a <code>for_each</code> but here, in Crossplane… no idea (Help me if you know how).</p>
<p>You can also see that each resource has <code>writeConnectionSecretToRef</code> which points to a secret <code>name</code> and <code>namespace</code> which in turn, should hold all the sensible values that the Resource may create (like DB password, SSL certs, maybe even URLs, and whatever you want to add into the secret).</p>
<p>I’m still unsure if it’s the right way of doing it. Most examples are writing the secrets in the <code>crossplane</code> namespace, or at least in a namespace fixed in the composition… This does not make sense to me. I want the secret to be in the same <code>namespace</code> as the Developer’s claim that is creating the resource… This is making the <code>writeConnectionSecretsToNamespace</code> value that is set at the <code>Composition</code> <code>Spec</code> level (I commented it out).</p>
<p>I guess it’s the moment to tell you about the Claims.</p>
<h3 id="claims">Claims</h3>
<p>The claim is the easiest, at first, as it’s the abstraction: it is really limited.<br>
It’s meant to be created by your developers that will want a DB along their apps, or a Pub/Sub, or whatever resource you want them to have full control on.</p>
<p>It is the only resource that is <em>namespaced</em>. This is made so you can define RBACs and allow this team (this namespace) to hold DBs, but no Pub/Sub, for example.</p>
<p>Here’s mine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">database.wk/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">JetPostgreSQL  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">test-namespace  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">jet-db-claim  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">parameters</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">storageGB</span>: <span style="color:#ae81ff">25</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">dbName</span>: <span style="color:#ae81ff">xrdb  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">instanceSize</span>: <span style="color:#ae81ff">small</span> <span style="color:#75715e"># small, medium, large  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">writeConnectionSecretToRef</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">jet-db-claim-details</span>
</span></span></code></pre></div><p>Neat ! Simple ! Thanks abstractions ! Devs only specify what they care about, and you take care of all the boring stuff !</p>
<p>Going back to Secrets, you see that I also defined which secret to write stuff into… but it seems this value is not an override of what is in the <code>Composition</code>. So I patched the composition to actually create the secret with a name derived from the <code>Claim</code> name and in the same <code>Namespace</code> as the <code>Claim</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># set the secret name to reference the claim name</span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-name]&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.name&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">transforms</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">string</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">fmt</span>: <span style="color:#e6db74">&#34;%s-pginstance&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># change secret namespace to the one of the claim</span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">fromFieldPath</span>: <span style="color:#e6db74">&#34;metadata.labels[crossplane.io/claim-namespace]&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">toFieldPath</span>: <span style="color:#e6db74">&#34;spec.writeConnectionSecretToRef.namespace&#34;</span>
</span></span></code></pre></div><p>I first tried to use <code>metadata.name</code> to get the claim name, but, in fact, the <code>Composition</code> is not templated from the <code>Claim</code> but from the intermediate <code>XR</code> that is created from the <code>Claim</code> . Refer to my schema above if needed. So, in the <code>XR</code> the only way to get back to the <code>Claim</code> metadata is by looking at some specific <code>labels</code> like <code>crossplane.io/claim-name</code>.</p>
<h3 id="question-3-providers-execution">Question 3: Provider’s execution</h3>
<p>Once you have all that, the Providers are going to start doing things: reconciling between what you created in K8s and the reality in the Cloud.</p>
<p>For that, the official OSS Providers seems to do a great work without much surprise.<br>
For the Jet provider, at least the GCP one I tested, it’s another story. I started mine with <code>--debug</code> to better understand.<br>
It’s k8s native, so also <code>k describe</code> on the many resources (XRD, Composition, XR, Claim and intermediate CR) to get the logs and events attached to each.</p>
<p>I would also suggest that you add the <code>--debug</code> option to Crossplane itself to fully understand when and where the problem is when rendering the Composition.</p>
<p>Crossplane keeps reconcilling the resource, so you may end up with tons of logs.</p>
<p>In the end, I wasn’t able to create a working DB user using Workload Identity. Not sure why, but once the user created, Crossplane was trying to change the <code>username</code> to the name of the claim… and I was constantly seeing the <code>crossplane.io/external-name</code> value being switched from what I asked in the Composition and the Claim name…</p>
<p>I also wasn’t able to understand what kind of values was the Provider / the Resource returning that I could put in a Secret. I think this is a difference between the OSS Provider and the Jet Provider… with Jet, it’s like with TF: YOU have to create the secret and provide it to K8s… so maybe I only used resources that had nothing to return as a secret value ?</p>
<h3 id="question-4-support">Question 4: Support</h3>
<p>I asked many questions on Slack, I even opened an issue… and globally I had no answer. I also tried to participate and read through the other questions/bugs/PRs… and it does not feel the community is heavily active. Don’t get me wrong, I’m not saying the project is dead or whatever. Its more a feeling… Ask about TF and you’ll have 15 answers in the hour…</p>
<p>I talked about docs and examples, and again it’s really limited at the moment.</p>
<p>If i’m about to switch my whole IaC in a new tool, I want to be sure that it’s active and reactive.</p>
<p>I just reached to <a href="https://www.upbound.io/">Upbound</a>, the company behind Crossplane, to see if the paid plan and support would help me solve my issues.<br>
I’m really pleased to see that I had an answer quickly along with an appointment with an engineer. According to what I was told, the OSS Providers (and Jet) are way behind what Upbound offers to paid customers. Maybe it’s just the way to go ? After all, TF also have a paid subscription, which is far from cheap… and if I put all my IaC somewhere, maybe a little support is a good idea.</p>
<h3 id="conclusion">Conclusion</h3>
<p>My POC was really limited in time, and there’s so much more I wish I had time to cover…</p>
<p>My conclusion is that I could use Crossplane for my Developer’s infra, IF the need is really small…</p>
<p>For example, if you only create one DB and one User per DB Instance.</p>
<p>Another way of doing would certainly be to not Compose multiple resources in one <code>Composition</code> but have one <code>Composition</code> per resource… we I will end up with one <code>MyDBInstance</code> , one <code>MyDB</code>, two or more <code>MyDbUser</code> in each namespace/dev project… I’m even not sure if this model would work… but at least, it would allow me to build an abstraction with limited levers that I can present to the Dev’s teams while still allowing flexibility.</p>
<p>At the moment I would say that this POC just showed me that Crossplane is not an out-of-the-box easy replacement to TF.</p>
<p>I will keep playing with Crossplane on the side, until I fully understand it. I will also investigate the GCP official tool.</p>
]]></content>
        </item>
        
        <item>
            <title>Playing with Dasel</title>
            <link>https://piratemakers.ca/posts/2022/06/playing-with-dasel/</link>
            <pubDate>Thu, 30 Jun 2022 15:19:54 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2022/06/playing-with-dasel/</guid>
            <description>Lately I worked on deprecated and deleted APIS from Kubernetes cluster for migration from version 1.20 and 1.21 to 1.22 (or 1.23).
To do so, I used the famous KubePug tool, specifically the Krew plugin.
As I have a bunch of clusters I used some dirty for loops , but here’s the global KubePug usage:
kubectl deprecations --k8s-version=v1.23.0 --format json --context ${my_cluster_name} | jq &amp;#39;.&amp;#39; &amp;gt; kubepug_output.json The output file, PrettyPrinted, look something like:</description>
            <content type="html"><![CDATA[<p>Lately I worked on deprecated and deleted APIS from Kubernetes cluster for migration from version 1.20 and 1.21 to 1.22 (or 1.23).</p>
<p>To do so, I used the famous <a href="https://github.com/rikatz/kubepug">KubePug</a> tool, specifically the Krew plugin.</p>
<p>As I have a bunch of clusters I used some dirty <code>for loops</code> , but here’s the global KubePug usage:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl deprecations --k8s-version<span style="color:#f92672">=</span>v1.23.0 --format json --context <span style="color:#e6db74">${</span>my_cluster_name<span style="color:#e6db74">}</span> | jq <span style="color:#e6db74">&#39;.&#39;</span> &gt; kubepug_output.json
</span></span></code></pre></div><p>The output file, PrettyPrinted, look something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;DeprecatedAPIs&#34;</span>: [  
</span></span><span style="display:flex;"><span>    {  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Description&#34;</span>: <span style="color:#e6db74">&#34;ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Group&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Kind&#34;</span>: <span style="color:#e6db74">&#34;ComponentStatus&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Version&#34;</span>: <span style="color:#e6db74">&#34;v1&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Name&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Deprecated&#34;</span>: <span style="color:#66d9ef">true</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Items&#34;</span>: [  
</span></span><span style="display:flex;"><span>        {  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;Scope&#34;</span>: <span style="color:#e6db74">&#34;GLOBAL&#34;</span>,  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;ObjectName&#34;</span>: <span style="color:#e6db74">&#34;scheduler&#34;</span>,  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;Namespace&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>        }  
</span></span><span style="display:flex;"><span>      ]  
</span></span><span style="display:flex;"><span>    },  
</span></span><span style="display:flex;"><span>    {  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Description&#34;</span>: <span style="color:#e6db74">&#34;PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container. Deprecated in 1.21.&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Group&#34;</span>: <span style="color:#e6db74">&#34;policy&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Kind&#34;</span>: <span style="color:#e6db74">&#34;PodSecurityPolicy&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Version&#34;</span>: <span style="color:#e6db74">&#34;v1beta1&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Name&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Deprecated&#34;</span>: <span style="color:#66d9ef">true</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Items&#34;</span>: [  
</span></span><span style="display:flex;"><span>        {  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;Scope&#34;</span>: <span style="color:#e6db74">&#34;GLOBAL&#34;</span>,  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;ObjectName&#34;</span>: <span style="color:#e6db74">&#34;node-bootstrap&#34;</span>,  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;Namespace&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>        }  
</span></span><span style="display:flex;"><span>      ]  
</span></span><span style="display:flex;"><span>    }  
</span></span><span style="display:flex;"><span>  ],  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;DeletedAPIs&#34;</span>: [  
</span></span><span style="display:flex;"><span>    {  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Group&#34;</span>: <span style="color:#e6db74">&#34;extensions&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Kind&#34;</span>: <span style="color:#e6db74">&#34;Ingress&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Version&#34;</span>: <span style="color:#e6db74">&#34;v1beta1&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Name&#34;</span>: <span style="color:#e6db74">&#34;ingresses&#34;</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Deleted&#34;</span>: <span style="color:#66d9ef">true</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Items&#34;</span>: [  
</span></span><span style="display:flex;"><span>        {  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;Scope&#34;</span>: <span style="color:#e6db74">&#34;OBJECT&#34;</span>,  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;ObjectName&#34;</span>: <span style="color:#e6db74">&#34;logger-ingress&#34;</span>,  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;Namespace&#34;</span>: <span style="color:#e6db74">&#34;logger&#34;</span>  
</span></span><span style="display:flex;"><span>        }  
</span></span><span style="display:flex;"><span>      ]  
</span></span><span style="display:flex;"><span>    }  
</span></span><span style="display:flex;"><span>  ]  
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then I piped that into <a href="https://github.com/TomWright/dasel">Dasel</a> to get a syntatic view:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dasel <span style="color:#66d9ef">select</span> --file kubepug_output.json --multiple <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>  --parser json <span style="color:#e6db74">&#34;.DeletedAPIs.[*]&#34;</span> <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>--format <span style="color:#e6db74">&#39;  {{ select &#34;.Kind&#34; }}.{{ select &#34;.Version&#34;}}.{{ select &#34;.Group&#34; }}:{{newline}}{{ selectMultiple &#34;.Items.[*]&#34; | format &#34;\t{{ select \&#34;.Namespace\&#34; }}/{{ select \&#34;.ObjectName\&#34; }}{{newline}}&#34; }} &#39;</span>
</span></span></code></pre></div><p>Breaking it down we have:</p>
<p><code>select ... &quot;.DeletedAPIs.[*]&quot;</code></p>
<p>which is only focusing on the <code>DeletedAPIs</code> array. Then we have the output format. Here’s a breakdown:</p>
<p><code>{{ select &quot;.Kind&quot; }}.{{ select &quot;.Version&quot;}}.{{ select &quot;.Group&quot; }}</code></p>
<p>This first part is printing the full resource <code>KVG</code> . Then there’s a line return and:</p>
<pre tabindex="0"><code>{{ selectMultiple &#34;.Items.[*]&#34; | format   
    &#34;\t{{ select \&#34;.Namespace\&#34; }}/{{ select \&#34;.ObjectName\&#34; }}  
    {{newline}}
</code></pre><p>This is a loop saying, for every item in <code>Items</code> print a tab then <code>namespace</code>/ <code>objectName</code>. Then we add a line returned.</p>
<p>which returned one ingress per line:</p>
<pre tabindex="0"><code>Ingress.v1beta1.extensions:  
    logger/logger-ingress  
    other_namespace/other_ingress
</code></pre><p>You can then query K8s with a command like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>k get Ingress.v1beta1.extensions -A
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>k get Ingress.v1beta1.extensions -n logger logger-ingress
</span></span></code></pre></div><p>OK, it sounds pretty useless as I only have few <code>ingresses</code> but it could have been far worse 😅<br>
And now, you can extend this output to generate some kubectl commands programmatically… which may be usefull down the line</p>
<p>At least I practiced <code>Dasel</code> !</p>
<h4 id="update-1">Update 1</h4>
<p>Looking to the original API used to create resources inside k8s, I got to the point where I could use the <code>ManagedFields</code> information. This is not a precise way of doing it, as things may be updated later on after deployment, and may not reflect the real information.</p>
<p>Whatever, I did gave a shot at it.</p>
<p>A simple way to do is to call the K8s API directly by using the <code>--raw</code> option. Here’s how to list <code>ingress</code> resource:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get --raw<span style="color:#f92672">=</span>/apis/networking.k8s.io/v1/ingresses
</span></span></code></pre></div><p>This is giving me the list of all <code>ingress</code> metadata:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;kind&#34;</span>: <span style="color:#e6db74">&#34;IngressList&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;apiVersion&#34;</span>: <span style="color:#e6db74">&#34;networking.k8s.io/v1&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;metadata&#34;</span>: {  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;resourceVersion&#34;</span>: <span style="color:#e6db74">&#34;450328&#34;</span>  
</span></span><span style="display:flex;"><span>  },  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;items&#34;</span>: [  
</span></span><span style="display:flex;"><span>    {  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;metadata&#34;</span>: {  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;test-ext-v1beta-1&#34;</span>,  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">...</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;managedFields&#34;</span>: [  
</span></span><span style="display:flex;"><span>          {  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;manager&#34;</span>: <span style="color:#e6db74">&#34;glbc&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;operation&#34;</span>: <span style="color:#e6db74">&#34;Update&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;apiVersion&#34;</span>: <span style="color:#e6db74">&#34;networking.k8s.io/v1&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;time&#34;</span>: <span style="color:#e6db74">&#34;2022-06-29T19:46:39Z&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;fieldsType&#34;</span>: <span style="color:#e6db74">&#34;FieldsV1&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;fieldsV1&#34;</span>: {  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;f:metadata&#34;</span>: {  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&#34;f:finalizers&#34;</span>: {  
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">&#34;.&#34;</span>: {},  
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">&#34;v:\&#34;networking.gke.io/ingress-finalizer-V2\&#34;&#34;</span>: {}  
</span></span><span style="display:flex;"><span>                }  
</span></span><span style="display:flex;"><span>              }  
</span></span><span style="display:flex;"><span>            }  
</span></span><span style="display:flex;"><span>          },  
</span></span><span style="display:flex;"><span>          {  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;manager&#34;</span>: <span style="color:#e6db74">&#34;kubectl-client-side-apply&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;operation&#34;</span>: <span style="color:#e6db74">&#34;Update&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;apiVersion&#34;</span>: <span style="color:#e6db74">&#34;extensions/v1beta1&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;time&#34;</span>: <span style="color:#e6db74">&#34;2022-06-29T19:46:39Z&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;fieldsType&#34;</span>: <span style="color:#e6db74">&#34;FieldsV1&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;fieldsV1&#34;</span>: {  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;f:metadata&#34;</span>: {  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&#34;f:annotations&#34;</span>: {  
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">&#34;.&#34;</span>: {},  
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">&#34;f:kubectl.kubernetes.io/last-applied-configuration&#34;</span>: {},  
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">&#34;f:kubernetes.io/ingress.class&#34;</span>: {}  
</span></span><span style="display:flex;"><span>                }  
</span></span><span style="display:flex;"><span>              },  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">...</span>
</span></span></code></pre></div><p>The interesting bits here are the two <code>managedFields</code> . While they have the same <code>time</code> value, one was managed by <code>kubectl</code> and the other one by <code>glbc</code>.</p>
<p>The <code>kubectl</code> one is using an API version as <code>&quot;apiVersion&quot;: &quot;extensions/v1beta1&quot;</code> which is a way to know which API was used when the resource was created.</p>
<p>Again, I used Dasel to get the interesting bits here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get --raw<span style="color:#f92672">=</span>/apis/networking.k8s.io/v1/ingresses| <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>dasel -p json -m <span style="color:#66d9ef">select</span> --color -s <span style="color:#e6db74">&#39;items.[*].metadata&#39;</span> <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>--format <span style="color:#e6db74">&#39;{{ select &#34;.namespace&#34; }}/{{ select &#34;.name&#34; }}: {{ selectMultiple &#34;.managedFields.[*]&#34;| format &#34;{{ select \&#34;.apiVersion\&#34;}}, &#34; }}&#39;</span>
</span></span></code></pre></div><p>With my 3 test ingress, with different versions, It returns:</p>
<pre tabindex="0"><code>default/test-ext-v1beta-1: networking.k8s.io/v1, extensions/v1beta1,  
default/test-ext-v1beta-upgraded: networking.k8s.io/v1, extensions/v1beta1, networking.k8s.io/v1,  
default/test-net-v1beta-1: networking.k8s.io/v1, networking.k8s.io/v1beta1,
</code></pre><h4 id="update-2">Update 2</h4>
<p>For the ones interested, I also implemented that in Go using the Kubernetes <code>client-go</code> . I’m not going to dig much here, but you can access the same values by calling:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ingress</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">clientset</span>.<span style="color:#a6e22e">NetworkingV1</span>().<span style="color:#a6e22e">Ingresses</span>(<span style="color:#e6db74">&#34;&#34;</span>).<span style="color:#a6e22e">List</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#a6e22e">metav1</span>.<span style="color:#a6e22e">ListOptions</span>{})
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ing</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">ingress</span>.<span style="color:#a6e22e">Items</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ingInfos</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ing</span>.<span style="color:#a6e22e">GetObjectMeta</span>()  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fields</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ingInfos</span>.<span style="color:#a6e22e">GetManagedFields</span>()  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Iterate through fields   
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  }
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Kubernetes tooling and shell setup</title>
            <link>https://piratemakers.ca/posts/2022/03/kubernetes-tooling-and-shell-setup/</link>
            <pubDate>Tue, 29 Mar 2022 16:54:21 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2022/03/kubernetes-tooling-and-shell-setup/</guid>
            <description>How to be productive fast with Kubernetes
Updates:
20220410: added some Dasel examples 20220410: I’ll be giving a talk about this post April the 12th at the Canadian CNCF and Kubernetes meetup: https://lnkd.in/ep9yaj6Z 20220412: add commands to build a patched kubecolor 20220413: recording of the K8s/CNCF CANADA Meetup talk A ton of writing had been done about how to setup your shell and all the tooling that goes with it to use Kubernetes.</description>
            <content type="html"><![CDATA[<p><em>How to be productive fast with Kubernetes</em></p>
<p><img src="images/1.png#layoutTextWidth" alt="image"></p>
<p><strong>Updates</strong>:</p>
<ul>
<li>20220410: added some Dasel examples</li>
<li>20220410: I’ll be giving a talk about this post April the 12th at the Canadian CNCF and Kubernetes meetup: <a href="https://lnkd.in/ep9yaj6Z">https://lnkd.in/ep9yaj6Z</a></li>
<li>20220412: add commands to build a patched kubecolor</li>
<li>20220413: <a href="https://www.youtube.com/watch?v=lmefhvXYnnI">recording of the K8s/CNCF CANADA Meetup talk</a></li>
</ul>
<p>A ton of writing had been done about how to setup your shell and all the tooling that goes with it to use Kubernetes.<br>
Well, I think it needed another one blog post (and talk) about it !</p>
<p>This one is focussing on Apple Mac setup, and specifically ZSH setup, but beside few small changes, it should work the same for Bash or even on Linux.</p>
<p>It’s also a primer, not an advanced setup. But it should contain all the basics so a new user, or a developper, can get going quickly.</p>
<p>Well, do whatever you want with this blog post. I’m writing it as a reference for myself 🙏</p>
<h3 id="what-is-kubectl-">What is Kubectl ?</h3>
<p>Come on, we all know that: <em>kubectl</em> is the CLI to interact with the K8s API !</p>
<p><img src="images/2.png#layoutTextWidth" alt="image"></p>
<p><em>kubectl</em> is taking your human-readable requests and translate them to a REST call against the Kubernetes API server.</p>
<p>Then, the server answer with some information, mostly JSON. Usually, <em>kubectl</em> dump that in a human-readable way, or, quite often, in YAML, because we all love YAML !</p>
<p>Here, <em>kubectl</em> is usually doing the minimum, and things quickly gets messy when you have a large cluster with hundreds of resources.</p>
<p>Because of that, a bunch of talented people started building tooling around <em>kubectl</em> and the K8s API so we can spend less time reading <em>kubectl</em> outputs and spend more time doing the important stuff: snacking, watching Hell’s Kitchen show and plowing snow (last one is true when you live in Quebec City, QC, Canada)</p>
<p>OK, let’s go now.</p>
<h3 id="kubectl">Kubectl</h3>
<p>Of course it all starts with <em>kubectl</em>… it’s up to you, there’s too many ways to intall it to give them all here ! <em>gcloud</em> can install one, brew, curl… find your own way !</p>
<p>Here’s one with <em>curl:</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl -LO <span style="color:#e6db74">&#34;[https://dl.k8s.io/release/</span><span style="color:#66d9ef">$(</span>curl<span style="color:#f92672">](</span>https://dl.k8s.io/release/$%28curl<span style="color:#66d9ef">)</span><span style="color:#e6db74"> -L -s [https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl](https://dl.k8s.io/release/stable.txt%29/bin/darwin/amd64/kubectl)&#34;</span>  
</span></span><span style="display:flex;"><span>chmod <span style="color:#ae81ff">755</span> kubectl
</span></span></code></pre></div><p>Or using Brew…
<code>brew install kubectl</code></p>
<p>And here’s a Linux one (don’t expect more Linux example):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl -LO <span style="color:#e6db74">&#34;[https://dl.k8s.io/release/</span><span style="color:#66d9ef">$(</span>curl<span style="color:#f92672">](</span>https://dl.k8s.io/release/$%28curl<span style="color:#66d9ef">)</span><span style="color:#e6db74"> -L -s  
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">[https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl](https://dl.k8s.io/release/stable.txt%29/bin/linux/amd64/kubectl)&#34;</span>  
</span></span><span style="display:flex;"><span>chmod <span style="color:#ae81ff">755</span> kubectl
</span></span></code></pre></div><p>Always try to use the same <em>kubectl</em> version as the server you are targeting, or +/- one version.<br>
BTW, this <em>kubectl version</em> command is a great way to check for your server’s version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl version
</span></span><span style="display:flex;"><span>Client Version: version.Info<span style="color:#f92672">{</span>Major:<span style="color:#e6db74">&#34;1&#34;</span>, Minor:<span style="color:#e6db74">&#34;22&#34;</span>, GitVersion:<span style="color:#e6db74">&#34;v1.22.2&#34;</span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>Server Version: version.Info<span style="color:#f92672">{</span>Major:<span style="color:#e6db74">&#34;1&#34;</span>, Minor:<span style="color:#e6db74">&#34;20+&#34;</span>, GitVersion:<span style="color:#e6db74">&#34;v1.20.9-gke.1001&#34;</span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>WARNING: version difference between client <span style="color:#f92672">(</span>1.22<span style="color:#f92672">)</span> and server <span style="color:#f92672">(</span>1.20<span style="color:#f92672">)</span> exceeds the supported minor version skew of +/-1
</span></span></code></pre></div><h3 id="kubecolor">Kubecolor</h3>
<p><a href="https://github.com/hidetatz/kubecolor">KubeColor</a> is used to Colourize your <em>kubectl</em> output. It makes reading all those lines of resources easier !</p>
<p>Install:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install dty1er/tap/kubecolor
</span></span><span style="display:flex;"><span><span style="color:#75715e"># add in your .zshrc  </span>
</span></span><span style="display:flex;"><span>alias k<span style="color:#f92672">=</span>kubecolor
</span></span></code></pre></div><p>Result:</p>
<p><img src="images/3.jpg#layoutTextWidth" alt="image"></p>
<p>Until the <a href="https://github.com/hidetatz/kubecolor/pull/86">PR 86</a> is merged, you may reach an issue when using the <strong>ctx</strong> or <strong>ns</strong> commands, where the whole output is displayed in yellow and hiding the selected default value. In the meantime, clone my own fork and build the binary yourself:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone <span style="color:#f92672">[</span>git@github.com<span style="color:#f92672">](</span>mailto:git@github.com<span style="color:#f92672">)</span>:prune998/kubecolor.git
</span></span><span style="display:flex;"><span>git checkout prune/ctx-no-color
</span></span><span style="display:flex;"><span>cd cmd/kubecolor <span style="color:#f92672">&amp;&amp;</span> go build <span style="color:#f92672">&amp;&amp;</span> cp kubecolor /usr/local/bin
</span></span></code></pre></div><h3 id="zsh-setup">ZSH Setup</h3>
<p>Alias, Completion, Tooling… in your .zshrc: use <strong>k</strong> instead of <strong>kubectl</strong> and reclaim 1s of your life at every command!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export PATH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>KREW_ROOT<span style="color:#66d9ef">:-</span>$HOME/.krew<span style="color:#e6db74">}</span><span style="color:#e6db74">/bin:</span>$PATH<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>alias k<span style="color:#f92672">=</span>kubecolor  
</span></span><span style="display:flex;"><span>source &lt;<span style="color:#f92672">(</span>kubectl completion zsh<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>complete -F __start_kubectl k
</span></span><span style="display:flex;"><span>compdef kubecolor<span style="color:#f92672">=</span>kubectl
</span></span><span style="display:flex;"><span>source &lt;;<span style="color:#f92672">(</span>stern --completion<span style="color:#f92672">=</span>zsh<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>ulimit -n <span style="color:#ae81ff">2048</span>          <span style="color:#75715e"># kubectl opens one cnx (file) per resource</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># gcloud  </span>
</span></span><span style="display:flex;"><span>source <span style="color:#e6db74">&#34;/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc&#34;</span>
</span></span><span style="display:flex;"><span>source <span style="color:#e6db74">&#34;/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># AWS  </span>
</span></span><span style="display:flex;"><span>complete -C <span style="color:#e6db74">&#39;/usr/local/bin/aws_completer&#39;</span> aws
</span></span></code></pre></div><h4 id="zsh-customization">ZSH customization:</h4>
<ul>
<li><a href="https://ohmyz.sh/">Oh-My-ZSH</a> : lots of features in your shell
Use plugins !!</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>plugins<span style="color:#f92672">=(</span>brew kubectl git python tmux vault terraform<span style="color:#f92672">)</span>
</span></span></code></pre></div><ul>
<li>Themes
<ul>
<li><a href="https://github.com/agnoster/agnoster-zsh-theme">Agnoster ZSH theme</a>: better prompt using Powerline Fonts</li>
<li><a href="https://github.com/romkatv/powerlevel10k">PowerLevel10k</a>: emphasizes speed, flexibility and out-of-the-box experience</li>
</ul>
</li>
<li>Fonts
<ul>
<li>Powerline Font: recommend <a href="https://www.nerdfonts.com/">NerdFonts</a> Inconsolata or Firacode</li>
</ul>
</li>
</ul>
<p>Here’s an example prompt when customizing all this. Of course, it’s possible to add more Kubernetes related stuff in the prompt, but it’s going to get messy quickly:</p>
<p><img src="images/4.png#layoutTextWidth" alt="image"></p>
<h3 id="krew">Krew</h3>
<p><a href="https://krew.sigs.k8s.io"><em>Krew</em></a> is a plugin manager for <em>kubectl</em>.<br>
Install: <a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/">https://krew.sigs.k8s.io/docs/user-guide/setup/install/</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl krew list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PLUGIN  VERSION  
</span></span><span style="display:flex;"><span>ctx     v0.9.4  
</span></span><span style="display:flex;"><span>krew    v0.4.1  
</span></span><span style="display:flex;"><span>ns      v0.9.4  
</span></span><span style="display:flex;"><span>whoami  v0.0.36
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kubectl krew search
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME                            DESCRIPTION                                         INSTALLED  
</span></span><span style="display:flex;"><span>access-matrix                   Show an RBAC access matrix <span style="color:#66d9ef">for</span> server resources     no  
</span></span><span style="display:flex;"><span>blame                           Show who edited resource fields.                    no  
</span></span><span style="display:flex;"><span>cert-manager                    Manage cert-manager resources inside your cluster   no  
</span></span><span style="display:flex;"><span>ctx                             Switch between contexts in your kubeconfig          yes  
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>Kool Krew Plugins to have:</p>
<ul>
<li><strong>ctx</strong>: quick context ( current cluster ) changes</li>
<li><strong>ns</strong>: quick current namespace changes</li>
<li><strong>whoami</strong>: who the cluster thinks you are from your authentication</li>
<li><strong>who-can</strong>: RBAC rules introspection</li>
</ul>
<p>Example <strong>ctx</strong> usage to manage your contexts:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># list all the existing context, current one in yellow  </span>
</span></span><span style="display:flex;"><span>k ctx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>arn:aws:eks:us-east-1:111111111111:cluster/eks-example  
</span></span><span style="display:flex;"><span>gke-dv-st-cluster-1  
</span></span><span style="display:flex;"><span>gke-dev_us-central1_test-gke-cluster
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># change context “manually”  </span>
</span></span><span style="display:flex;"><span>kubectl config use-context gke-dev_us-central1_test-gke-cluster
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># change the context using ctx  </span>
</span></span><span style="display:flex;"><span>k ctx gke-dev_us-central1_test-gke-cluster
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># delete context (why not ?)  </span>
</span></span><span style="display:flex;"><span>k ctx -d gke-dv-st-cluster-1
</span></span></code></pre></div><p>Example using <strong>ns</strong> to change default namespace:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># List all namespaces, current NS in yellow (not in Medium blogs...)  </span>
</span></span><span style="display:flex;"><span>k ns
</span></span><span style="display:flex;"><span>datadog-agents  
</span></span><span style="display:flex;"><span>default         &lt;----  
</span></span><span style="display:flex;"><span>kube-public  
</span></span><span style="display:flex;"><span>kube-system
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set default NS by hand  </span>
</span></span><span style="display:flex;"><span>kubectl config set-context --current --namespace<span style="color:#f92672">=</span>kube-system
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set default Namespace  </span>
</span></span><span style="display:flex;"><span>k ns kube-system
</span></span></code></pre></div><h3 id="cloud-provider-setup">Cloud provider setup</h3>
<h4 id="aws">AWS</h4>
<p>First, install the awscli:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#34;[https://awscli.amazonaws.com/AWSCLIV2.pkg](https://awscli.amazonaws.com/AWSCLIV2.pkg)&#34;</span> -o <span style="color:#e6db74">&#34;AWSCLIV2.pkg&#34;</span>  
</span></span><span style="display:flex;"><span>sudo installer -pkg AWSCLIV2.pkg -target /
</span></span></code></pre></div><p>Then, setup SSO login:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export AWS_DEFAULT_REGION<span style="color:#f92672">=</span>us-east-1  
</span></span><span style="display:flex;"><span>export AWS_PAGER<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e"># prevent aws cli to auto-page = display inline  </span>
</span></span><span style="display:flex;"><span>export BROWSER<span style="color:#f92672">=</span>echo <span style="color:#75715e"># Do not open a browser, let you choose which browser to open</span>
</span></span><span style="display:flex;"><span>complete -C <span style="color:#e6db74">&#39;/usr/local/bin/aws_completer&#39;</span> aws <span style="color:#75715e"># add that to .zshrc for completion</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># remove dandling env variables  </span>
</span></span><span style="display:flex;"><span>unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># configure (may ask questions here)  </span>
</span></span><span style="display:flex;"><span>aws configure sso  
</span></span><span style="display:flex;"><span>aws sso login --profile profile_xxxxxx  
</span></span><span style="display:flex;"><span>export AWS_PROFILE<span style="color:#f92672">=</span>profile_xxxxxx
</span></span></code></pre></div><p>Configure <em>kubectl</em> context to use your EKS cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws eks update-kubeconfig <span style="color:#ae81ff">\ </span>  
</span></span><span style="display:flex;"><span>    --region us-east-1    <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>    --name &lt;cluster_name&gt; <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>    --alias &lt;friendly_name&gt;
</span></span></code></pre></div><h4 id="google">Google</h4>
<p>Install Google CLI (gcloud):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install --cask google-cloud-sdk  
</span></span><span style="display:flex;"><span>gcloud components install kubectl <span style="color:#75715e"># Optional</span>
</span></span><span style="display:flex;"><span>gcloud init  
</span></span><span style="display:flex;"><span>gcloud auth login
</span></span><span style="display:flex;"><span>gcloud config set compute/region us-east1
</span></span></code></pre></div><p>Configure <em>kubectl</em> to use your GKE cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gcloud container clusters get-credentials &lt;cluster&gt; --project &lt;project&gt;
</span></span></code></pre></div><h3 id="stern">Stern</h3>
<p><a href="https://github.com/wercker/stern">Stern</a> allows you to tail **** the logs of <strong>multiple pods</strong> on Kubernetes and <strong>multiple containers</strong> within the pod.<br>
Each result is colour coded for quicker debugging.</p>
<p>Install:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install stern
</span></span><span style="display:flex;"><span>stern -n my-namespace dv-oma
</span></span></code></pre></div><p>Stern will tail the logs of all pods matching <em>dv-oma</em> as a pattern. There’s a ton of options to further filter what you want to display:</p>
<p><img src="images/5.png#layoutTextWidth" alt="image"></p>
<h3 id="kustomize">Kustomize</h3>
<p><a href="https://kustomize.io/">Kustomize</a> is a Kubernetes native configuration management (templating)</p>
<ul>
<li>Bundled with <em>kubectl</em>, but not all the features are available</li>
<li>Better install the full version for your CI/CD pipelines</li>
<li>Only output rendered YAML, you have to apply it later</li>
</ul>
<p>Ex:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl   kustomize --enable-alpha-plugins /path/to/kustomize/folder
</span></span><span style="display:flex;"><span>kustomize build     --enable-alpha-plugins /path/to/kustomize/folder
</span></span></code></pre></div><p>Render and apply the <em>kustomization</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kustomize build --enable-alpha-plugins /path/to/kustomize/folder | kubectl apply -f -
</span></span></code></pre></div><p>Kustomize requires a <em>kustomization.yaml</em> file in the target folder, which link resources together, patch them, use generators to create new resources and plugins to patch/generate new yaml. Ex:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># cat /path/to/kustomize/folder/kustomization.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">kustomize.config.k8s.io/v1beta1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Kustomization</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">resources</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">my_resources_file.yaml  </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">../base</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">patches</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">./manifests/my_patch.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">generators</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">my_generator.yaml</span>
</span></span></code></pre></div><h3 id="kubernetes-dashboards">Kubernetes Dashboards</h3>
<h4 id="k9s">K9s</h4>
<p><a href="https://github.com/derailed/k9s">K9s</a> — Kubernetes CLI To Manage Your Clusters In Style!</p>
<ul>
<li>Open-Source</li>
<li>In your terminal, like top</li>
<li>CRUD operations on K8s resources</li>
<li>nothing to install server-side</li>
<li>lightweight</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install k9s
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>k9s -n &lt;namespace&gt;      <span style="color:#75715e"># To run K9s in a given namespace</span>
</span></span><span style="display:flex;"><span>k9s --context &lt;context&gt; <span style="color:#75715e"># Start K9s in an existing KubeConfig context</span>
</span></span><span style="display:flex;"><span>k9s --readonly          <span style="color:#75715e"># Start K9s in readonly mode - with all cluster modification  </span>
</span></span><span style="display:flex;"><span>                          commands disabled
</span></span></code></pre></div><p><img src="images/6.jpg#layoutTextWidth" alt="K9s"></p>
<h4 id="lens">Lens</h4>
<p><a href="https://k8slens.dev/">Lens</a> is the only IDE you’ll ever need to take control of your Kubernetes clusters (well, that’s what they say)</p>
<ul>
<li>Launch on your own desktop, no server-side install</li>
<li>Include advanced config to reach remote clusters</li>
<li>Manage CustomResourceDefinitions (CRD)</li>
<li>Nice UI</li>
<li>Multi-cluster
<img src="images/7.jpg#layoutTextWidth" alt="image"></li>
</ul>
<h3 id="vscode-extensions-for-kubernetes">VsCode extensions for Kubernetes</h3>
<p>I’m sure there are a lot more than these, but I would consider these as essentials:</p>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-kubernetes-tools.vscode-kubernetes-tools">Kubernetes</a>: Develop, deploy and debug Kubernetes applications</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml">YAML</a>: Language Support, with built-in Kubernetes syntax support</li>
<li><a href="https://github.com/oderwat/vscode-indent-rainbow">Indent-Rainbow</a>: helper to better see Yaml indentations
<img src="images/8.jpg#layoutTextWidth" alt="Indent-Rainbow"></li>
</ul>
<h3 id="local-kubernetes">Local Kubernetes</h3>
<p>Here’s a minimal list of solutions to deploy a local Kubernetes cluster on your laptop:</p>
<h4 id="kind">Kind</h4>
<ul>
<li><a href="https://kind.sigs.k8s.io/">Kind</a> is a local K8s cluster</li>
<li>Official Kubernetes tool to create lightweight K8s clusters</li>
<li>Support ingress / LB (with some tuning)</li>
<li>Work with Docker and Podman (and rootless with some more sweat)</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install kind
</span></span><span style="display:flex;"><span>kind create cluster --help
</span></span></code></pre></div><h4 id="k3s">K3s</h4>
<p><a href="https://k3s.io/">K3s</a> is the Rancher take on local clusters. Both ARM64 and ARMv7 are supported</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo k3s server &amp;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Kubeconfig is written to /etc/rancher/k3s/k3s.yaml  </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo k3s kubectl get node
</span></span></code></pre></div><h4 id="minikube">Minikube</h4>
<p><a href="https://k3s.io/">Minikube</a> is certainly the oldest of all. Still supported, well documented and support different container runtimes, so you can get rid of Docker !</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64
</span></span><span style="display:flex;"><span>sudo install minikube-darwin-amd64 /usr/local/bin/minikube
</span></span><span style="display:flex;"><span>minikube start
</span></span></code></pre></div><h3 id="bonus-tooling">Bonus tooling</h3>
<p>Here’s few more tools to help working with Kubernetes resources (and YAML)</p>
<h4 id="kubepug">KubePug</h4>
<p>Use <a href="https://github.com/rikatz/kubepug">KubePug</a> to ensure your cluster is not using deprecated resources:</p>
<blockquote>
<p>Verifies the current kubernetes cluster or input files, checking whether exists objects in this deprecated API Versions, allowing the user to check before migrating</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl krew install deprecations
</span></span><span style="display:flex;"><span>k deprecations --k8s-version<span style="color:#f92672">=</span>v1.22.0
</span></span></code></pre></div><h4 id="dive">Dive</h4>
<p>Use <a href="https://github.com/wagoodman/dive">Dive</a> to inspect the Docker Images. It’s a terminal app that enables you to deep-dive into your container’s layers and all:</p>
<blockquote>
<p>Ensure your Docker (container) images are not too big and does not contain unnecessary data</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install dive
</span></span><span style="display:flex;"><span>dive cilium/cilium:v1.9.10
</span></span></code></pre></div><h4 id="dasel">Dasel</h4>
<p>Use <a href="https://github.com/TomWright/dasel">Dasel</a> to query and modify data structures using selector strings:</p>
<blockquote>
<p>Comparable to jq / yq, but supports JSON, YAML, TOML, XML and CSV with zero runtime dependencies</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install dasel
</span></span></code></pre></div><p>Here’s some examples of what you can do quickly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Select the image for a container named auth</span>
</span></span><span style="display:flex;"><span>dasel <span style="color:#66d9ef">select</span> -f deployment.yaml -s <span style="color:#e6db74">&#34;spec.template.spec.containers.(name=auth).image&#34;</span> tomwright/x:v2.0.0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Change the image for a container named auth</span>
</span></span><span style="display:flex;"><span>dasel put string -f deployment.yaml -s <span style="color:#e6db74">&#34;spec.template.spec.containers.(name=auth).image&#34;</span> <span style="color:#e6db74">&#34;tomwright/x:v2.0.0&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Update replicas to 3</span>
</span></span><span style="display:flex;"><span>dasel put int -f deployment.yaml -s <span style="color:#e6db74">&#34;spec.replicas&#34;</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add a new env var</span>
</span></span><span style="display:flex;"><span>dasel put object -f deployment.yaml -s <span style="color:#e6db74">&#34;spec.template.spec.containers.(name=auth).env.[]&#34;</span> -t string -t string name<span style="color:#f92672">=</span>MY_NEW_ENV_VAR value<span style="color:#f92672">=</span>MY_NEW_VALUE
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Update an existing env var</span>
</span></span><span style="display:flex;"><span>dasel put string -f deployment.yaml -s <span style="color:#e6db74">&#34;spec.template.spec.containers.(name=auth).env.(name=MY_NEW_ENV_VAR).value&#34;</span> NEW_VALUE
</span></span></code></pre></div><h3 id="more-bonus-containers-without-docker">More Bonus: Containers without Docker</h3>
<h4 id="colima">Colima</h4>
<p><a href="https://github.com/abiosoft/colima">Colima</a> Container runtimes on macOS (and Linux) with minimal setup</p>
<ul>
<li>Intel and M1 Macs support</li>
<li>Simple CLI interface</li>
<li>Docker and Containerd support</li>
<li>Port Forwarding</li>
<li>Volume mounts</li>
<li>Kubernetes</li>
<li>Replace Docker-for-Desktop</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install colima  
</span></span><span style="display:flex;"><span>brew install docker  
</span></span><span style="display:flex;"><span>colima start                       <span style="color:#75715e"># default using Docker runtime  </span>
</span></span><span style="display:flex;"><span>colima start --with-kubernetes     <span style="color:#75715e"># start kubernetes local cluster  </span>
</span></span><span style="display:flex;"><span>colima start --runtime containerd --with-kubernetes  <span style="color:#75715e"># remove docker completely  </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>colima status  
</span></span><span style="display:flex;"><span>INFO<span style="color:#f92672">[</span>0000<span style="color:#f92672">]</span> colima is running  
</span></span><span style="display:flex;"><span>INFO<span style="color:#f92672">[</span>0000<span style="color:#f92672">]</span> runtime: docker       <span style="color:#75715e"># or containerd  </span>
</span></span><span style="display:flex;"><span>INFO<span style="color:#f92672">[</span>0000<span style="color:#f92672">]</span> arch: x86_64  
</span></span><span style="display:flex;"><span>INFO<span style="color:#f92672">[</span>0000<span style="color:#f92672">]</span> kubernetes: enabled  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cat ~/.colima/colima.yaml  
</span></span><span style="display:flex;"><span>vm:  
</span></span><span style="display:flex;"><span>    cpu: <span style="color:#ae81ff">2</span>  
</span></span><span style="display:flex;"><span>    disk: <span style="color:#ae81ff">60</span>  
</span></span><span style="display:flex;"><span>    memory: <span style="color:#ae81ff">2</span>  
</span></span><span style="display:flex;"><span>    arch: x86_64  
</span></span><span style="display:flex;"><span>    forward_agent: false  
</span></span><span style="display:flex;"><span>    mounts: <span style="color:#f92672">[]</span>  
</span></span><span style="display:flex;"><span>runtime: containerd  
</span></span><span style="display:flex;"><span>kubernetes:  
</span></span><span style="display:flex;"><span>    enabled: true  
</span></span><span style="display:flex;"><span>    version: v1.22.2  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>colima nerdctl run -- -ti --rm alpine:latest sh  
</span></span><span style="display:flex;"><span>/ <span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>colima nerdctl ps  
</span></span><span style="display:flex;"><span>CONTAINER ID    IMAGE                              COMMAND    CREATED           STATUS    PORTS    NAMES  
</span></span><span style="display:flex;"><span>47e87f00711d    docker.io/library/alpine:latest    <span style="color:#e6db74">&#34;sh&#34;</span>       <span style="color:#ae81ff">18</span> seconds ago    Up                 alpine-47e87<span style="color:#e6db74">``</span>  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kubectl ctx  
</span></span><span style="display:flex;"><span>colima
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>kubectl get pods -A  
</span></span><span style="display:flex;"><span>NAMESPACE     NAME                                     READY   STATUS    RESTARTS   AGE  
</span></span><span style="display:flex;"><span>kube-system   coredns-85cb69466-bz5mw                  1/1     Running   <span style="color:#ae81ff">0</span>          8m18s  
</span></span><span style="display:flex;"><span>kube-system   local-path-provisioner-64ffb68fd-2g9gz   1/1     Running   <span style="color:#ae81ff">0</span>          8m18s  
</span></span><span style="display:flex;"><span>kube-system   metrics-server-9cf544f65-t6tzs           1/1     Running   <span style="color:#ae81ff">0</span>          8m18s
</span></span></code></pre></div><h3 id="podman">Podman</h3>
<p><a href="https://podman.io/">Podman</a> is the container Swiss-Army knife from RedHat:</p>
<ul>
<li>multiple image formats including the OCI and Docker image formats</li>
<li>full management of container lifecycle</li>
<li>container image management (managing image layers, overlay filesystems, etc)</li>
<li>Podman 3.4+ now support M1 Apple Macs</li>
<li>Replaces Docker for Desktop</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install podman  
</span></span><span style="display:flex;"><span>podman machine init  
</span></span><span style="display:flex;"><span>podman machine start  
</span></span><span style="display:flex;"><span>podman info
</span></span><span style="display:flex;"><span>podman run registry.fedoraproject.org/fedora:latest echo hello
</span></span><span style="display:flex;"><span>alias docker<span style="color:#f92672">=</span>podman
</span></span></code></pre></div><h3 id="conclusion">Conclusion</h3>
<p>Well, this list is not 100% complete. Who could build and maintain such a list ?<br>
Kubernetes is still a highly evolving ecosystem and new tools and patterns keeps emerging every week.</p>
<p>Feel free to comment and share your favorite tools and I’ll add them here.</p>
<p>This post is abstracted from a talk that I built for <a href="https://community.cncf.io/cloud-native-canada/">CNCF/Kubernetes Canada</a> Meetups. Please contact me if you’re organizing a meetup and are interested.</p>
]]></content>
        </item>
        
        <item>
            <title>Prometheus-Operator and Istio Telemetry V2</title>
            <link>https://piratemakers.ca/posts/2020/08/prometheus-operator-and-istio-telemetry-v2/</link>
            <pubDate>Fri, 07 Aug 2020 00:52:19 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2020/08/prometheus-operator-and-istio-telemetry-v2/</guid>
            <description>Starting Istio 1.4 and up, the way the Observability metrics are created, exchanged and scraped changed. Here is how I configure Prometheus-Operator resources to scrape metrics from Istio 1.6 and install latest Grafana Dashboards
ServiceMonitor Prometheus-Operator is far more dynamic than the default Prometheus install. It adds some CRD to dynamically and transparently re-configure your Prometheus cluster.
A ServiceMonitor is a resource describing which pods to scrape based on a Service.</description>
            <content type="html"><![CDATA[<p><img src="images/1.jpeg#layoutTextWidth" alt="image"></p>
<p>Starting Istio 1.4 and up, the way the Observability metrics are created, exchanged and scraped changed. Here is how I configure Prometheus-Operator resources to scrape metrics from Istio 1.6 and install latest Grafana Dashboards</p>
<h3 id="servicemonitor">ServiceMonitor</h3>
<p>Prometheus-Operator is far more dynamic than the default Prometheus install. It adds some CRD to dynamically and transparently re-configure your Prometheus cluster.</p>
<p>A <strong>ServiceMonitor</strong> is a resource describing which pods to scrape based on a Service.</p>
<p>In Istio 1.6+ we have two types of things to monitor: Istio <strong>control-plane</strong> resources and Istio-proxy <strong>data-plane</strong>.</p>
<p>For that we create 2 different ServiceMonitor:</p>
<h4 id="control-plane">Control-Plane</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">monitoring.coreos.com/v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceMonitor  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">prometheus-oper-istio-controlplane  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">release</span>: <span style="color:#ae81ff">prometheus  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">jobLabel</span>: <span style="color:#ae81ff">istio  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">matchExpressions</span>:  
</span></span><span style="display:flex;"><span>      - {<span style="color:#f92672">key: istio, operator: In, values</span>: [<span style="color:#ae81ff">mixer,pilot,galley,citadel,sidecar-injector]}  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespaceSelector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">any</span>: <span style="color:#66d9ef">true</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">endpoints</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">port</span>: <span style="color:#ae81ff">http-monitoring  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">interval</span>: <span style="color:#ae81ff">15s  </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">port</span>: <span style="color:#ae81ff">http-policy-monitoring  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">interval</span>: <span style="color:#ae81ff">15s</span>
</span></span></code></pre></div><p>If you know a bit of Prometheus, this is pretty easy to read:</p>
<ul>
<li>look for any service with label <code>istio</code> equals to <code>mixer</code> , <code>pilot</code>…</li>
<li>scrape port named <code>http-monitoring</code> and <code>http-policy-monitoring</code> every 15s</li>
</ul>
<p>The only thing to be careful about are the <code>labels</code> at the beginning: they are <em>selectors</em> that MUST match the Prometheus install <code>serviceMonitorSelector</code>. If you fail to do so, Prometheus will not consider this resource.<br>
You can check how yours is configured by looking at the <code>prometheus</code> resource:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get prometheus  -o yaml | grep -A4 serviceMonitorSelector
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    serviceMonitorSelector:  
</span></span><span style="display:flex;"><span>      matchLabels:  
</span></span><span style="display:flex;"><span>        release: prometheus
</span></span></code></pre></div><p>In my case, it is <code>release: prometheus</code></p>
<p>As you can see from my example, this Prom Operator was installed using Helm. I know… sorry…</p>
<h4 id="data-plane">Data-Plane</h4>
<p>The Data-Plane resource is quite the same but is targeting all the Istio-Proxy containers amd adds some relabeling:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">monitoring.coreos.com/v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceMonitor  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">prometheus-oper-istio-dataplane  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">monitoring</span>: <span style="color:#ae81ff">istio-dataplane  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">release</span>: <span style="color:#ae81ff">prometheus  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">matchExpressions</span>:  
</span></span><span style="display:flex;"><span>      - {<span style="color:#f92672">key: istio-prometheus-ignore, operator</span>: <span style="color:#ae81ff">DoesNotExist}  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespaceSelector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">any</span>: <span style="color:#66d9ef">true</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">jobLabel</span>: <span style="color:#ae81ff">envoy-stats  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">endpoints</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/stats/prometheus  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">http-envoy-prom  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">interval</span>: <span style="color:#ae81ff">15s  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">relabelings</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">sourceLabels</span>: [<span style="color:#ae81ff">__meta_kubernetes_pod_container_port_name]  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">action</span>: <span style="color:#ae81ff">keep  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">regex</span>: <span style="color:#e6db74">&#39;.*-envoy-prom&#39;</span>  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">action</span>: <span style="color:#ae81ff">labelmap  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">regex</span>: <span style="color:#e6db74">&#34;__meta_kubernetes_pod_label_(.+)&#34;</span>  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">sourceLabels</span>: [<span style="color:#ae81ff">__meta_kubernetes_namespace]  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">action</span>: <span style="color:#ae81ff">replace  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">targetLabel</span>: <span style="color:#ae81ff">namespace  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">sourceLabels</span>: [<span style="color:#ae81ff">__meta_kubernetes_pod_name]  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">action</span>: <span style="color:#ae81ff">replace  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">targetLabel</span>: <span style="color:#ae81ff">pod_name</span>
</span></span></code></pre></div><p>Again, pure Prom config. Just make sure you have the right label so the Operator will take care of the resource.</p>
<p>Add a label <code>istio-prometheus-ignore=”true”</code> to your deployments in case you don’t want Prometheus to scrape the proxy’s metrics.</p>
<h4 id="result">Result</h4>
<p>After few seconds for the whole thing to settle, you can connect to your Prom frontend, using Port-Forward on port <strong>9090</strong> or using the Istio Ingress-Gateway that you configured with SSL cert using SDS (check my older posts).</p>
<p><img src="images/2.png#layoutTextWidth" alt="image"></p>
<h3 id="grafana-dashboards">Grafana Dashboards</h3>
<p>Now that you have Istio Telemetry V2 into your Prometheus cluster, you maybe want to see the graphs with Grafana.</p>
<p>Glad you read so far. I know this blog is missing some pictures and colors… but who cares, we are engineers right ?</p>
<p>Istio Dashboards for Grafana are stored in many places. You can find the latest in the <a href="https://github.com/istio/istio/tree/master/operator/cmd/mesh/testdata/manifest-generate/data-snapshot/addons/dashboards">Istio Github repo</a>, but the best solution for you is to grab the one that matches your Istio install from the Istio install zip (or tar) where you grabbed <code>istioctl</code> !</p>
<p>From Istio docs, get it with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl -L <span style="color:#f92672">[</span>https://istio.io/downloadIstio<span style="color:#f92672">](</span>https://istio.io/downloadIstio<span style="color:#f92672">)</span> | sh -
</span></span></code></pre></div><p>This will create a folder with all the Istio stuffs. Note that <strong>Addons</strong> (Grafana, Kiali, Prometheus..) will <strong>NOT</strong> be managed by <code>istioctl</code> quite soon. You can find all the deployment scripts in this folder.</p>
<p>Dashboards are also located in this folder (<code>istio-1.6.7</code> as the time of this writing) at <code>manifests/charts/istio-telemetry/grafana/dashboards/</code></p>
<p>For them to be used by Grafana (the one installed by Prom Operator), you need to copy them inside a secret. Here’s the script I use for that (do a <code>cd istio-&lt;your-version&gt;</code>before using it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># go into the dashboards folder  </span>
</span></span><span style="display:flex;"><span>pushd manifests/charts/istio-telemetry/grafana/dashboards
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># create the basic command to create the configmap  </span>
</span></span><span style="display:flex;"><span>ISTIO_DASHBOARD_SECRET<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;kubectl -n monitoring create cm prometheus-oper-istio-dashboards &#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># append each file to the secret  </span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i in *.json ; <span style="color:#66d9ef">do</span>  
</span></span><span style="display:flex;"><span>  echo $i  
</span></span><span style="display:flex;"><span>  ISTIO_DASHBOARD_SECRET<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>ISTIO_DASHBOARD_SECRET<span style="color:#e6db74">}</span><span style="color:#e6db74"> --from-file=</span><span style="color:#e6db74">${</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">=</span><span style="color:#e6db74">${</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># run the secret creation command  </span>
</span></span><span style="display:flex;"><span>eval $ISTIO_DASHBOARD_SECRET
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># label the configmap so it is used by Grafana  </span>
</span></span><span style="display:flex;"><span>kubectl label -n monitoring --overwrite cm prometheus-oper-istio-dashboards grafana_dashboard<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>popd
</span></span></code></pre></div><p>Restart the Grafana pod and you should see the Dashboards in Grafana:</p>
<p><img src="images/3.png#layoutTextWidth" alt="image"></p>
]]></content>
        </item>
        
        <item>
            <title>Understanding Istio and TCP services</title>
            <link>https://piratemakers.ca/posts/2020/08/understanding-istio-and-tcp-services/</link>
            <pubDate>Thu, 06 Aug 2020 23:41:53 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2020/08/understanding-istio-and-tcp-services/</guid>
            <description>overview I lately came across an Istio setup where both the downstream (client) and the upstream (server) were using the same sets of ports:
port 8080 for HTTP protocol port 5701 for Hazelcast protocol, a Java based memory database embedded in the pod’s workload, using TCP The setup is presented here:
In theory, two types of communications happens:
each Hazelcast database (the red and purple cylinders) talk to each other on port 5701 using TCP protocol.</description>
            <content type="html"><![CDATA[<p><img src="images/1.jpeg#layoutTextWidth" alt="image"></p>
<h3 id="overview">overview</h3>
<p>I lately came across an Istio setup where both the downstream (client) and the upstream (server) were using the same sets of ports:</p>
<ul>
<li>port <em>8080</em> for HTTP protocol</li>
<li>port <em>5701</em> for <a href="https://hazelcast.com/">Hazelcast</a> protocol, a Java based memory database embedded in the pod’s workload, using TCP</li>
</ul>
<p>The setup is presented here:</p>
<p><img src="images/2.png#layoutTextWidth" alt="image"></p>
<p>In theory, two types of communications happens:</p>
<ul>
<li>each Hazelcast database (the red and purple cylinders) talk to each other on port <em>5701</em> using TCP protocol.<br>
Cluster is discovered using the <a href="https://github.com/hazelcast/hazelcast-kubernetes">Hazelcast Kubernetes plugin</a> which calls the API to get the Pod IPs.<br>
Then connections are made at TCP level using the IP:port of the pod</li>
<li>the <code>manager</code> calls the <code>app</code> on the http port <em>8080</em></li>
</ul>
<p>We’re going to focus on the first connexion for now, specifically the one happening between the <code>manager</code> pods as they are going through the Istio Proxy.</p>
<p>Let’s first leverage the <code>istioctl</code> CLI to get the configuration of the listeners on one of the pods:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>istioctl pc listeners manager-c844dbb5f-ng5d5.manager --port <span style="color:#ae81ff">5701</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ADDRESS         PORT     TYPE  
</span></span><span style="display:flex;"><span>10.12.0.11      <span style="color:#ae81ff">5701</span>     TCP  
</span></span><span style="display:flex;"><span>10.0.23.154     <span style="color:#ae81ff">5701</span>     TCP  
</span></span><span style="display:flex;"><span>10.0.18.143     <span style="color:#ae81ff">5701</span>     TCP
</span></span></code></pre></div><p>We have 3 entries for port <em>5701</em>. They are all of type<code>TCP</code> which is what we defined.</p>
<p>We clearly see we have one entry for our local IP (<code>10.12.0.11</code>) and one for each service which is using the <em>5701</em> port, the <code>manager</code> (<code>10.0.23.154</code>) and the <code>app</code> (<code>10.0.18.143</code>) services.</p>
<h3 id="inbound-connections">Inbound connections</h3>
<p>The first one, for address <code>10.12.0.11</code> is an <code>INBOUND</code>listener that is used when connections enters into the Pod. As we are on a TCP service, it does not have a route, but directly point to a cluster:<br>
<code>inbound|5701|tcp-hazelcast|manager.manager.svc.cluster.local</code></p>
<p>If we check all clusters on port <em>5701</em> we have:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>istioctl pc clusters manager-7948dffbdd-p44xx.manager --port <span style="color:#ae81ff">5701</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SERVICE FQDN                          PORT     SUBSET            DIRECTION     TYPE  
</span></span><span style="display:flex;"><span>app.app.svc.cluster.local             <span style="color:#ae81ff">5701</span>     -                 outbound      EDS  
</span></span><span style="display:flex;"><span>manager.manager.svc.cluster.local     <span style="color:#ae81ff">5701</span>     -                 outbound      EDS  
</span></span><span style="display:flex;"><span>manager.manager.svc.cluster.local     <span style="color:#ae81ff">5701</span>     tcp-hazelcast     inbound       STATIC
</span></span></code></pre></div><p>The last one is our <code>INBOUND</code> , let’s check it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>istioctl pc clusters manager-7948dffbdd-p44xx.manager --port <span style="color:#ae81ff">5701</span> --direction inbound -o json
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;inbound|5701|tcp-hazelcast|manager.manager.svc.cluster.local&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;STATIC&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;connectTimeout&#34;</span>: <span style="color:#e6db74">&#34;1s&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;loadAssignment&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;clusterName&#34;</span>: <span style="color:#e6db74">&#34;inbound|5701|tcp-hazelcast|manager.manager.svc.cluster.local&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;endpoints&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;lbEndpoints&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;endpoint&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                                <span style="color:#e6db74">&#34;address&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                                    <span style="color:#e6db74">&#34;socketAddress&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                                        <span style="color:#e6db74">&#34;address&#34;</span>: <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>,  
</span></span><span style="display:flex;"><span>                                        <span style="color:#e6db74">&#34;portValue&#34;</span>: <span style="color:#ae81ff">5701</span>  
</span></span><span style="display:flex;"><span>                                    <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                                <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                            <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">]</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">]</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;circuitBreakers&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;thresholds&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;maxConnections&#34;</span>: 4294967295,  
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;maxPendingRequests&#34;</span>: 4294967295,  
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;maxRequests&#34;</span>: 4294967295,  
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;maxRetries&#34;</span>: <span style="color:#ae81ff">4294967295</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">]</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">]</span>
</span></span></code></pre></div><p>This can’t be simpler… check the <code>lbEndpoints</code> definition: just forward the connection to the <code>localhost</code> (<code>127.0.0.1</code>) port <em>5701</em>, our app.</p>
<h3 id="outbound-connections">Outbound connections</h3>
<p>Outbound connections are originating from inside the pod to reach external resources.</p>
<p>From what we saw above, we have two known endpoints that defined the port <em>5701</em>: <code>manager.manger</code> service and <code>app.app</code> service.</p>
<p>Let’s check the content of the <code>manager</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>istioctl pc listeners manager-7948dffbdd-p44xx.manager --port <span style="color:#ae81ff">5701</span> --address 10.0.23.154 -o json
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;10.0.23.154_5701&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;address&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;socketAddress&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;address&#34;</span>: <span style="color:#e6db74">&#34;10.0.23.154&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;portValue&#34;</span>: <span style="color:#ae81ff">5701</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;filterChains&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;filters&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;envoy.tcp_proxy&#34;</span>,  
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;typedConfig&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;[@type](http://twitter.com/type)&#34;</span>: <span style="color:#e6db74">&#34;type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy&#34;</span>,  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;statPrefix&#34;</span>: <span style="color:#e6db74">&#34;outbound|5701||manager.manager.svc.cluster.local&#34;</span>,  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;cluster&#34;</span>: <span style="color:#e6db74">&#34;outbound|5701||manager.manager.svc.cluster.local&#34;</span>,  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;accessLog&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>...  
</span></span><span style="display:flex;"><span>                            <span style="color:#f92672">]</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">]</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">]</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;deprecatedV1&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;bindToPort&#34;</span>: false  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;trafficDirection&#34;</span>: <span style="color:#e6db74">&#34;OUTBOUND&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">]</span>
</span></span></code></pre></div><p>I removed some of the values here so we better understand. It’s not that complicated.</p>
<p>First, we match on the destination IP and port</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;address&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;socketAddress&#34;</span>: {  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&#34;address&#34;</span>: <span style="color:#e6db74">&#34;10.0.23.154&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&#34;portValue&#34;</span>: <span style="color:#ae81ff">5701</span>  
</span></span><span style="display:flex;"><span>            }  
</span></span><span style="display:flex;"><span>        }<span style="color:#960050;background-color:#1e0010">,</span>
</span></span></code></pre></div><p>Then we have a <code>filterChain</code> and an <code>envoy.tcp.proxy</code> filter.<br>
Here again, the proxy points us to cluster named <code>outbound|5701||manager.manager.svc.cluster.local</code> .<br>
Envoy is not using any route as we are using a TCP protocol and we have nothing to base the routing on anyways.</p>
<p>Let’s see inside the cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>istioctl pc clusters manager-7948dffbdd-p44xx.manager --port <span style="color:#ae81ff">5701</span> --fqdn manager.manager.svc.cluster.local --direction outbound -o json
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;transportSocketMatches&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;tlsMode-istio&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;match&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;tlsMode&#34;</span>: <span style="color:#e6db74">&#34;istio&#34;</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>...  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;tlsMode-disabled&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;match&#34;</span>: <span style="color:#f92672">{}</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;transportSocket&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;envoy.transport_sockets.raw_buffer&#34;</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">]</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;outbound|5701||manager.manager.svc.cluster.local&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;EDS&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;edsClusterConfig&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;edsConfig&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;ads&#34;</span>: <span style="color:#f92672">{}</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;serviceName&#34;</span>: <span style="color:#e6db74">&#34;outbound|5701||manager.manager.svc.cluster.local&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;connectTimeout&#34;</span>: <span style="color:#e6db74">&#34;1s&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;circuitBreakers&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>...  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;filters&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>...  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">]</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">]</span>
</span></span></code></pre></div><p>I also removed some parts here to focus on the important stuff:</p>
<ul>
<li>first two blocks: Envoy will check if it can do SSL (TLS) and set the certificate if we can. Else, use plain TCP.</li>
<li>find the destination’s pod using the <code>EDS</code> protocol. This stands for <code>E</code>ndpoint <code>D</code>iscovery <code>S</code>ervice.
Envoy will look up its list of endpoints for the service named <code>outbound|5701||manager.manager.svc.cluster.local </code>These endpoints are selected based on the Kubernetes service endpoint list (<code>kubectl get endpoints -n manager manager</code>).</li>
</ul>
<p>We can also check the list of endpoints configured in Istio:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>istioctl pc endpoints manager-7948dffbdd-p44xx.manager --cluster <span style="color:#e6db74">&#34;outbound|5701||manager.manager.svc.cluster.local&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ENDPOINT            STATUS      OUTLIER CHECK     CLUSTER  
</span></span><span style="display:flex;"><span>10.12.0.12:5701     HEALTHY     OK                outbound|5701<span style="color:#f92672">||</span>manager.manager.svc.cluster.local  
</span></span><span style="display:flex;"><span>10.12.1.6:5701      HEALTHY     OK                outbound|5701<span style="color:#f92672">||</span>manager.manager.svc.cluster.local
</span></span></code></pre></div><p>All this sounds pretty good.</p>
<h3 id="testing-the-setup">Testing the setup</h3>
<p>To demonstrate the whole thing, let’s connect to one of the manager’s pod and call the service on port <em>5701</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>k -n manager exec -ti manager-7948dffbdd-p44xx -c manager sh
</span></span><span style="display:flex;"><span>telnet manager.manager <span style="color:#ae81ff">5701</span>
</span></span></code></pre></div><p>You should get the following answer after pushing the enter key some times:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>Connected to manager.manager
</span></span><span style="display:flex;"><span>Connection closed by foreign host
</span></span></code></pre></div><p>The server we are using is in fact an HTTPS web server, expecting a TLS handshake… but whatever, we just want to connect to a TCP port here. So, the connection is working fine.</p>
<p>Repeat this command multiple times.</p>
<p>Let’s look at the logs from the Istio-Proxy sidecars, using the K8s log tailer <a href="https://github.com/wercker/stern">Stern</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>stern -n manager manager -c istio-proxy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>manager-7948dffbdd-p44xx istio-proxy <span style="color:#f92672">[</span>2020-07-23T14:26:27.081Z<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;- - -&#34;</span> <span style="color:#ae81ff">0</span> - <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">506</span> - <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;10.12.0.12:5701&#34;</span> outbound|5701<span style="color:#f92672">||</span>manager.manager.svc.cluster.local 10.12.0.12:51100 10.0.23.154:5701 10.12.0.12:47316 - -  
</span></span><span style="display:flex;"><span>manager-7948dffbdd-p44xx istio-proxy <span style="color:#f92672">[</span>2020-07-23T14:26:27.081Z<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;- - -&#34;</span> <span style="color:#ae81ff">0</span> - <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">506</span> - <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;127.0.0.1:5701&#34;</span> inbound|5701|tcp-hazelcast|manager.manager.svc.cluster.local 127.0.0.1:59430 10.12.0.12:5701 10.12.0.12:51100 outbound_.5701_._.manager.manager.svc.cluster.local -
</span></span><span style="display:flex;"><span>manager-7948dffbdd-p44xx istio-proxy <span style="color:#f92672">[</span>2020-07-23T14:26:08.632Z<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;- - -&#34;</span> <span style="color:#ae81ff">0</span> - <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">521</span> - <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;10.12.1.6:5701&#34;</span> outbound|5701<span style="color:#f92672">||</span>manager.manager.svc.cluster.local 10.12.0.12:49150 10.0.23.154:5701 10.12.0.12:47258 - -  
</span></span><span style="display:flex;"><span>manager-7948dffbdd-sh7rx istio-proxy <span style="color:#f92672">[</span>2020-07-23T14:26:08.634Z<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;- - -&#34;</span> <span style="color:#ae81ff">0</span> - <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">519</span> - <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;127.0.0.1:5701&#34;</span> inbound|5701|tcp-hazelcast|manager.manager.svc.cluster.local 127.0.0.1:57844 10.12.1.6:5701 10.12.0.12:49150 outbound_.5701_._.manager.manager.svc.cluster.local -
</span></span></code></pre></div><p>I grouped the requests by two, and I have two different pairs:</p>
<ol>
<li>an <code>outbound</code> connection to <code>manager.manager.svc</code></li>
<li>an inbound connection to ourselves</li>
<li>an <code>outbound</code> connection to <code>manager.manager.svc</code></li>
<li>an inbound connection on the second manager’s Pod (<code>10.12.2.8:5701</code>)</li>
</ol>
<p>Of course, Istio is using the round-robin load-balancing algo by default, so it totally explain what is going on here. Each consecutive request go to a different pod.</p>
<p>Here, blue link is <code>outbound</code> while pink is <code>inbound</code></p>
<p><img src="images/3.png#layoutTextWidth" alt="image"></p>
<p>OK, this is not really what’s going on ! I tricked you !!</p>
<p>Istio (Envoy) does NOT send traffic to the Kubernetes Service. Services are used by Pilot (Istiod) to build the mesh topology, then the informations is sent to each Istio-proxy, which then send traffic to the Pods. It finally look more like that:</p>
<p><img src="images/4.png#layoutTextWidth" alt="image"></p>
<p>But that’s not how Hazelcast server works either !</p>
<h3 id="hazelcast-cluster-communication">Hazelcast cluster communication</h3>
<p>The truth is, Hazelcast does no use the service name for its communications.</p>
<p>In fact, the <a href="https://github.com/hazelcast/hazelcast-kubernetes">Hazelcast Kubernetes plugin</a> leverage the Kubernetes API (or a Headless service) to learn about all the pods play in the Hazelcast cluster. It’s unclear to me if it’s then using the Pod’s FQDN or it’s IP. In fact it does not matter to us.</p>
<p>As with every application using a “smart” client, like Kafka, each instance needs to talk directly to each of the other instances that are part of the cluster.</p>
<p>So, what’s happening if we try to call the second manager’s Pod using it’s IP ?</p>
<p>Client pod:<br>
<code>manager-7948dffbdd-p44xx istio-proxy [2020-07-23T14:39:12.587Z] &quot;- - -&quot; 0 - &quot;-&quot; &quot;-&quot; 6 0 2108 - &quot;-&quot; &quot;-&quot; &quot;-&quot; &quot;-&quot; &quot;10.12.2.8:5701&quot; PassthroughCluster 10.12.0.11:51428 10.12.2.8:5701 10.12.0.11:51426 - -</code></p>
<p>Server pod:<br>
<code>manager-7948dffbdd-sh7rx istio-proxy [2020-07-23T14:39:13.590Z] &quot;- - -&quot; 0 - &quot;-&quot; &quot;-&quot; 6 0 1113 - &quot;-&quot; &quot;-&quot; &quot;-&quot; &quot;-&quot; &quot;127.0.0.1:5701&quot; inbound|5701|tcp-hazelcast|manager.manager.svc.cluster.local 127.0.0.1:59986 10.12.2.8:5701 10.12.0.11:51428 - -</code></p>
<ol>
<li>the outbound connection is using the Passthrough cluster as the destination IP (<code>10.12.2.8</code>) is not known inside the mesh</li>
<li>the upstream connection uses the <code>inbound</code> cluster as before</li>
</ol>
<p>Here’s a schema of this situation. In red, the Hazelcast DB nodes (the red cylinder) calls the API (the red-dot arrow) to get all the pods that are part of the cluster. Once done, the first pod calls the IP of the next pod (blue line).</p>
<p><img src="images/5.png#layoutTextWidth" alt="image"></p>
<p>This is not perfect, but at least, it’s working</p>
<h3 id="things-can-go-bad">Things can go bad</h3>
<p>Later on I was called as something strange was going on in the cluster.</p>
<p>At some point, when the manager application tried to connect to the Hazelcast port, the connection was routed to the <code>idle</code> pod in the manager namespace.<br>
How possible ? This pod even don’t expose the port <em>5701</em> !</p>
<p>Here’s an overview:</p>
<p><img src="images/6.png#layoutTextWidth" alt="image"></p>
<p>Nothing changed in the <code>manager</code> Namespace, but looking at the services inside the <code>app</code> namespace, I saw an <code>ExternalName</code> service was later added:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>k get svc  -n app
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME      TYPE           CLUSTER-IP    EXTERNAL-IP                      PORT<span style="color:#f92672">(</span>S<span style="color:#f92672">)</span>             AGE  
</span></span><span style="display:flex;"><span>app       ClusterIP      10.0.18.143   &lt;none&gt;                           8080/TCP,5701/TCP   18h  
</span></span><span style="display:flex;"><span>app-ext   ExternalName   &lt;none&gt;        idle.manager.svc.cluster.local   8080/TCP,5701/TCP   117s
</span></span></code></pre></div><p>An <code>ExternalName</code> service type is one that, instead of defining an internal load-balancer that holds the list of the active target pods, is only a <em>CNAME</em> to another service.</p>
<p>Here’s its definition:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app.dmp/name</span>: <span style="color:#ae81ff">app  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">app-ext  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">app  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http-app  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tcp-hazelcast  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">5701</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">5701</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">externalName</span>: <span style="color:#ae81ff">idle.manager.svc.cluster.local  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">sessionAffinity</span>: <span style="color:#ae81ff">None  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>: <span style="color:#ae81ff">ExternalName</span>
</span></span></code></pre></div><p>This specific definition makes the name <code>app-ext.app.svc.cluster.local</code> resolve to <code>idle.manager.svc.cluster.local</code> (well, CNAME, then resolve to the IP of the service, <code>10.0.23.221</code>)</p>
<p>Let’s look again at our Listeners on the <code>manager</code> pod:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>istioctl pc listeners manager-7948dffbdd-p44xx.manager --port <span style="color:#ae81ff">5701</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ADDRESS         PORT     TYPE  
</span></span><span style="display:flex;"><span>10.12.0.12      <span style="color:#ae81ff">5701</span>     TCP  
</span></span><span style="display:flex;"><span>10.0.18.143     <span style="color:#ae81ff">5701</span>     TCP  
</span></span><span style="display:flex;"><span>10.0.23.154     <span style="color:#ae81ff">5701</span>     TCP  
</span></span><span style="display:flex;"><span>0.0.0.0         <span style="color:#ae81ff">5701</span>     TCP
</span></span></code></pre></div><p>we now have a new <code>0.0.0.0</code> entry !<br>
Let’s look at the config:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>istioctl pc listeners manager-7948dffbdd-p44xx.manager --port <span style="color:#ae81ff">5701</span> --address 0.0.0.0 -o json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;0.0.0.0_5701&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;address&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;socketAddress&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;address&#34;</span>: <span style="color:#e6db74">&#34;0.0.0.0&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;portValue&#34;</span>: <span style="color:#ae81ff">5701</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;filterChains&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;filterChainMatch&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;prefixRanges&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;addressPrefix&#34;</span>: <span style="color:#e6db74">&#34;10.12.0.11&#34;</span>,  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;prefixLen&#34;</span>: <span style="color:#ae81ff">32</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">]</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;filters&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;envoy.filters.network.wasm&#34;</span>,  
</span></span><span style="display:flex;"><span>...  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;envoy.tcp_proxy&#34;</span>,  
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;typedConfig&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;[@type](http://twitter.com/type)&#34;</span>: <span style="color:#e6db74">&#34;type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy&#34;</span>,  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;statPrefix&#34;</span>: <span style="color:#e6db74">&#34;BlackHoleCluster&#34;</span>,  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;cluster&#34;</span>: <span style="color:#e6db74">&#34;BlackHoleCluster&#34;</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">]</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;filters&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;envoy.filters.network.wasm&#34;</span>,  
</span></span><span style="display:flex;"><span>...  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;envoy.tcp_proxy&#34;</span>,  
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;typedConfig&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;[@type](http://twitter.com/type)&#34;</span>: <span style="color:#e6db74">&#34;type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy&#34;</span>,  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;statPrefix&#34;</span>: <span style="color:#e6db74">&#34;outbound|5701||app-ext.app.svc.cluster.local&#34;</span>,  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;cluster&#34;</span>: <span style="color:#e6db74">&#34;outbound|5701||app-ext.app.svc.cluster.local&#34;</span>,  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;accessLog&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>...  
</span></span><span style="display:flex;"><span>                            <span style="color:#f92672">]</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">]</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">]</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;deprecatedV1&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;bindToPort&#34;</span>: false  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;trafficDirection&#34;</span>: <span style="color:#e6db74">&#34;OUTBOUND&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">]</span>
</span></span></code></pre></div><p>Suddenly it’s a little more complicated.</p>
<ul>
<li>first, we accept any destination IP for port <em>5701</em></li>
<li>then we enter the <em><em>filterChains</em></em>_
<ul>
<li>if the real destinations is ourselves (the pod IP, <code>10.12.0.11</code>), drop the request (send it to the <em>B_lackHoleCluster_</em>)</li>
<li>else use cluster <code>outbound|5701||app-ext.app.svc.cluster.local </code>to find the forwarding address</li>
</ul>
</li>
</ul>
<p>Let’s check this cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>istioctl pc clusters manager-7948dffbdd-p44xx.manager  --fqdn app-ext.app.svc.cluster.local --port <span style="color:#ae81ff">5701</span> -o json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;outbound|5701||app-ext.app.svc.cluster.local&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;STRICT_DNS&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;connectTimeout&#34;</span>: <span style="color:#e6db74">&#34;1s&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;loadAssignment&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;clusterName&#34;</span>: <span style="color:#e6db74">&#34;outbound|5701||app-ext.app.svc.cluster.local&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;endpoints&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;locality&#34;</span>: <span style="color:#f92672">{}</span>,  
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;lbEndpoints&#34;</span>: <span style="color:#f92672">[</span>  
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#34;endpoint&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                                <span style="color:#e6db74">&#34;address&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                                    <span style="color:#e6db74">&#34;socketAddress&#34;</span>: <span style="color:#f92672">{</span>  
</span></span><span style="display:flex;"><span>                                        <span style="color:#e6db74">&#34;address&#34;</span>: <span style="color:#e6db74">&#34;idle.manager.svc.cluster.local&#34;</span>,  
</span></span><span style="display:flex;"><span>                                        <span style="color:#e6db74">&#34;portValue&#34;</span>: <span style="color:#ae81ff">5701</span>  
</span></span><span style="display:flex;"><span>                                    <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                                <span style="color:#f92672">}</span>  
</span></span><span style="display:flex;"><span>                            <span style="color:#f92672">}</span>,
</span></span></code></pre></div><p>Once again, this cluster is pretty simple, it just forward the traffic to the server <code>idle.manager.svc.cluster.local</code> using the DNS to get the real IP.</p>
<p>Let’s do a telnet again to the second manager’s Pod and check the logs:
<code>manager-7948dffbdd-p44xx istio-proxy [2020-07-23T14:47:24.040Z] &quot;- - -&quot; 0 UF,URX &quot;-&quot; &quot;-&quot; 0 0 1000 - &quot;-&quot; &quot;-&quot; &quot;-&quot; &quot;-&quot; &quot;10.0.23.221:5701&quot; outbound|5701||app-ext.app.svc.cluster.local - 10.12.1.6:5701 10.12.0.12:52852 - -</code></p>
<ol>
<li>request is in error: <code>0 UF,URX</code><br>
From the <a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#configuration">Envoy doc</a>, UF is <em>Upstream connection failure</em> and URX is <a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto#envoy-v3-api-field-extensions-filters-network-tcp-proxy-v3-tcpproxy-max-connect-attempts"><em>maximum connect attempts (TCP)</em></a> <em>was reached</em>.<br>
This is perfectly normal as the <code>idle</code> service does not expose the port <em>5701</em> (nor the Pod binds it)</li>
<li>request was forwarded to the <code>outbound|5701||app-ext.app.svc.cluster.local</code> cluster
<img src="images/7.png#layoutTextWidth" alt="image"></li>
</ol>
<p>Wait, <em>WHAAAAT</em> ?<br>
A <code>service</code> created in another Namespace just broke our Hazelcast cluster ?</p>
<p>The explanation is easy here… before this service was created, the second Pod’s IP was unknown and Envoy was using the <code>Passthrough</code> cluster. Now, the IP is still unknown but is matched by the catchall <code>0.0.0.0:5710</code> listener.</p>
<p>The explanation is easy here… before this service was created, the real Pod’s IP was <em>unknown</em> in the mesh and Envoy was using the <code>Passthrough</code> cluster to send the request directly to it.<br>
Now, the IP is still <em>unknown</em> but is matched by the catchall <code>0.0.0.0:5710 </code>Listener and forwarded to a known Cluster, <code>outbound|5701||app-ext.app.svc.cluster.local</code>, which is pointing to the <code>idle</code> Service.</p>
<h3 id="solving-the-issue">Solving the issue</h3>
<p>What can we do to recover our Hazelcast cluster ?</p>
<h4 id="no-5701-port">no 5701 port</h4>
<p>One of the solutions would be to <em>NOT</em> expose the port <em>5701</em> in the <code>ExternalName</code> service. Then, no <code>0.0.0.0:5701 </code>Listener, and traffic will flow through the <code>Passthrough</code> Cluster as before. Not ideal to track our Mesh traffic, but working fine.</p>
<h4 id="no-externalname">no ExternalName</h4>
<p>Another solution would be to not use <code>ExternalName</code> at all…</p>
<p>The <code>Externalname</code> was in fact a new service that was added in certain circumstances where we want all the calls going to the <code>app</code> service to be forwarded to the <code>idle.manager</code> service.<br>
Beside the fact that it broke our Hazelcast cluster, it also means that we had to delete the <code>ClusterIP</code> service then re-create it as an <code>ExternalName</code> type. Both of these actions forced Istiod (Pilot) to re-build the complete mesh config and update all the proxies in the mesh, including a change in the Listeners that caused a drain of all opened connexions, twice !<br>
This is one of the worst pattern you can have when using a service mesh.</p>
<p>Instead of playing with <code>Service</code> resource, one possible pattern would be to add a <code>VirtualService</code>for the <code>app</code> application that will send traffic to the <code>idle.manager</code>service only when we need. This would not create or delete any listener and will only update the route:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.istio.io/v1beta1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">VirtualService  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">app-idle  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hosts</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">app.app.svc.cluster.local  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">http</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">to-idle  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">route</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">destination</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">host</span>: <span style="color:#ae81ff">idle.manager.svc.cluster.local  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">port</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">number</span>: <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div><p>This is saying that all traffic for Service <code>app.app.svc.cluster.local</code> must be send to <code>idle.manager.svc.cluster.local:8080</code>.</p>
<p>When we want the traffic to effectively go to the <code>app</code> application, just update the <code>VirtualService</code> and set the <code>destination</code> to <code>app.app.svc.cluster.local</code>, or simply delete it.</p>
<h4 id="sidecars">Sidecars</h4>
<p>With recent Istio, we can also leverage the use of <code>Sidecar</code> resource to limit what the <code>manager</code> Pod can see inside the mesh.<br>
Specifically in this case, we could use an annotation on the <code>ExternalName</code> service to only make it visible in the <code>app</code> namespace:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app/name</span>: <span style="color:#ae81ff">app  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networking.istio.io/exportTo</span>: <span style="color:#e6db74">&#34;.&#34;</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">app-ext  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">app  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http-app  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tcp-hazelcast  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">5701</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">5701</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">externalName</span>: <span style="color:#ae81ff">idle.manager.svc.cluster.local  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">sessionAffinity</span>: <span style="color:#ae81ff">None  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>: <span style="color:#ae81ff">ExternalName</span>
</span></span></code></pre></div><p>By adding the annotation <code>networking.istio.io/exportTo: “.”</code> the service is not seen by the managers Pods. No more <code>0.0.0.0:5701</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>istioctl pc listeners manager-7948dffbdd-p44xx.manager --port <span style="color:#ae81ff">5701</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ADDRESS         PORT     TYPE  
</span></span><span style="display:flex;"><span>10.0.18.143     <span style="color:#ae81ff">5701</span>     TCP  
</span></span><span style="display:flex;"><span>10.12.0.12      <span style="color:#ae81ff">5701</span>     TCP  
</span></span><span style="display:flex;"><span>10.0.25.229     <span style="color:#ae81ff">5701</span>     TCP
</span></span></code></pre></div><h4 id="different-tcp-ports">different TCP ports</h4>
<p>If we’re willing to update our application, there’s a few other solutions we could use as well.</p>
<p>We could use different ports for different TCP services. This is the hardest to put in place when you’re already dealing with complex applications like databases, but it’s been the only option available in Istio for a long time.</p>
<p>We could also update our applications to use TLS and populate the Server Name Indication (SNI). Envoy/Istio can use SNI to route traffic for TCP services on the same port because Istio treats the SNI for routing TLS/TCP traffic just like it treats the Host header for HTTP traffic.</p>
<h3 id="conclusion">Conclusion</h3>
<p>First I want to note that no <em>Hazelcast</em> cluster were damaged during this demo 😄</p>
<p>The problem here is not linked to Hazelcast at all and can happen with any set of services using the same TCP ports.</p>
<p>Istio and Envoy have very limited way to play with TCP or unknown protocols. When the only thing you have to inspect is the IP and the port, there’s not much to do.</p>
<p>Always keep in mind the best practices to configure your clusters:</p>
<ul>
<li>try to avoid using the same port number for different TCP services where you can</li>
<li>always prefix the protocol inside port names (<code>tcp-hazelcast</code>, <code>http-frontend</code>, <code>grpc-backend</code>)  —  see <a href="https://istio.io/latest/docs/ops/configuration/traffic-management/protocol-selection/">protocol selection</a> docs</li>
<li>add <code>Sidecar</code> resources as early as possible to restrict the sprawl of configuration, and set the default <code>exportTo</code> to namespace local in your Istio installation</li>
<li>configure your applications to communicate by names (FQDN), not IPs</li>
<li>always configure FQDN (including <code>svc.cluster.local</code>) in Istio Resources</li>
</ul>
<p>Note: This blog post is a re-post of the original article I wrote for <a href="https://www.tetrate.io/blog/understanding-istio-and-tcp-services/"><em>Tetrate.io blog</em></a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Laser Post-Processor for Fusion 360 that works on Shapeoko</title>
            <link>https://piratemakers.ca/posts/2020/04/laser-post-processor-for-fusion-360-that-works-on-shapeoko/</link>
            <pubDate>Sat, 11 Apr 2020 18:29:43 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2020/04/laser-post-processor-for-fusion-360-that-works-on-shapeoko/</guid>
            <description>bought a 10W+ Endurance Laser last year. This is an addon to mount on my Shapeoko3 CNC. It&amp;rsquo;s really easy to setup as you only have to attach it on your spindle and connect it to the PWM port of the Shapeoko controler. Don&amp;rsquo;t forget to unplug your spindle :)
I mostly use Autodesk Fusion 360 when I create my CNC projects, and sadly, I found no post-processor that could create Gcode files compatible with the Shapeoko 3 (GRBL).</description>
            <content type="html"><![CDATA[<p>bought a <a href="https://endurancelasers.com/diode-lasers/10watt-endurance-laser-plus/">10W+ Endurance Laser</a> last year. This is an addon to mount on my Shapeoko3 CNC. It&rsquo;s really easy to setup as you only have to attach it on your spindle and connect it to the PWM port of the Shapeoko controler. Don&rsquo;t forget to unplug your spindle :)</p>
<p>I mostly use <a href="https://www.autodesk.com/products/fusion-360/students-teachers-educators">Autodesk Fusion 360</a> when I create my CNC projects, and sadly, I found no post-processor that could create Gcode files compatible with the Shapeoko 3 (GRBL).
Differences between a spindle and a laser are really few&hellip;:</p>
<ul>
<li>PWM goes from 0 to 255</li>
<li>you don&rsquo;t have to wait for spindle to start spinning</li>
<li>you want the laser to turn off when you are doing rapid movements</li>
</ul>
<p>So you need a special Post-Processor to take care of this.</p>
<p>I cloned an existing one and adapted to work with a laser.</p>
<p>You can find the code and instructions at <a href="https://github.com/pirate-makers/shapeokolaser">https://github.com/pirate-makers/shapeokolaser</a></p>
]]></content>
        </item>
        
        <item>
            <title>Banzaicloud Kafka Operator and Broker AutoScaling</title>
            <link>https://piratemakers.ca/posts/2019/10/banzaicloud-kafka-operator-and-broker-autoscaling/</link>
            <pubDate>Thu, 03 Oct 2019 16:34:43 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2019/10/banzaicloud-kafka-operator-and-broker-autoscaling/</guid>
            <description>The new Kafka Operator from BanzaiCloud includes a neat feature : a Prometheus AlertManager that can receive alerts from your global Prometheus cluster.
In this poste we’re going to see how to use your own Prometheus cluster deployed using the Prometheus Operator.
EDIT also check my previous article on the Banzaicloud Kafka Operator
EDIT : CC only trigger rebalance in an UPscale/DOWNscale operation. It’s the operator that create the new brokers.</description>
            <content type="html"><![CDATA[<p><img src="images/1.png#layoutTextWidth" alt="image"></p>
<p>The new Kafka Operator from BanzaiCloud includes a neat feature : a Prometheus AlertManager that can receive alerts from your global Prometheus cluster.</p>
<p>In this poste we’re going to see how to use your own Prometheus cluster deployed using the <a href="https://github.com/coreos/prometheus-operator">Prometheus Operator</a>.</p>
<p><strong>EDIT</strong> also check my previous article on the <a href="/posts/2019/10/banzaicloud-kafka-operator-tour/">Banzaicloud Kafka Operator</a></p>
<p><strong>EDIT</strong> : CC only trigger rebalance in an UPscale/DOWNscale operation. It’s the operator that create the new brokers. Article is more precise about this.</p>
<h3 id="prometheus-operator">Prometheus Operator</h3>
<p>This <a href="https://github.com/coreos/prometheus-operator">operator</a> is a simple way to bootstrap your Prometheus cluster. Install the Operator, create few manifest and BAM, all set up !</p>
<p>I’m not going to explain it all here, just follow the operator setup. But here’s a Prometheus overview of what is going on there (some parts have been dismissed for clarity) :</p>
<p><img src="images/2.png#layoutTextWidth" alt="image"></p>
<p>Normally you already have the left side of the picture in place. The Prometheus CR creates a Prometheus cluster. The AlertManager CR creates… an AlertManager pool of servers. The PrometheusRule CR configure Prometheus Cluster to scrape metrics and create alerts.</p>
<h4 id="prometheusrule">PrometheusRule</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">k8s.rules  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">rules</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">expr</span>: <span style="color:#ae81ff">|  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">sum(rate(container_cpu_usage_seconds_total{job=&#34;kubelet&#34;, image!=&#34;&#34;, container_name!=&#34;&#34;}[5m])) by (namespace)  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">record</span>: <span style="color:#ae81ff">namespace:container_cpu_usage_seconds_total:sum_rate  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">expr</span>: <span style="color:#ae81ff">|  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">sum(container_memory_usage_bytes{job=&#34;kubelet&#34;, image!=&#34;&#34;, container_name!=&#34;&#34;}) by (namespace)  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">record</span>: <span style="color:#ae81ff">namespace:container_memory_usage_bytes:sum</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">...</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">alertmanager.rules  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">rules</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">alert</span>: <span style="color:#ae81ff">AlertmanagerConfigInconsistent  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">message</span>: <span style="color:#ae81ff">The configuration of the instances of the Alertmanager cluster `{{$labels.service}}`  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#ae81ff">are out of sync.  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">expr</span>: <span style="color:#ae81ff">|  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">count_values(&#34;config_hash&#34;, alertmanager_config_hash{job=&#34;alertmanager-k8s&#34;,namespace=&#34;monitoring&#34;}) BY (service) / ON(service) GROUP_LEFT() label_replace(max(prometheus_operator_spec_replicas{job=&#34;prometheus-operator&#34;,namespace=&#34;monitoring&#34;,controller=&#34;alertmanager&#34;}) by (name, job, namespace, controller), &#34;service&#34;, &#34;alertmanager-$1&#34;, &#34;name&#34;, &#34;(.*)&#34;) != 1  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">for</span>: <span style="color:#ae81ff">5m  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">severity</span>: <span style="color:#ae81ff">critical  </span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>You see two types of rules :</p>
<ul>
<li><code>record rules</code>which evaluate the metrics and record (mutate/store) them</li>
<li><code>alert rules</code> which evaluate an expression and return a boolean value (true/false), which trigger the alert.</li>
</ul>
<p>Alert rules usually have two other parameters :</p>
<ul>
<li><code>for</code> which is a duration. If the <code>alert</code> stays triggered for this duration, it is considered valid and is fired.</li>
<li><code>labels</code> (and <code>annotations</code>) are some <em>key:value</em> added to the alert and used by<code>AlertManager</code>. It’s a way to add more context or information to the Alert.</li>
</ul>
<h4 id="prometheus-to-alertmanager">Prometheus to AlertManager</h4>
<p>When using the Operator, you have to tell the Prometheus cluster which AlertManager to use.</p>
<p>This is done in the <code>Prometheus</code> Manifest. My Prometheus cluster is name <code>k8s</code>. Here is my full spec as a reference. Create your own using the Jsonnet bundle :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">monitoring.coreos.com/v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">enableAdminAPI</span>: <span style="color:#e6db74">&#34;true&#34;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Prometheus  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">prometheus</span>: <span style="color:#ae81ff">k8s  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">k8s  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">monitoring  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">k8s  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">alerting</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">alertmanagers</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">alertmanager-k8s  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">monitoring  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">port</span>: <span style="color:#ae81ff">web  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">baseImage</span>: <span style="color:#ae81ff">privaterepo:4567/infra/docker-images/prometheus  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">externalUrl</span>: [<span style="color:#ae81ff">https://prometheus.devops.k8s.local](https://prometheus.devops.k8s.coyote.local)  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">nodeSelector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">beta.kubernetes.io/os</span>: <span style="color:#ae81ff">linux  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">2</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">requests</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">memory</span>: <span style="color:#ae81ff">400Mi  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">retention</span>: <span style="color:#ae81ff">45d  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ruleSelector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">matchLabels</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">prometheus</span>: <span style="color:#ae81ff">k8s  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">role</span>: <span style="color:#ae81ff">alert-rules  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">securityContext</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">fsGroup</span>: <span style="color:#ae81ff">2000</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runAsNonRoot</span>: <span style="color:#66d9ef">true</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runAsUser</span>: <span style="color:#ae81ff">1000</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">prometheus-k8s  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">serviceMonitorNamespaceSelector</span>: {}  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">serviceMonitorSelector</span>: {}  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">storage</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumeClaimTemplate</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">PersistentVolumeClaim  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">accessModes</span>:  
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">ReadWriteOnce  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">resources</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">requests</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">storage</span>: <span style="color:#ae81ff">200Gi  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">storageClassName</span>: <span style="color:#ae81ff">ssd  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v2.11.2</span>
</span></span></code></pre></div><p>The link is made at the beginning of the Spec :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">alerting</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">alertmanagers</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">alertmanager-k8s  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">monitoring  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">port</span>: <span style="color:#ae81ff">web</span>
</span></span></code></pre></div><p>This tells Prometheus to send alerts to the Service <code>alertmanager-k8s</code> in the namespace <code>monitoring</code> on the port named <code>web</code>.</p>
<p>We can check that using kubectl :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl -n monitoring describe svc alertmanager-k8s
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Name:              alertmanager-k8s                    &lt;---  
</span></span><span style="display:flex;"><span>Namespace:         monitoring                          &lt;---  
</span></span><span style="display:flex;"><span>Labels:            alertmanager<span style="color:#f92672">=</span>k8s  
</span></span><span style="display:flex;"><span>Selector:          alertmanager<span style="color:#f92672">=</span>k8s,app<span style="color:#f92672">=</span>alertmanager  
</span></span><span style="display:flex;"><span>Type:              ClusterIP  
</span></span><span style="display:flex;"><span>IP:                10.230.55.190  
</span></span><span style="display:flex;"><span>Port:              web  9093/TCP                       &lt;---  
</span></span><span style="display:flex;"><span>TargetPort:        web/TCP  
</span></span><span style="display:flex;"><span>Endpoints:         10.230.128.129:9093,10.230.128.233:9093,10.230.130.205:9093  
</span></span><span style="display:flex;"><span>Session Affinity:  ClientIP  
</span></span><span style="display:flex;"><span>Events:            &lt;none&gt;
</span></span></code></pre></div><h4 id="sending-alerts-to-kafka-operator">Sending Alerts to Kafka Operator</h4>
<p>So, it’s now clear that we have to add an <code>alerting</code> block inside the <code>Prometheus</code> spec.<br>
Let’s first check the <code>Services</code> created by the Kafka Operator (my kafka operator is deployed in the <code>tools</code> namespace) :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl -n tools get svc -l app.kubernetes.io/name<span style="color:#f92672">=</span>kafka-operator
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT<span style="color:#f92672">(</span>S<span style="color:#f92672">)</span>            AGE  
</span></span><span style="display:flex;"><span>kafka-alertmanager   ClusterIP   10.230.6.131   &lt;none&gt;        9001/TCP           3d2h  
</span></span><span style="display:flex;"><span>kafka-operator       ClusterIP   10.230.97.22   &lt;none&gt;        443/TCP,8080/TCP   42d
</span></span></code></pre></div><p>So we have a <code>kafka-alertmanager</code> service…</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl -n tools describe svc kafka-alertmanager
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Name:              kafka-alertmanager                     &lt;---  
</span></span><span style="display:flex;"><span>Namespace:         tools                                  &lt;---  
</span></span><span style="display:flex;"><span>...  
</span></span><span style="display:flex;"><span>Type:              ClusterIP  
</span></span><span style="display:flex;"><span>IP:                10.230.6.131  
</span></span><span style="display:flex;"><span>Port:              alerts  9001/TCP                       &lt;---  
</span></span><span style="display:flex;"><span>TargetPort:        9001/TCP  
</span></span><span style="display:flex;"><span>Endpoints:         10.230.128.144:9001  
</span></span><span style="display:flex;"><span>Session Affinity:  None  
</span></span><span style="display:flex;"><span>Events:            &lt;none&gt;
</span></span></code></pre></div><p>So let’s add it with <code>kubectl edit prometheus k8s</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>...  
</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">k8s  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">alerting</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">alertmanagers</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">alertmanager-k8s  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">monitoring  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">port</span>: <span style="color:#ae81ff">web  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kafka-alertmanager             &lt;---   </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">tools                          add these 3 lines  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">port</span>: <span style="color:#ae81ff">alerts                         &lt;---  </span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>After few seconds, or minutes, the Prometheus config is reloaded. You can check it’s working by going to your Prometheus web interface and call the <code>/config</code> URL (<a href="http://localhost:9090/config">http://localhost:9090/config</a> if you’re using a port-forward) :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">global</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scrape_interval</span>: <span style="color:#ae81ff">30s  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scrape_timeout</span>: <span style="color:#ae81ff">10s  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">evaluation_interval</span>: <span style="color:#ae81ff">30s  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">external_labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">prometheus</span>: <span style="color:#ae81ff">monitoring/k8s  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">prometheus_replica</span>: <span style="color:#ae81ff">prometheus-k8s-1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">alerting</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">alertmanagers</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">kubernetes_sd_configs</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">role</span>: <span style="color:#ae81ff">endpoints                          &lt;---------- default  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">namespaces</span>:                                            <span style="color:#ae81ff">...  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">names</span>:  
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">monitoring  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">scheme</span>: <span style="color:#ae81ff">http  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">path_prefix</span>: <span style="color:#ae81ff">/  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">timeout</span>: <span style="color:#ae81ff">10s  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">api_version</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">relabel_configs</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">source_labels</span>: [<span style="color:#ae81ff">__meta_kubernetes_service_name]  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">separator</span>: <span style="color:#ae81ff">;  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">regex</span>: <span style="color:#ae81ff">alertmanager-k8s  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">replacement</span>: <span style="color:#ae81ff">$1  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">action</span>: <span style="color:#ae81ff">keep  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">source_labels</span>: [<span style="color:#ae81ff">__meta_kubernetes_endpoint_port_name]  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">separator</span>: <span style="color:#ae81ff">;  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">regex</span>: <span style="color:#ae81ff">web  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">replacement</span>: <span style="color:#ae81ff">$1  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">action</span>: <span style="color:#ae81ff">keep  </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">kubernetes_sd_configs</span>:                      <span style="color:#ae81ff">&lt;---------- Kafka  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">role</span>: <span style="color:#ae81ff">endpoints                                        ...  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">namespaces</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">names</span>:  
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">tools  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">scheme</span>: <span style="color:#ae81ff">http  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">path_prefix</span>: <span style="color:#ae81ff">/  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">timeout</span>: <span style="color:#ae81ff">10s  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">api_version</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">relabel_configs</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">source_labels</span>: [<span style="color:#ae81ff">__meta_kubernetes_service_name]  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">separator</span>: <span style="color:#ae81ff">;  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">regex</span>: <span style="color:#ae81ff">kafka-alertmanager  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">replacement</span>: <span style="color:#ae81ff">$1  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">action</span>: <span style="color:#ae81ff">keep  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">source_labels</span>: [<span style="color:#ae81ff">__meta_kubernetes_endpoint_port_name]  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">separator</span>: <span style="color:#ae81ff">;  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">regex</span>: <span style="color:#ae81ff">alerts  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">replacement</span>: <span style="color:#ae81ff">$1  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">action</span>: <span style="color:#ae81ff">keep</span>
</span></span></code></pre></div><h4 id="alerting-rules">Alerting Rules</h4>
<p>Now we have Prometheus sending alerts to the Kafka Operator, we need to create specific rules for Kafka….</p>
<p>You can find a default example on the <a href="https://github.com/banzaicloud/kafka-operator/blob/0.6.0/config/samples/example-prometheus-alerts.yaml">Github project</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">monitoring.coreos.com/v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">PrometheusRule  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">creationTimestamp</span>: <span style="color:#66d9ef">null</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">prometheus</span>: <span style="color:#ae81ff">k8s  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">role</span>: <span style="color:#ae81ff">alert-rules  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kafka-alerts  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">groups</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">KafkaAlerts  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">rules</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">alert</span>: <span style="color:#ae81ff">BrokerOverLoaded  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">expr</span>: <span style="color:#ae81ff">avg(sum by(brokerId, kafka_cr, namespace) (rate(kafka_network_requestmetrics_requests_total[15m]))) &gt; 500  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">for</span>: <span style="color:#ae81ff">5m  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">severity</span>: <span style="color:#ae81ff">alert  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#e6db74">&#39;broker {{ $labels.brokerId }} overloaded (current value is: {{ $value }})&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">summary</span>: <span style="color:#e6db74">&#39;broker overloaded&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">brokerConfigGroup</span>: <span style="color:#e6db74">&#39;default_group&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: <span style="color:#e6db74">&#39;upScale&#39;</span>
</span></span></code></pre></div><p>Let’s break this down :</p>
<ul>
<li>metadata.labels
You need at least the two that are here. the <code>prometheus</code> value should be <strong>the name of your Prometheus server</strong> as described in the <code>prometheus</code> resource. I’m not sure for the <code>role</code>… just keep it :)</li>
<li>spec.rules.annotations
These are “config values” that you are going to pass to the Kafka Operator AlertManager. You need them to tell the Operator <em>HOW</em> to create the new brokers.</li>
</ul>
<p>From the example above, if the alert is triggered, it will send this information to the Operator :</p>
<ul>
<li><code>broker 0 is overloaded (current value is 12)</code> : you will see that in the Operator logs if set to Info log-level</li>
<li><code>command: upScale</code> : this will be treated by the Operator as a direct command to upscale.<br>
The Operator will create a new Broker (pod) which will join the cluster.<br>
It will forward the command to CruiseControl, which will trigger a Rebalance, so the topics/partitions/leaders are spread to the new broker.<br>
Other commands includes “downScale” and “addPVC”. I haven’t test the PVC one yet…</li>
<li><code>brokerConfigGroup: 'default-group'</code> : this is some configuration from the <code>kafkacluster</code> custom resource definition.<br>
In fact you can use most of the config parameter of a BrokerConfig.<br>
(have you read my article on <a href="https://medium.com/@prune998/banzaicloud-kafka-operator-tour-56fca7d6261e">installing Kafka Operator</a> ?)</li>
</ul>
<p>From the example I gave earlier, here’s what we can add to the alert to configure the new broker :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># If brokerConfigGroup is defined it will override scaled broker config  </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># brokerConfigGroup: &#39;default_group&#39;  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">storageClass</span>: <span style="color:#e6db74">&#39;standard&#39;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">mountPath</span>: <span style="color:#e6db74">&#39;/kafkalog&#39;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">diskSize</span>: <span style="color:#e6db74">&#39;2G&#39;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#e6db74">&#39;wurstmeister/kafka:2.12-2.1.0&#39;</span>
</span></span></code></pre></div><p>As a wrap up, here’s my full PrometheusRule for Kafka Operator. Note that the values are testing values… you may (you will) have to tune them :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">monitoring.coreos.com/v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">PrometheusRule  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">creationTimestamp</span>: <span style="color:#66d9ef">null</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">prometheus</span>: <span style="color:#ae81ff">k8s  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">role</span>: <span style="color:#ae81ff">alert-rules  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kafka-alerts  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">groups</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">KafkaAlerts  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">rules</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">alert</span>: <span style="color:#ae81ff">BrokerOverLoaded  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">expr</span>: <span style="color:#ae81ff">avg(sum by(brokerId, kafka_cr, namespace) (rate(kafka_network_requestmetrics_requests_total[15m]))) &gt; 500  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">for</span>: <span style="color:#ae81ff">5m  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">severity</span>: <span style="color:#ae81ff">alert  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#e6db74">&#39;broker {{ $labels.brokerId }} overloaded (current value is: {{ $value }})&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">summary</span>: <span style="color:#e6db74">&#39;broker overloaded&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">brokerConfigGroup</span>: <span style="color:#e6db74">&#39;default_group&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: <span style="color:#e6db74">&#39;upScale&#39;</span>  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">alert</span>: <span style="color:#ae81ff">BrokerUnderReplicated  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">expr</span>: <span style="color:#ae81ff">kafka_server_replicamanager_underreplicatedpartitions &gt; 0  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">for</span>: <span style="color:#ae81ff">5m  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">severity</span>: <span style="color:#ae81ff">alert  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#e6db74">&#39;broker {{ $labels.brokerId }} underreplicated&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">summary</span>: <span style="color:#e6db74">&#39;broker underreplicated&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">brokerConfigGroup</span>: <span style="color:#e6db74">&#39;default_group&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: <span style="color:#e6db74">&#39;upScale&#39;</span>  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">alert</span>: <span style="color:#ae81ff">PartitionCountHigh  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">expr</span>: <span style="color:#ae81ff">max(kafka_server_replicamanager_partitioncount)  by (namespace, kafka_cr) &gt; 800  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">for</span>: <span style="color:#ae81ff">3m  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">severity</span>: <span style="color:#ae81ff">alert  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#e6db74">&#39;broker {{ $labels.brokerId }} has high partition count&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">summary</span>: <span style="color:#e6db74">&#39;high partition count&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">brokerConfigGroup</span>: <span style="color:#e6db74">&#39;default_group&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: <span style="color:#e6db74">&#39;upScale&#39;</span>  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">alert</span>: <span style="color:#ae81ff">PartitionCountLow  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">expr</span>: <span style="color:#ae81ff">min(kafka_server_replicamanager_partitioncount)  by (namespace, kafka_cr) &lt; 50  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">for</span>: <span style="color:#ae81ff">3m  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">severity</span>: <span style="color:#ae81ff">alert  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#e6db74">&#39;broker {{ $labels.brokerId }} has low partition count&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">summary</span>: <span style="color:#e6db74">&#39;low partition count&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">brokerConfigGroup</span>: <span style="color:#e6db74">&#39;default_group&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: <span style="color:#e6db74">&#39;downScale&#39;</span>  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">alert</span>: <span style="color:#ae81ff">RemainingDiskSpaceLow  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">expr</span>: <span style="color:#ae81ff">kubelet_volume_stats_available_bytes{persistentvolumeclaim=~&#34;kafka-.*&#34;} &lt; 1 * 1000 * 1000 * 1000  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">for</span>: <span style="color:#ae81ff">2m  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">severity</span>: <span style="color:#ae81ff">alert  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#e6db74">&#39;broker {{ $labels.brokerId }} has low disk space&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">summary</span>: <span style="color:#e6db74">&#39;low diskspace&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">brokerConfigGroup</span>: <span style="color:#e6db74">&#39;default_group&#39;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: <span style="color:#e6db74">&#39;addPVC&#39;</span>
</span></span></code></pre></div><h3 id="conclusion">Conclusion</h3>
<p>We now know how to use the <em>Prometheus Metrics</em> from <strong>Kafka</strong> to up/downscale our cluster.</p>
<p>Note that this feature can rapidly become a <strong>chaos factor</strong> : during my tests, a manual <em>“rebalance”</em> of the partitions/leaders triggered a downscale of the cluster, which went from 3 nodes to 2. The cluster was then in a “failed” state as I require a minimum of 3 brokers alive.<br>
This situation then triggered two <code>upScale</code> alerts, which grow the cluster from 2 to 4 nodes…</p>
<p>I was live testing so I was able to change the thresholds. The scale situation stopped, but imagine this happen during the night when you’re oncall ?</p>
<p>Because that’s where this situation is going to happen right ?</p>
<p>Happy Kafka/Prometheus config !<br>
Thanks again to the Banzaicloud team for doing all this opensource !</p>
<p><strong>Note</strong> : We discussed the need to block the downscale of a cluster below the count of the minimum cluster size on Slack. There should be a way to set that at some point…</p>
<p><strong>Note 2</strong> : at the moment (Kafka Operator 0.6.1), you will get logs for every alert that is fired by Prometheus… Watch out as you’ll end up with quite some logs… next release should silently drop all alerts not linked to the Kafka cluster.</p>
]]></content>
        </item>
        
        <item>
            <title>BanzaiCloud Kafka Operator tour</title>
            <link>https://piratemakers.ca/posts/2019/10/banzaicloud-kafka-operator-tour/</link>
            <pubDate>Tue, 01 Oct 2019 19:29:00 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2019/10/banzaicloud-kafka-operator-tour/</guid>
            <description>Welcome to the Kafka Operator (Magical) Mystery tour ! I’m sure the Beatles would have rebranded the song if they were still here to see how BanzaiCloud team finally rocked the Kafka Operator world !
They also did a good job of branding it, so I won’t dive into “why this another Kafka Operator is better than the others”. I can assure it is !
Just check :
https://banzaicloud.com/products/kafka-operator/ https://banzaicloud.</description>
            <content type="html"><![CDATA[<p><img src="images/1.png#layoutTextWidth" alt="image"></p>
<h3 id="welcome-to-the-kafka-operator-magical-mystery-tour-">Welcome to the Kafka Operator (Magical) Mystery tour !</h3>
<p>I’m sure the Beatles would have rebranded the song if they were still here to see how BanzaiCloud team finally rocked the Kafka Operator world !</p>
<p>They also did a good job of branding it, so I won’t dive into “why this another Kafka Operator is better than the others”. I can assure it is !<br>
Just check :</p>
<ul>
<li><a href="https://banzaicloud.com/products/kafka-operator/">https://banzaicloud.com/products/kafka-operator/</a></li>
<li><a href="https://banzaicloud.com/blog/kafka-operator/">https://banzaicloud.com/blog/kafka-operator/</a></li>
<li><a href="https://github.com/banzaicloud/kafka-operator">https://github.com/banzaicloud/kafka-operator</a></li>
</ul>
<p>EDIT : also check my other article for <a href="/posts/2019/10/banzaicloud-kafka-operator-and-broker-autoscaling/">Kafka cluster autoscaling</a></p>
<h3 id="overview">Overview</h3>
<p>Few days ago BanzaiCloud released the 0.6.x version of the Operator, with :</p>
<ul>
<li>rolling updates</li>
<li>Topic management</li>
<li>User management</li>
</ul>
<p>I think the operator is now on par with all others in term of features, not counting everything it’s adding to it.</p>
<p>New release, new API, lots of changes… things break during Upgrade :)</p>
<p>I just want to quickly post how to build your config (with example) to help you bootstrap your cluster quickly.</p>
<p>It is also great to get a look at the sample config found in the Git repo : <a href="https://raw.githubusercontent.com/banzaicloud/kafka-operator/master/config/samples/banzaicloud_v1beta1_kafkacluster.yaml">https://raw.githubusercontent.com/banzaicloud/kafka-operator/master/config/samples/banzaicloud_v1beta1_kafkacluster.yaml</a></p>
<p>Note that I’m not part of BanzaiCloud and I don’t get any advantage whatsoever by publishing this post.</p>
<h3 id="kafka-operator">Kafka Operator</h3>
<p><img src="images/2.png#layoutTextWidth" alt="image"></p>
<p>Operator talks to the API server and watch for <code>kafkacluster</code> Resource. It also talks to <a href="https://github.com/linkedin/cruise-control">CruiseControl</a>, a Java application from Linkedin which is <em>“a general-purpose system that continually monitors our clusters and automatically adjusts the resources allocated to them to meet pre-defined performance goals”.</em> Finally it “talks to” Prometheus, watch for alerts and take actions.</p>
<p>BanzaiCloud provides a Helm Chart (as too many others out there), so let’s use it. As I don’t use <code>Tiller</code>, I just use<code>helm template</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/banzaicloud/kafka-operator.git
</span></span><span style="display:flex;"><span>cd kafka-operator
</span></span><span style="display:flex;"><span>helm template charts/kafka-operator <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>--set fullnameOverride<span style="color:#f92672">=</span>kafka <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>--set prometheus.enabled<span style="color:#f92672">=</span>false <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>--set prometheusMetrics.authProxy.enabled<span style="color:#f92672">=</span>false <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>--set operator.image.repository<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt; private repo &gt;/kafka-operator&#34;</span> <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>--set operator.image.tag<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0.6.1&#34;</span> <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>--set prometheus.server.configMapOverrideName<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>--set imagePullSecrets<span style="color:#f92672">={</span>docker-images-registry-secret<span style="color:#f92672">}</span> <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>--namespace tools &gt; charts/kafka-operator/generated.yaml
</span></span><span style="display:flex;"><span>kubectl apply -n tools  charts/kafka-operator/generated.yaml
</span></span></code></pre></div><p>You should have a running kafka operator now. Check using <code>kubectl</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl -n tools get pods  
</span></span><span style="display:flex;"><span>NAME                             READY   STATUS    RESTARTS   AGE  
</span></span><span style="display:flex;"><span>kafka-operator-85b894b8c4-wjmt7  1/1     Running   <span style="color:#ae81ff">0</span>          28m
</span></span></code></pre></div><p><strong>Note</strong> : I wasn’t able to upgrade from 0.5 to 0.6 version. The CRD namespace switched from <a href="http://kafkaclusters.banzaicloud.banzaicloud.io/"><em>kafkaclusters.</em><strong><em>banzaicloud</em></strong><em>.banzaicloud</em>.io</a> to <a href="http://kafkaclusters.kafka.banzaicloud.io/"><em>kafkaclusters.</em><strong><em>kafka</em></strong><em>.banzaicloud.io</em></a>.<br>
Also, when deleting the old deployment I saw my Kafka pods deleted, removing the cluster once and for all.</p>
<p>In theory, it SHOULD have worked… a bit… It should have grow my cluster to a 6 node cluster, sync, and I should have been able to remove the old one.</p>
<p><strong>Note 2 :</strong> There was a bug in 0.6.0 (corrected in 0.6.1, I haven’t tested though) where you <em>HAD</em> to use Kafka Brokers ID starting at 0 (0, 1 and 2 for a 3 node cluster)</p>
<p>My best guess was to destroy everything. If I was on a prod system, I think I would have backuped my data, rebuild a new cluster then re-import the data.#### Destroying everything</p>
<p>Delete your Operator deployment : <code>kubectl -n tools delete deployment kafka-operator</code></p>
<p>This should take care of all the pods, PVC… you may have to manually delete your PVs.</p>
<p>Then delete everything in Zookeeper. This is needed if you change Kafka version or Broker IDs. Do not do this on Production !!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl exec -ti  zk-zookeeper-0 bin/zkCli.sh
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>deleteall /admin  
</span></span><span style="display:flex;"><span>deleteall /brokers  
</span></span><span style="display:flex;"><span>deleteall /cluster  
</span></span><span style="display:flex;"><span>deleteall /config  
</span></span><span style="display:flex;"><span>deleteall /consumers  
</span></span><span style="display:flex;"><span>deleteall /controller_epoch  
</span></span><span style="display:flex;"><span>deleteall /isr_change_notification  
</span></span><span style="display:flex;"><span>deleteall /kafka-manager  
</span></span><span style="display:flex;"><span>deleteall /latest_producer_id_block  
</span></span><span style="display:flex;"><span>deleteall /log_dir_event_notification
</span></span></code></pre></div><h3 id="kafkacluster">KafkaCluster</h3>
<p>The KafkaCluster CRD have changed A LOT from 0.5.x to 0.6.x.<br>
So much that it’s not compatible AT ALL !</p>
<p>I’m not going to point out the changes. Most of you don’t have a 0.5 running, so just start with a 0.6 spec.<br>
I’m going to break down in may parts as it’s quite a huge spec…</p>
<p>This is for a 3 nodes cluster named kf-kafka, using Zookeeper on port 2181 in the same namespace (alerting).</p>
<h4 id="global-spec">Global spec</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">kafka.banzaicloud.io/v1beta1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">KafkaCluster  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">controller-tools.k8s.io</span>: <span style="color:#e6db74">&#34;1.0&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kafka_cr</span>: <span style="color:#ae81ff">kf-kafka  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kf-kafka  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">alerting  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">headlessServiceEnabled</span>: <span style="color:#66d9ef">false</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">zkAddresses</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#34;zk-zookeeper:2181&#34;</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rackAwareness</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;failure-domain.beta.kubernetes.io/region&#34;</span>  
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;failure-domain.beta.kubernetes.io/zone&#34;</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">oneBrokerPerNode</span>: <span style="color:#66d9ef">false</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">clusterImage</span>: <span style="color:#e6db74">&#34;your-own-repo/kafka:2.3.0.7&#34;</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rollingUpgradeConfig</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">failureThreshold</span>: <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p><strong>headlessServiceEnabled</strong> tells to create a headless service for Kafka brokers discovery. This is the “old fashion” way, as other Operators or Helm charts do. It’s a <code>service</code> without any IP, where the DNS is configured to give you all the names of the pods that are part of the service selector.</p>
<p>Ex with my old cluster :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nslookup kf-broker-kafka
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Name:      kf-broker-kafka  
</span></span><span style="display:flex;"><span>Address 1: 10.2.128.124 kf-kafka-1.kf-broker-kafka.alerting.svc.cluster.local  
</span></span><span style="display:flex;"><span>Address 2: 10.2.128.254 kf-kafka-0.kf-broker-kafka.alerting.svc.cluster.local  
</span></span><span style="display:flex;"><span>Address 3: 10.2.129.225 kf-kafka-2.kf-broker-kafka.alerting.svc.cluster.local
</span></span></code></pre></div><p>Setting it to False will not create the Headless Service. You don’t usually need it so set it to <strong>False</strong>.</p>
<p>With the Operator, you will end up with two services :</p>
<ul>
<li><!-- raw HTML omitted -->-all-broker (kf-kafka-all-broker) : a ClusterIP service which point to all your cluster Instances. You can use it to bootstrap your clients.</li>
<li><!-- raw HTML omitted -->-<!-- raw HTML omitted --> (kf-kafka-0, kf-kafka-1, kf-kafka-2) : one service per Broker. This is used internally by Kafka Brokers to talk to each other, or if you want to give the full list of brokers when bootstrapping.
<img src="images/3.png#layoutTextWidth" alt="image"></li>
</ul>
<p><strong>oneBrokerPerNode</strong>, when enabled, will put one broker on each node, NOT MORE. Meaning if you have a 2 node cluster and create a 3 broker Kafka cluster, one of the brokers will <strong>NEVER</strong> be scheduled.</p>
<p>While it’s a good option to set to ensure reliability of the cluster, you may end up with unschedulable brokers, and a broken cluster. It’s sometimes better to have two brokers on the same node instead of a broken cluster… Affinity is also set on the pods by default, so Kubernetes should be able to handle it himself. Keep this option to <strong>False</strong>.</p>
<p><strong>rollingUpgradeConfig</strong> tels how many brokers can be broken at a time… another way of seeing it is “how many brokers I can rolling upgrade in parallel”. Keep it to <strong>1</strong> for a 3 node cluster, and increase it depending on your broker count and replication factor.</p>
<h4 id="brokerconfiggroups">brokerConfigGroups</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  <span style="color:#f92672">brokerConfigGroups</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Specify desired group name (eg., &#39;default_group&#39;)  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">default_group</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># all the brokerConfig settings are available here  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serviceAccountName</span>: <span style="color:#e6db74">&#34;kf-kafka&#34;</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">imagePullSecrets</span>:  
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">docker-images-registry  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kafkaJvmPerfOpts</span>: <span style="color:#e6db74">&#34;-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true -Dsun.net.inetaddr.ttl=60 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=${HOSTNAME} -Dcom.sun.management.jmxremote.rmi.port=9099&#34;</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">storageConfigs</span>:  
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">mountPath</span>: <span style="color:#e6db74">&#34;/kafka-logs&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">pvcSpec</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">accessModes</span>:  
</span></span><span style="display:flex;"><span>              - <span style="color:#ae81ff">ReadWriteOnce  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">storageClassName</span>: <span style="color:#ae81ff">ssd  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">resources</span>:  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">requests</span>:  
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">storage</span>: <span style="color:#ae81ff">30Gi</span>
</span></span></code></pre></div><p>This is a way to configure some Broker config templates that you will use to create your brokers. The broker config (see later) will have precedence on what is defined here. See it as some defaults so your broker definition is smaller :)</p>
<h4 id="brokers">Brokers</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  <span style="color:#f92672">brokers</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">id</span>:  <span style="color:#ae81ff">0</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">brokerConfigGroup</span>: <span style="color:#e6db74">&#34;default_group&#34;</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">brokerConfig</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">resourceRequirements</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">limits</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">memory</span>: <span style="color:#e6db74">&#34;3Gi&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">requests</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cpu</span>: <span style="color:#e6db74">&#34;0.3&#34;</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">memory</span>: <span style="color:#e6db74">&#34;512Mi&#34;</span>  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">id</span>:  <span style="color:#ae81ff">1</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">brokerConfigGroup</span>: <span style="color:#e6db74">&#34;default_group&#34;</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">brokerConfig</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">resourceRequirements</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">limits</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">memory</span>: <span style="color:#e6db74">&#34;3Gi&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">requests</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cpu</span>: <span style="color:#e6db74">&#34;0.3&#34;</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">memory</span>: <span style="color:#e6db74">&#34;512Mi&#34;</span>  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">id</span>:  <span style="color:#ae81ff">2</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">brokerConfigGroup</span>: <span style="color:#e6db74">&#34;default_group&#34;</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">brokerConfig</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">resourceRequirements</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">limits</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">memory</span>: <span style="color:#e6db74">&#34;3Gi&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">requests</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cpu</span>: <span style="color:#e6db74">&#34;0.3&#34;</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">memory</span>: <span style="color:#e6db74">&#34;512Mi&#34;</span>
</span></span></code></pre></div><p>Thanks to the BrokerConfigGroup, this part is really light.<br>
I kept the resources defined in each Broker so I can tune them up… while I see no reasons to have them not being the same for most people…<br>
You can see I did NOT set <code>limits.cpu</code> parameter… this is due to the <a href="https://github.com/kubernetes/kubernetes/issues/67577#issuecomment-534866275">CFS Quota bug</a> that is not patched on Azure, which will Throttle some of your pods even if they don’t use any CPU…</p>
<h4 id="config"><strong>Config</strong></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e">#clusterWideConfig: |  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#  background.threads=2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">readOnlyConfig</span>: <span style="color:#ae81ff">|  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">offsets.topic.replication.factor=2  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">default.replication.factor=2  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">transaction.state.log.min.isr=1  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">log.dirs=/kafka-logs/data  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">delete.topic.enable=true  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">num.partitions=32  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">auto.create.topics.enable=false  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">transaction.state.log.replication.factor=2</span>
</span></span></code></pre></div><p>You now have to set your config parameters in different components. This is due to the Rolling Upgrade feature : the operator needs to know between a change in read-only options (which require a node restart) and user options.<br>
You can read more here : <a href="https://kafka.apache.org/documentation/#dynamicbrokerconfigs">https://kafka.apache.org/documentation/#dynamicbrokerconfigs</a></p>
<h4 id="listeners">Listeners</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">listenersConfig</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">internalListeners</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">type</span>: <span style="color:#e6db74">&#34;plaintext&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;plaintext&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">9092</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">usedForInnerBrokerCommunication</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>Nothing to tell here… you will have a lot more stuff here if you use SSL…</p>
<h4 id="cruisecontrol">CruiseControl</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">cruiseControlConfig</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;solsson/kafka-cruise-control:latest&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">serviceAccountName</span>: <span style="color:#e6db74">&#34;kf-kafka&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">config</span>: <span style="color:#ae81ff">|  </span>
</span></span><span style="display:flex;"><span>...  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">capacityConfig</span>: <span style="color:#ae81ff">|  </span>
</span></span><span style="display:flex;"><span>      {  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;brokerCapacities&#34;</span>:[  
</span></span><span style="display:flex;"><span>          {  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;brokerId&#34;: </span><span style="color:#e6db74">&#34;-1&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;capacity&#34;: </span>{  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;DISK&#34;: </span><span style="color:#e6db74">&#34;200000&#34;</span>,  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;CPU&#34;: </span><span style="color:#e6db74">&#34;100&#34;</span>,  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;NW_IN&#34;: </span><span style="color:#e6db74">&#34;50000&#34;</span>,  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;NW_OUT&#34;: </span><span style="color:#e6db74">&#34;50000&#34;</span>  
</span></span><span style="display:flex;"><span>            },  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;doc&#34;: </span><span style="color:#e6db74">&#34;This is the default capacity. Capacity unit used for disk is in MB, cpu is in percentage, network throughput is in KB.&#34;</span>  
</span></span><span style="display:flex;"><span>          }  
</span></span><span style="display:flex;"><span>        ]  
</span></span><span style="display:flex;"><span>      }  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">clusterConfigs</span>: <span style="color:#ae81ff">|  </span>
</span></span><span style="display:flex;"><span>      {  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;min.insync.replicas&#34;: </span><span style="color:#ae81ff">2</span>  
</span></span><span style="display:flex;"><span>      }
</span></span></code></pre></div><p>Again, not much difficulties here… Define your own Broker Capacities, specifically the DISK parameter if your cluster use a larger disk than the small default, this will help CC (CruiseControl) to build it’s alarms.</p>
<p>the “…” is a LONG list of options… I kept the defaults for now.</p>
<h4 id="monitoring">Monitoring</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  <span style="color:#f92672">monitoringConfig</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># jmxImage describes the used prometheus jmx exporter agent container  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">jmxImage</span>: <span style="color:#e6db74">&#34;banzaicloud/jmx-javaagent:0.12.0&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># pathToJar describes the path to the jar file in the given image  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">pathToJar</span>: <span style="color:#e6db74">&#34;/opt/jmx_exporter/jmx_prometheus_javaagent-0.12.0.jar&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># kafkaJMXExporterConfig describes jmx exporter config for Kafka  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kafkaJMXExporterConfig</span>: <span style="color:#ae81ff">|  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">lowercaseOutputName</span>: <span style="color:#66d9ef">true</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">rules</span>:
</span></span></code></pre></div><p>This is used to add the needed jars and set up the JMX Exporter for Prometheus. Add your own rules or leave the defaults…</p>
<p>Now you should have a perfect Kafka Cluster running !!</p>
<p>You can see my full config <a href="https://gist.github.com/prune998/7976be90e04b9f61a04976860b124c73">here</a>.</p>
<h3 id="kafka-topics">Kafka Topics</h3>
<p>This is a new addition to this Operator. You can now upload some <code>kafkatopic</code> manifests and create / delete topics.</p>
<p><img src="images/4.png#layoutTextWidth" alt="image"></p>
<p>As of 0.6.0 / 0.6.1, this feature use a Kubernates Validating Webhook to ensure the manifest is well formated. For that to work, two other pieces have to be installed in your cluster : Cert-Manager and CAInjecter (both from the Cert-Manager project from JetStack).</p>
<p>Cert-Manager will create an SSL Certificate, and CA-Inject will provide it to the K8s API so it is authorized to call the Kafka Operator Webhook.</p>
<h4 id="cert-manager">Cert-Manager</h4>
<p>To install it, if you don’t already have it, use the Helm Chart !! If you are using an old version, re-install. Ca-Injector is a new addition and needs to be installed. Check with :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get pods -n cert-manager
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME                                       READY   STATUS    RESTARTS   AGE  
</span></span><span style="display:flex;"><span>cert-manager-c76c4dbfd-nvf4v               1/1     Running   <span style="color:#ae81ff">0</span>          20h  
</span></span><span style="display:flex;"><span>cert-manager-cainjector-55f87f5c76-ndhjv   1/1     Running   <span style="color:#ae81ff">0</span>          20h
</span></span></code></pre></div><p>If you need to install :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm fetch --untar --untardir . jetstack/cert-manager
</span></span><span style="display:flex;"><span>helm template  
</span></span><span style="display:flex;"><span>        --name cert-manager  
</span></span><span style="display:flex;"><span>        --set global.imagePullSecrets<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>.name<span style="color:#f92672">=</span>docker-images-registry  
</span></span><span style="display:flex;"><span>        --set webhook.enabled<span style="color:#f92672">=</span>false  
</span></span><span style="display:flex;"><span>        --set image.repository<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;private repo&gt;/certmanager&#34;</span>  
</span></span><span style="display:flex;"><span>        --set image.tag<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;v0.10.1&#34;</span>  
</span></span><span style="display:flex;"><span>        --set cainjector.image.repository<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;private repo&gt;/certmanager-cainjector&#34;</span>  
</span></span><span style="display:flex;"><span>        --set cainjector.image.tag<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;v0.10.1&#34;</span>  
</span></span><span style="display:flex;"><span>        --set cainjector.enabled<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;true&#34;</span>  
</span></span><span style="display:flex;"><span>        --namespace cert-manager  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;./cert-manager&#39;</span> &gt; certmanager-generated.yaml
</span></span><span style="display:flex;"><span>kubectl apply -n cert-manager -f certmanager-generated.yaml
</span></span></code></pre></div><p>It’s as simple as that. Of course, you may have tons of problems with Helm, as I usually do… I call it “Hellm”… I’m a hater, or, right :)</p>
<p>You can check the Validating Webhook to ensure it was provided with a valid Certificate :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get validatingwebhookconfiguration kafka-operator-validating-webhook -o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{[&#39;webhooks&#39;][0][&#39;clientConfig&#39;][&#39;caBundle&#39;]}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>LS0tLS1VeryLongStringWithBase64BitOfTheSSLCertificateWhichIRemovedSoItWontMakeThisArticleEvenHardToReadLS0tCg<span style="color:#f92672">==</span>
</span></span></code></pre></div><h4 id="kafkatopic">KafkaTopic</h4>
<p>The final part in the Cluster creations, the topic(s) !</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---  
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">kafka.banzaicloud.io/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">KafkaTopic  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">compactedtopic  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">alerting  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">clusterRef</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kf-kafka  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">compactedtopic  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">partitions</span>: <span style="color:#ae81ff">8</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicationFactor</span>: <span style="color:#ae81ff">2</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">config</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">segment.bytes</span>: <span style="color:#e6db74">&#34;104857600&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">delete.retention.ms</span>: <span style="color:#e6db74">&#34;8640000&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">retention.ms</span>: <span style="color:#e6db74">&#34;259200000&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cleanup.policy</span>: <span style="color:#e6db74">&#34;compact&#34;</span>  
</span></span><span style="display:flex;"><span>---  
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">kafka.banzaicloud.io/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">KafkaTopic  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">regulartopic  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">alerting  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">clusterRef</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kf-kafka  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">regulartopic  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">partitions</span>: <span style="color:#ae81ff">128</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicationFactor</span>: <span style="color:#ae81ff">2</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">config</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">segment.bytes</span>: <span style="color:#e6db74">&#34;104857600&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">delete.retention.ms</span>: <span style="color:#e6db74">&#34;864000&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">retention.ms</span>: <span style="color:#e6db74">&#34;259200000&#34;</span>
</span></span></code></pre></div><p>What you see here is the YAML for 2 topics, one compacted, the other one regular. Topics will be created in the cluster <code>kf-kafka</code>.</p>
<p>It’s pretty straightforward… just apply it…</p>
<p><strong>Note</strong> : For now, the Operator can create a topic and delete a topic it manages. If you create a topic then delete it “by hand”, the Operator will log some errors about it.<br>
While this Topic Management is quite new, everything is not yet decided or implemented. I’ve created a PR to track this issue : <a href="https://github.com/banzaicloud/kafka-operator/issues/158">https://github.com/banzaicloud/kafka-operator/issues/158</a></p>
<h3 id="conclusion">Conclusion</h3>
<p>This is a long and ugly post, with almost no images, about the BanzaiCloud Kafka Operator. With that you should be able to start using it without the pitfalls I was trapped in.<br>
More docs and more features are coming so I don’t know for how long this post will be relevant. I’ll try to keep up :)</p>
<p>Remember this Operator is still new, at 0.x versions, and that the API may change quite a bit until 1.0 is released. Except that, I’m pretty confident on the stability and I’m about to deploy it everywhere up to production (to replace Strimzi and Statefulsets)!</p>
<p>I want to thank the people on the Slack Channel who helped me through this, Balint and Tinyzimmer (who also added the topic/user management).<br>
I also thank BanzaiCloud team for their work, and, oh, I used some of your pictures from your blog/website to illustrate… hope you don’t mind ?</p>
]]></content>
        </item>
        
        <item>
            <title>Using Jsonnet does not have to be complex</title>
            <link>https://piratemakers.ca/posts/2019/06/using-jsonnet-does-not-have-to-be-complex/</link>
            <pubDate>Tue, 04 Jun 2019 19:25:40 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2019/06/using-jsonnet-does-not-have-to-be-complex/</guid>
            <description>In this Post I’ll try to explain what I’ve set up to generate Kubernetes manifests for all my Micro-Services using Jsonnet.
Kubernetes / Jsonnet The obvious gain you have when using Jsonnet is that you template JSON files instead of YAML.
While YAML is easier to read by humans, it is far less computational friendly. There’s a must read about that : Lee Briggs post about “Why the fuck are we templating YAML”</description>
            <content type="html"><![CDATA[<p><img src="images/1.png#layoutTextWidth" alt="image"></p>
<p>In this Post I’ll try to explain what I’ve set up to generate Kubernetes manifests for all my Micro-Services using <a href="https://jsonnet.org/">Jsonnet</a>.</p>
<h3 id="kubernetes--jsonnet">Kubernetes / Jsonnet</h3>
<p>The obvious gain you have when using Jsonnet is that you template JSON files instead of YAML.<br>
While YAML is easier to read by humans, it is far less computational friendly. There’s a must read about that : <a href="http://leebriggs.co.uk/blog/2019/02/07/why-are-we-templating-yaml.html">Lee Briggs post about “Why the fuck are we templating YAML”</a></p>
<p>Jsonnet is just “yet another templating tool” so you can use it to template your Kubernetes manifests. Many tools have been made to ease that, including (and not limited) to :</p>
<ul>
<li><a href="https://ksonnet.io/">Ksonnet</a>, which adds specific Kubenetes functions on top of Jsonnet</li>
<li><a href="https://kr8.rocks/">Kr8</a></li>
<li>more… check <a href="https://blog.argoproj.io/the-state-of-kubernetes-configuration-management-d8b06c1205">this article about Kubernetes deployment templating</a></li>
</ul>
<p>While the team behind Ksonnet stepped back, the <a href="https://github.com/ksonnet/ksonnet-lib">Ksonnet lib</a> is still maintained. It’s the only things that matters to us.<br>
Ksonnet was supposed to be a tool that takes care of everything from templating to variable managements, but was really hard to apprehend.</p>
<p>I decided to just do plain Jsonnet, with the addition of the Bitnami lib for Kubernetes.</p>
<p><a href="https://jsonnet.org/">Jsonnet</a> is (was) a C++ project, which you can download/build/install… It was lately ported to Go (Golang), and it’s now the official build, the one where they will port new features and tuning first (according to comments in some issues).<br>
From my own experience with my small templates, using the Go version shorted the build time to 1:45 to nearly 25 seconds. So, go Go :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>go get github.com/google/go-jsonnet/cmd/jsonnet  
</span></span><span style="display:flex;"><span>$GOPATH/bin/jsonnet --version0
</span></span></code></pre></div><h3 id="starting-point">Starting point</h3>
<p>We are actually using a Mono-Repo to hold all our microservices, written in Go.<br>
Because of that I decided to store the Jsonnet templates inside the same repo, and ensure the Dev team manage them when they change the commandline or options of the micro-services.</p>
<p>Here is how it’s done :</p>
<p><img src="images/2.png#layoutTextWidth" alt="image"></p>
<p>Let’s dive in and re-create all this :</p>
<p><code>jsonnet</code> directory holds all the Jsonnet stuff. Inside it, we have one directory for each application (micro-service) that is managed by Jsonnet. Let’s pretend we have a Helloworld application :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir -p jsonnet/helloworld  
</span></span><span style="display:flex;"><span>cd jsonnet
</span></span></code></pre></div><h3 id="defaults">Defaults</h3>
<p>default-env.jsonnet contains some default global variables that apply to all apps. We have to define here ALL the variables that could be used inside our generic templates.<br>
Later, those variables will be used as constants.<br>
Don’t forget it’s a JSON file :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;app&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;commitId&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;namespace&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;repoUrl&#34;</span>: <span style="color:#e6db74">&#34;your.docker.repo:4567&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;labels&#34;</span>: {  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;appgroup&#34;</span>: <span style="color:#e6db74">&#34;mycompany&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;metrics&#34;</span>: <span style="color:#e6db74">&#34;true&#34;</span>,  
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;command&#34;</span>: [],  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;args&#34;</span>: [],  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;env&#34;</span>: {  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;LOGLEVEL&#34;</span>: <span style="color:#e6db74">&#34;WARN&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;LOGLEVELDEV&#34;</span>: <span style="color:#e6db74">&#34;DEBUG&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;LOGLEVELINTEGRATION&#34;</span>: <span style="color:#e6db74">&#34;INFO&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;HTTPPORT&#34;</span>: <span style="color:#e6db74">&#34;1080&#34;</span>,  
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;kubeconfig&#34;</span>: {  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;replicas&#34;</span>: <span style="color:#ae81ff">1</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;mem_limit&#34;</span>: <span style="color:#e6db74">&#34;250Mi&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;mem_request&#34;</span>: <span style="color:#e6db74">&#34;100Mi&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;cpu_limit&#34;</span>: <span style="color:#e6db74">&#34;0.01&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;cpu_request&#34;</span>: <span style="color:#e6db74">&#34;0.1&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;istio&#34;</span>: <span style="color:#66d9ef">false</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;readOnlyRootFilesystem&#34;</span>: <span style="color:#66d9ef">true</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;liveness&#34;</span>: <span style="color:#66d9ef">true</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;readiness&#34;</span>: <span style="color:#66d9ef">true</span>,  
</span></span><span style="display:flex;"><span>  },  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;volumeMounts&#34;</span>: {},  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;volumes&#34;</span>: {},
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;ports&#34;</span>: {  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;http&#34;</span>: {  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;containerPort&#34;</span>: <span style="color:#ae81ff">1080</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;protocol&#34;</span>: <span style="color:#e6db74">&#34;TCP&#34;</span>,  
</span></span><span style="display:flex;"><span>    },  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;grpc&#34;</span>: {  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;containerPort&#34;</span>: <span style="color:#ae81ff">1081</span>,  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;protocol&#34;</span>: <span style="color:#e6db74">&#34;TCP&#34;</span>,  
</span></span><span style="display:flex;"><span>    }  
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="templates">Templates</h3>
<p>Now we have our Generic Templates, for Kubernetes Deployments and Services.<br>
It uses the kube.libsonnet</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">kube</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">import</span> <span style="color:#e6db74">&#34;kube.libsonnet&#34;</span><span style="color:#960050;background-color:#1e0010">;</span>
</span></span><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">config::</span> <span style="color:#960050;background-color:#1e0010">error</span> <span style="color:#f92672">&#34;this file assumes a config variable&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">labels+::</span> <span style="color:#960050;background-color:#1e0010">{</span>} <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#960050;background-color:#1e0010">$.config.labels,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">deployment:</span> <span style="color:#960050;background-color:#1e0010">kube.Deployment(</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">labels+::</span> {} <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#960050;background-color:#1e0010">$.config.labels,</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">metadata+:</span> {  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">labels+:</span> <span style="color:#960050;background-color:#1e0010">$.labels,</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">namespace::</span> <span style="color:#960050;background-color:#1e0010">$.config.namespace,</span>  
</span></span><span style="display:flex;"><span>    }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">spec+:</span> {  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">replicas:</span> <span style="color:#960050;background-color:#1e0010">2,</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">template+:</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">spec+:</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">volumes_+:</span> <span style="color:#960050;background-color:#1e0010">$.config.volumes,</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">containers_+:</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">default:</span> <span style="color:#960050;background-color:#1e0010">kube.Container($.config.app)</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">image:</span> <span style="color:#960050;background-color:#1e0010">$.config.image_path</span> <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#f92672">&#34;:&#34;</span> <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#960050;background-color:#1e0010">$.config.commitId</span>,  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">resources:</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">requests:</span> <span style="color:#960050;background-color:#1e0010">{</span>   
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">cpu:</span> <span style="color:#960050;background-color:#1e0010">$.config.kubeconfig.cpu_request,</span>  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">memory:</span> <span style="color:#960050;background-color:#1e0010">$.config.kubeconfig.mem_request</span>  
</span></span><span style="display:flex;"><span>            }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">limits:</span> {  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">cpu:</span> <span style="color:#960050;background-color:#1e0010">$.config.kubeconfig.cpu_limit,</span>  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">memory:</span> <span style="color:#960050;background-color:#1e0010">$.config.kubeconfig.mem_limit</span>  
</span></span><span style="display:flex;"><span>            }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">},</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">livenessProbe:</span> <span style="color:#960050;background-color:#1e0010">if</span> <span style="color:#960050;background-color:#1e0010">$.config.kubeconfig.liveness</span> <span style="color:#960050;background-color:#1e0010">then</span> {  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">httpGet:{</span>  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">path:</span> <span style="color:#f92672">&#34;/healthz&#34;</span>,  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">port:</span> <span style="color:#f92672">&#34;http&#34;</span>,  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">scheme:</span> <span style="color:#f92672">&#34;HTTP&#34;</span>  
</span></span><span style="display:flex;"><span>            }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">initialDelaySeconds:</span> <span style="color:#ae81ff">3</span><span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">periodSeconds:</span> <span style="color:#ae81ff">3</span><span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">},</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">readinessProbe:</span> <span style="color:#960050;background-color:#1e0010">if</span> <span style="color:#960050;background-color:#1e0010">$.config.kubeconfig.readiness</span> <span style="color:#960050;background-color:#1e0010">then</span> {  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">httpGet:{</span>  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">path:</span> <span style="color:#f92672">&#34;/ready&#34;</span>,  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">port:</span> <span style="color:#f92672">&#34;http&#34;</span>,  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">scheme:</span> <span style="color:#f92672">&#34;HTTP&#34;</span>  
</span></span><span style="display:flex;"><span>            }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">initialDelaySeconds:</span> <span style="color:#ae81ff">3</span><span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">periodSeconds:</span> <span style="color:#ae81ff">3</span><span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">}</span> <span style="color:#960050;background-color:#1e0010">else</span> <span style="color:#960050;background-color:#1e0010">if</span> <span style="color:#960050;background-color:#1e0010">$.config.kubeconfig.liveness</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">then</span>{  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">httpGet:{</span>  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">path:</span> <span style="color:#f92672">&#34;/healthz&#34;</span>,  
</span></span><span style="display:flex;"><span>              <span style="color:#960050;background-color:#1e0010">port:</span> <span style="color:#f92672">&#34;http&#34;</span>  
</span></span><span style="display:flex;"><span>            }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">initialDelaySeconds:</span> <span style="color:#ae81ff">3</span><span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">periodSeconds:</span> <span style="color:#ae81ff">3</span><span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">},</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">args:</span> <span style="color:#960050;background-color:#1e0010">$.config.args,</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">command:</span> <span style="color:#960050;background-color:#1e0010">$.config.command,</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">env_:</span> <span style="color:#960050;background-color:#1e0010">$.config.env,</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">ports_+:</span> <span style="color:#960050;background-color:#1e0010">$.config.ports,</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#960050;background-color:#1e0010">volumeMounts_+:</span> <span style="color:#960050;background-color:#1e0010">$.config.volumeMounts,</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">}}</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">}}</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">}</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">}}</span>
</span></span></code></pre></div><p>All this is quite like a regular deployment, in JSON, with some $.variable replacement.</p>
<p>Services are not really different :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">kube</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">import</span> <span style="color:#e6db74">&#34;kube.libsonnet&#34;</span><span style="color:#960050;background-color:#1e0010">;</span>
</span></span><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">config::</span> <span style="color:#960050;background-color:#1e0010">error</span> <span style="color:#f92672">&#34;this file assumes a config variable&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">dep::</span> <span style="color:#960050;background-color:#1e0010">error</span> <span style="color:#f92672">&#34;this file assumes a deployment variable&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">portName::</span> <span style="color:#f92672">&#34;http&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">labels+::</span> <span style="color:#960050;background-color:#1e0010">{</span>} <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#960050;background-color:#1e0010">$.config.labels,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// set the Service name to the app name when it&#39;s the GRPC port, else, add the port name  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">serviceName</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">if</span>  <span style="color:#960050;background-color:#1e0010">$.portName</span> <span style="color:#960050;background-color:#1e0010">==</span> <span style="color:#e6db74">&#34;grpc&#34;</span> <span style="color:#960050;background-color:#1e0010">then</span> <span style="color:#960050;background-color:#1e0010">$.config.app</span> <span style="color:#960050;background-color:#1e0010">else</span> <span style="color:#960050;background-color:#1e0010">$.config.app</span> <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#960050;background-color:#1e0010">$.portName,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// set the service type to enable external acces in minikube  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">serviceType</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">if</span> <span style="color:#960050;background-color:#1e0010">$.config.environment</span> <span style="color:#960050;background-color:#1e0010">==</span> <span style="color:#e6db74">&#34;minikube&#34;</span> <span style="color:#960050;background-color:#1e0010">then</span> <span style="color:#e6db74">&#34;NodePort&#34;</span> <span style="color:#960050;background-color:#1e0010">else</span> <span style="color:#e6db74">&#34;ClusterIP&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">service:</span> <span style="color:#960050;background-color:#1e0010">kube.Service(serviceName)</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">metadata+:</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">labels+:</span> <span style="color:#960050;background-color:#1e0010">$.labels,</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">namespace::</span> <span style="color:#960050;background-color:#1e0010">$.config.namespace,</span>  
</span></span><span style="display:flex;"><span>    }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">target_pod:</span> <span style="color:#960050;background-color:#1e0010">$.dep.deployment.spec.template,</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">spec:</span> {  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">ports:</span> <span style="color:#960050;background-color:#1e0010">[</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">name:</span> <span style="color:#960050;background-color:#1e0010">$.portName,</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">port:</span> <span style="color:#960050;background-color:#1e0010">$.config.ports[$.portName].containerPort,</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">targetPort:</span> <span style="color:#960050;background-color:#1e0010">$.config.ports[$.portName].containerPort,</span>  
</span></span><span style="display:flex;"><span>        }  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">],</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">selector:</span> {  
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">app:</span> <span style="color:#960050;background-color:#1e0010">$.config.app,</span>  
</span></span><span style="display:flex;"><span>      }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">type:</span> <span style="color:#960050;background-color:#1e0010">serviceType,</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">},</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">},</span>  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div><h3 id="libsonnet">LibSonnet</h3>
<p>This files comes from the Bitnami Labs, you can download it from <a href="https://github.com/bitnami-labs/kube-libsonnet/blob/master/kube.libsonnet">https://github.com/bitnami-labs/kube-libsonnet/blob/master/kube.libsonnet</a></p>
<h3 id="applications">Applications</h3>
<p>Now let’s dive in the specific files for each applications.
<code>cd helloworld</code></p>
<h4 id="defaultjsonnet">default.jsonnet</h4>
<p>This file holds the variables that are global to all environments. For example, the application “helloworld” will have the same same whether you deploy in Dev or in Prod…</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">constant</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">import</span> <span style="color:#f92672">&#34;../default-env.jsonnet&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">kubeconfig:</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">replicas:</span> <span style="color:#960050;background-color:#1e0010">1,</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">mem_limit:</span> <span style="color:#f92672">&#34;400Mi&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">mem_request:</span> <span style="color:#f92672">&#34;100Mi&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">cpu_limit:</span> <span style="color:#960050;background-color:#1e0010">1,</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">cpu_request:</span> <span style="color:#f92672">&#34;10m&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">istio:</span> <span style="color:#f92672">&#34;true&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">readOnlyRootFilesystem:</span> <span style="color:#960050;background-color:#1e0010">true,</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">liveness:</span> <span style="color:#960050;background-color:#1e0010">true,</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">readiness:</span> <span style="color:#960050;background-color:#1e0010">true,</span>  
</span></span><span style="display:flex;"><span>  }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">labels:</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;main_path&#34;</span>: <span style="color:#e6db74">&#34;true&#34;</span>,  
</span></span><span style="display:flex;"><span>  }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">affinity:</span> {}<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">env:</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">HTTPPORT:</span> <span style="color:#960050;background-color:#1e0010">constant.env.HTTPPORT,</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">LOGLEVEL:</span> <span style="color:#960050;background-color:#1e0010">constant.env.LOGLEVEL,</span>  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">TOKENPRIVKEY</span> <span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">secretKeyRef</span> <span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">name:</span> <span style="color:#f92672">&#34;helloword-keys&#34;</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">key:</span> <span style="color:#f92672">&#34;private_key&#34;</span>  
</span></span><span style="display:flex;"><span>      }<span style="color:#960050;background-color:#1e0010">},</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">}</span>  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div><p>Here we create a constant variable which holds some values that we consider constants. Those values comes from the <strong>default-env.jsonnet</strong> file we created earlier.<br>
For example, after this step, <strong>env.LOGLEVEL</strong> is set to the default <strong>LOGLEVEL</strong>, which is <em>WARN</em>.</p>
<h4 id="devjsonnet">dev.jsonnet</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">default</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">import</span> <span style="color:#f92672">&#34;./default.jsonnet&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">constant</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">import</span> <span style="color:#f92672">&#34;../default-env.jsonnet&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">environment:</span> <span style="color:#f92672">&#34;dev&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">kubeconfig+:</span> <span style="color:#960050;background-color:#1e0010">default.kubeconfig</span> <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>  }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">labels+:</span> <span style="color:#960050;background-color:#1e0010">default.labels</span> <span style="color:#960050;background-color:#1e0010">+</span> {  
</span></span><span style="display:flex;"><span>  }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">env+:</span> <span style="color:#960050;background-color:#1e0010">default.env</span> <span style="color:#960050;background-color:#1e0010">+</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">LOGLEVEL:</span> <span style="color:#960050;background-color:#1e0010">constant.env.LOGLEVELDEV,</span>  
</span></span><span style="display:flex;"><span>  }  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div><p>This is where funny stuff happens</p>
<p>first we “import” the defaut files from above and assign it to the <strong>default</strong> variable and we import the global default-env.jsonner, stored as <strong>constant</strong> variables.<br>
Then we overload the <strong>kubeconfig</strong> and <strong>labels</strong> variables (with nothing at this time).<br>
Next the <strong>env</strong> variable is also overloaded with values from the <strong>default</strong> variable and we set the LOGLEVEL to a constant, <strong>LOGLEVELDEV</strong>.</p>
<h4 id="integrationjsonnet">integration.jsonnet</h4>
<p>The prod file is not much different, except it sets few things differently :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">default</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">import</span> <span style="color:#f92672">&#34;./default.jsonnet&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">constant</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">import</span> <span style="color:#f92672">&#34;../default-env.jsonnet&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">environment:</span> <span style="color:#f92672">&#34;integration&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">kubeconfig+:</span> <span style="color:#960050;background-color:#1e0010">default.kubeconfig</span> <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">replicas:</span> <span style="color:#960050;background-color:#1e0010">10,</span>  
</span></span><span style="display:flex;"><span>  }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">labels+:</span> <span style="color:#960050;background-color:#1e0010">default.labels</span> <span style="color:#960050;background-color:#1e0010">+</span> {  
</span></span><span style="display:flex;"><span>  }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">env+:</span> <span style="color:#960050;background-color:#1e0010">default.env</span> <span style="color:#960050;background-color:#1e0010">+</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">LOGLEVEL:</span> <span style="color:#960050;background-color:#1e0010">constant.env.LOGLEVELINTEGRATION,</span>  
</span></span><span style="display:flex;"><span>  }  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div><p>Creating the manifests from this file will scale the deployment to 10 replicas and set the application logs to the <em>INFO</em> level (LOGLEVELINTEGRATION: “INFO” from default-env.jsonnet)</p>
<h4 id="templatejsonnet">template.jsonnet</h4>
<p>This is where everything gets mashed ups to define which manifests we need for this specific application.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">config</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">import</span> <span style="color:#e6db74">&#34;../default-env.jsonnet&#34;</span><span style="color:#960050;background-color:#1e0010">;</span>  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">kube</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">import</span> <span style="color:#e6db74">&#34;../kube.libsonnet&#34;</span><span style="color:#960050;background-color:#1e0010">;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">environmentVars</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">std.extVar(&#39;env&#39;);</span>  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">commitId</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">std.extVar(&#39;commit&#39;);</span>  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">namespace</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">std.extVar(&#39;namespace&#39;);</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">localApp</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">config</span> <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#960050;background-color:#1e0010">environmentVars</span> <span style="color:#960050;background-color:#1e0010">+</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">app:</span> <span style="color:#f92672">&#34;helloworld&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">commitId:</span> <span style="color:#960050;background-color:#1e0010">commitId,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">namespace:</span> <span style="color:#960050;background-color:#1e0010">if</span> <span style="color:#960050;background-color:#1e0010">namespace</span> <span style="color:#960050;background-color:#1e0010">!=</span> <span style="color:#f92672">&#34;&#34;</span> <span style="color:#960050;background-color:#1e0010">then</span> <span style="color:#960050;background-color:#1e0010">namespace</span> <span style="color:#960050;background-color:#1e0010">else</span> <span style="color:#66d9ef">null</span>,         <span style="color:#75715e">//Namespace is not used in templates for now  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#960050;background-color:#1e0010">project:</span> <span style="color:#f92672">&#34;helloworld&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">group:</span> <span style="color:#f92672">&#34;servers&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// computed vars  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#960050;background-color:#1e0010">deployment_name:</span> <span style="color:#f92672">&#34;%s&#34;</span> <span style="color:#960050;background-color:#1e0010">%</span> [<span style="color:#960050;background-color:#1e0010">self.app</span>],  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">repoPath:</span> <span style="color:#f92672">&#34;%s/%s&#34;</span><span style="color:#960050;background-color:#1e0010">%</span> [<span style="color:#960050;background-color:#1e0010">self.group</span>,<span style="color:#960050;background-color:#1e0010">self.project</span>],  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">image_path:</span> <span style="color:#960050;background-color:#1e0010">if</span> <span style="color:#960050;background-color:#1e0010">environmentVars.environment</span> <span style="color:#960050;background-color:#1e0010">!=</span> <span style="color:#f92672">&#34;minikube&#34;</span> <span style="color:#960050;background-color:#1e0010">then</span> <span style="color:#e6db74">&#34;%s/%s/%s/%s&#34;</span> <span style="color:#960050;background-color:#1e0010">%</span> [<span style="color:#960050;background-color:#1e0010">self.repoUrl</span>, <span style="color:#960050;background-color:#1e0010">self.repoPath</span>, <span style="color:#960050;background-color:#1e0010">self.appGroup</span>, <span style="color:#960050;background-color:#1e0010">self.app</span>] <span style="color:#960050;background-color:#1e0010">else</span> <span style="color:#e6db74">&#34;%s/%s&#34;</span> <span style="color:#960050;background-color:#1e0010">%</span> [<span style="color:#960050;background-color:#1e0010">self.appGroup</span>, <span style="color:#960050;background-color:#1e0010">self.app</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// merge env and labels !!! don&#39;t remove  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#960050;background-color:#1e0010">env:</span> <span style="color:#960050;background-color:#1e0010">environmentVars.env,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">labels+:</span> <span style="color:#960050;background-color:#1e0010">config.labels</span> <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#960050;background-color:#1e0010">environmentVars.labels</span> <span style="color:#960050;background-color:#1e0010">+</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;app&#34;</span>: <span style="color:#960050;background-color:#1e0010">$.app</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;group&#34;</span>: <span style="color:#960050;background-color:#1e0010">$.group</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;project&#34;</span>: <span style="color:#960050;background-color:#1e0010">$.project</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;commit&#34;</span>: <span style="color:#960050;background-color:#1e0010">$.commitId</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#960050;background-color:#1e0010">$.commitId</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;track&#34;</span>: <span style="color:#960050;background-color:#1e0010">$.namespace</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;environment&#34;</span>: <span style="color:#960050;background-color:#1e0010">$.environment</span>  
</span></span><span style="display:flex;"><span>  }<span style="color:#960050;background-color:#1e0010">,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">ports:</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">http:</span> <span style="color:#960050;background-color:#1e0010">{</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">containerPort:</span> <span style="color:#960050;background-color:#1e0010">std.parseInt($.env.HTTPPORT),</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">protocol:</span> <span style="color:#f92672">&#34;TCP&#34;</span>  
</span></span><span style="display:flex;"><span>    }  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">},</span>  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">};</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// List of templates to generate  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">serviceHttp</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">(import</span> <span style="color:#e6db74">&#34;../generic-service.jsonnet&#34;</span><span style="color:#960050;background-color:#1e0010">)</span> <span style="color:#960050;background-color:#1e0010">+</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">config:</span> <span style="color:#960050;background-color:#1e0010">localApp,</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">portName:</span> <span style="color:#f92672">&#34;http&#34;</span>  
</span></span><span style="display:flex;"><span>}<span style="color:#960050;background-color:#1e0010">;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">deployment</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">(import</span> <span style="color:#e6db74">&#34;../generic-deployment.jsonnet&#34;</span><span style="color:#960050;background-color:#1e0010">)</span> <span style="color:#960050;background-color:#1e0010">+</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">config:</span> <span style="color:#960050;background-color:#1e0010">localApp,</span>  
</span></span><span style="display:flex;"><span>}<span style="color:#960050;background-color:#1e0010">;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// final list of all manifests  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">all</span> <span style="color:#960050;background-color:#1e0010">=</span> [<span style="color:#960050;background-color:#1e0010">deployment.deployment</span>, <span style="color:#960050;background-color:#1e0010">serviceHttp.service</span>]<span style="color:#960050;background-color:#1e0010">;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// generate a K8s list  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">apiVersion:</span> <span style="color:#f92672">&#34;v1&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">kind:</span> <span style="color:#f92672">&#34;List&#34;</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">items:</span> <span style="color:#960050;background-color:#1e0010">all,</span>  
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here we use some <em>std.extVar(‘’)</em> expressions. This tells Jsonnet that this value have to come from the command line. This is what we want : a way to define some variables at the time we generate the manifest.</p>
<p>Then we create new variables with concatenated data.</p>
<p>finally, we import the <em>generic-*.jsonnet</em> files, which will create the manifests and store the result in variables.</p>
<p>The last part is to put all those variables in a <em>JSON List</em> manifest.</p>
<p>Note that there may be some smarter ways to do this. I’m not a Jsonnet expert, and sometimes there are many ways of doing things. <a href="https://github.com/coreos/kube-prometheus">Prometheus-Operator</a> Jsonnet is one of the best, and hardest, I’ve seen. It makes a huge usage of Mixins. That may be something I’ll use in the next iteration.</p>
<p>Back to our files here.</p>
<p>So we’re creating a <strong>serviceHttp</strong> that is using the <em>../generic-service.jsonnet</em> file, and a <strong>deployment</strong> using the <em>../generic-deployment.jsonnet</em></p>
<h3 id="usage">Usage</h3>
<p>So, how do you generate your helloworld manifest ?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd jsonnet/helloworld
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>jsonnet --ext-code-file env<span style="color:#f92672">=</span>dev.jsonnet <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        --ext-str commit<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>git describe  --always --tags --long --abbrev<span style="color:#f92672">=</span>8<span style="color:#66d9ef">)</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        --ext-str namespace<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> template.jsonnet
</span></span></code></pre></div><ul>
<li><code>ext-code-file</code> is the file to load as the environment file and is stores into the variable env</li>
<li><code>ext-str</code> allows to set a variable from the command line</li>
</ul>
<p>the cool this is that this command does NOT depend on the application you’re trying to build. Just <em>cd ../app-2</em> and use the same command to build your template.</p>
<h3 id="customization">Customization</h3>
<p>Let’s say you want a GRPC port along your HTTP port for the Helloworld application ?</p>
<p>Let’s change the jsonnet/helloworld/template.jsonnet file :</p>
<ul>
<li>
<p>add the code to marshal the generic-service.jsonnet again, with a different port name (add)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">serviceGrpc</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">(import</span> <span style="color:#e6db74">&#34;../generic-service.jsonnet&#34;</span><span style="color:#960050;background-color:#1e0010">)</span> <span style="color:#960050;background-color:#1e0010">+</span> {  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">config:</span> <span style="color:#960050;background-color:#1e0010">localApp,</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">portName:</span> <span style="color:#f92672">&#34;grpc&#34;</span>  
</span></span><span style="display:flex;"><span>    }<span style="color:#960050;background-color:#1e0010">;</span>
</span></span></code></pre></div></li>
<li>
<p>add this now port to the list of things you want to dump (replace old line):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#75715e">// final list of all manifests
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#960050;background-color:#1e0010">local</span> <span style="color:#960050;background-color:#1e0010">all</span> <span style="color:#960050;background-color:#1e0010">=</span> [<span style="color:#960050;background-color:#1e0010">deployment.deployment</span>, <span style="color:#960050;background-color:#1e0010">serviceGrpc.service</span>, <span style="color:#960050;background-color:#1e0010">serviceHttp.service</span>]<span style="color:#960050;background-color:#1e0010">;</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>I think that whatever I do/say, Jsonnet will always be complicated. I’ve been doing a lot of Go Templates and Jinja2 (Ansible), and, sadly, yes, Jsonnet is less interesting to read.</p>
<p>But when it comes to Kubernetes, where the alternatives are Helm and Kustomize, you quickly understant that Jsonnet have tons of benefits.</p>
<p>I hope you’ll give a try to Jsonnet and won’t blame me for pushing you about it :)</p>
]]></content>
        </item>
        
        <item>
            <title>Micro-Services deployment as Snapshots</title>
            <link>https://piratemakers.ca/posts/2019/06/micro-services-deployment-as-snapshots/</link>
            <pubDate>Tue, 04 Jun 2019 15:28:58 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2019/06/micro-services-deployment-as-snapshots/</guid>
            <description>In this article you’ll learn how we bundle our Micro-Services in Snapshots, targeting deployment in Kubernetes.
Micro-Services Now we have cut our old monolith into a lot of small micro-services, we need to deploy them.
You think, well, your CI build the micro-service when someone commit a change, and your CD deploy it.
Yeah.
When your project start growing, you end up with a lot of micro-services. If you’re lucky and smart enough, your services API will not change, AT ALL, and all your micro-services are back and forth compatible with each others.</description>
            <content type="html"><![CDATA[<p>In this article you’ll learn how we bundle our Micro-Services in Snapshots, targeting deployment in Kubernetes.</p>
<h3 id="micro-services">Micro-Services</h3>
<p><img src="images/1.jpg#layoutTextWidth" alt="image"></p>
<p>Now we have cut our old monolith into a lot of small micro-services, we need to deploy them.</p>
<p>You think, well, your CI build the micro-service when someone commit a change, and your CD deploy it.</p>
<p>Yeah.</p>
<p>When your project start growing, you end up with a lot of micro-services. If you’re lucky and smart enough, your services API will not change, AT ALL, and all your micro-services are back and forth compatible with each others.</p>
<p>If you live in a real world and iterate often, you’ll end up with API breaking changes between versions, and need to control micro-services deployments.</p>
<h3 id="sementic-versioning">Sementic Versioning</h3>
<p><a href="https://semver.org/">Semver</a> is really cool as it allows ordering of your releases with increasing numbers, and an easy way to see what could work together (patch or minor update) and what is a breaking change (major update).</p>
<p>Now you have two options :</p>
<ul>
<li>all your micro-services use the same version number</li>
<li>each micro-service follows it’s own version</li>
</ul>
<p>In the first case, you have to increase the version of ALL micro-services every time someone commit/merge one micro-service.<br>
It can be almost easy if you’re in a mono-repo, but still requires a lot of interactions/coordination between your teams if they all work on different part of micro-services. Not realistic.</p>
<p>In the later, each micro-service have it’s own numbers, and you need to track which version can work with the other. One way to do this is assume that one MAJOR version number means compatibility.<br>
So <em>service A</em> at version <strong>1</strong>.2.3 is compatible with <em>service B</em> at version <strong>1</strong>.5.4, but not with <em>service C</em> at version <strong>2</strong>.2.9</p>
<p>Obviously you can compose with the two… like each micro-service increase its Patch and Minor version on it’s own, and Major version is increased once for all micro-services.</p>
<p>Whatever you do, it can get really hard to track and manage. Most of the time it’s a limitation :</p>
<ul>
<li>overhead for building a release</li>
<li>slow iterations tied to releases</li>
</ul>
<h3 id="backward-compatibility">backward compatibility</h3>
<p>The graal here is backward compatibility and Feature Flags. This means all of your micro-services can work with any version of your API.</p>
<p>Thanks to some API protocols, like GRPC, it’s free. Add a new field in a protobuf in <em>service A</em>, it will still be able to talk to <em>service B</em>, which will ignore the new field.</p>
<p>But even with GRPC, you sometimes make breaking changes. That’s where enters Feature Sets.</p>
<p>By using a well designed, humm, let’s say, Framework, you can enable/disable features in your micro-services.<br>
So, you added a new feature to your <em>Cart Service</em> so it can call a <em>Taxe Service</em> to give the final price all included. But you can’t use it until all your <em>Taxe services</em> are deployed and tested.<br>
Well, just deploy your new <em>Cart Service</em>, with the Taxe call disabled.<br>
Once you’ve deployed the <em>Taxe Service</em>, you’ll tell your Cart Service to call for it, either by re-starting it with the option, or by calling an internal admin API on all of your Cart micro-services.</p>
<p>Something like <a href="https://github.com/markphelps/flipt">Flipt</a> or <a href="https://github.com/Unleash/unleash">Unleash</a> could be of some help for that.</p>
<p>This will not solve your versioning problem but could help living-with-it easier.</p>
<h3 id="releases">Releases</h3>
<p>So, you’re using some sort of Agile management, SCRUM, you define a target, do your sprint and release something.</p>
<p>but what is a release in micro-services architectures ?</p>
<p>Maybe your sprint only focused on 2 or 3 services, out of the 100’s you may have, because your fraud detection is not in par with your billing workflow, or you only revamped your customer care.</p>
<p>Do you release just these 3 micro-services or do you package and re-deploy all of them ?</p>
<h3 id="snapshots">Snapshots</h3>
<p>Here’s one definitions of what a snapshot it that fits our use-case :</p>
<blockquote>
<p>an impression or view of something brief or transitory</p>
</blockquote>
<p>You have a bunch of micro-services, each with its own version, and no way to track which one work with the other.</p>
<p>As you constantly iterate over them, versions piles up.</p>
<p>At some point, you take a snapshot and consider that your <strong>Release</strong>.<br>
That’s what we did lately.</p>
<p><img src="images/2.png#layoutTextWidth" alt="image">
Example snapshot</p>
<p>We build an admin tool using VueJs + Vuetify and a Go backend app to manage our snapshots.</p>
<p>The worflow is now :</p>
<p><img src="images/3.png#layoutTextWidth" alt="image"></p>
<p>During the deployment process you can select which variable sets you want to use, like <em>dev</em>, <em>integration</em>, <em>prod</em>…</p>
<p><img src="images/4.png#layoutTextWidth" alt="image"></p>
<p>All this gives us the flexibility to deploy many time the same micro-service with different commit versions, like :</p>
<p><img src="images/5.png#layoutTextWidth" alt="image"></p>
<p>All this finally translate to JSON to be stored, for the moment, in a Git repository :</p>
<p><img src="images/6.png#layoutTextWidth" alt="image"></p>
<p>Another tab of the application allows to compare our snapshot with one Kubernetes Namespace pods/deployments, so we can check what the changes will be when we deploy. Here, the deployed Tower micro-service (in orange) is newer than the one selected in the snapshot (in blue) :</p>
<p><img src="images/7.png#layoutTextWidth" alt="image"></p>
<p>As this imply, we don’t version our micro-services. We use the Git Commit Hash as the version. The PRO of doing this is that we don’t maintain the versions and we use the full commit tree and commit message as a reference of what was done. The CONS is that Commit Hash are not ordered by time, so you need to refer to the commit tree to know if this version is “older” than the other one.</p>
<h3 id="closing">Closing</h3>
<p>I know some will complain that it’s too much, and you can do without it, or that Jenkins X would allow better than that.<br>
Let me recap what this tool allows us to do :</p>
<ul>
<li>no version to maintain between micro-services</li>
<li>Devs can work on code, commit things, deploy in the dev environment and create a <strong>snapshot</strong> with the latest working versions</li>
<li>QA can deploy this <strong>snapshot</strong> and test it, maybe modifying it</li>
<li>Prod people can take the final <strong>snapshot</strong> and deploy it to prod, pre-prod</li>
<li>the <strong>snapshot</strong> IS the delivery, not the code</li>
<li>we can do A/B testing or canary out of the box (we plan to add Istio Destination Rule management inside the tool)</li>
<li>you can display/share the <strong>snapshot</strong> to all your teams so they all work on the same base</li>
<li>the <strong>snapshot</strong> is a reference that can be used automatically/programmatically to deploy known versions together. Instead of triggering the perf test for every commits, we can only tests when a <strong>snapshot</strong> is created. We can then compare snapshots performance metrics of features to get great insight.</li>
</ul>
<p>I don’t know if this will fill all our needs in the future, but it’s certainly speeding up our devs work and allow us to ensure we’re talking about the same thing when “it’s not working”.</p>
<p>As a side, building this application was the occasion to put some new devs skills in practice, which I hope to improve in the future.</p>
<p>If you ask, No, this app is not released and is not opensource, for now. A lot of things are linked to our infrastructure and it will be a hell to change it to ensure it fits everyone’s.<br>
As an example, we are using Gitlab and it’s Docker registry, and our code is in a mono-repo.<br>
This gives us shortcuts which may not apply to all of you.<br>
Changing from Gitlab to Github would require to re-write most of the code as Github does not have the same API.<br>
Sorry, for now…</p>
]]></content>
        </item>
        
        <item>
            <title>Istio 1.1.7 &#43; Let’s Encrypt : WORKING !</title>
            <link>https://piratemakers.ca/posts/2019/05/istio-1.1.7--lets-encrypt-working/</link>
            <pubDate>Wed, 22 May 2019 13:01:42 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2019/05/istio-1.1.7--lets-encrypt-working/</guid>
            <description>It’s been almost a year since I first wrote about using Let’s Encrypt SSL Certificates with Istio, 0.8.0 at this time.
Then I blogged again when Istio 1.0.2 came out. I had to build an Operator, Cert-Merge, to allow to merge all the SSL certificates created in many Secrets by Cert-Manager into ONE single secret that Istio’s Gateway could use.
While building this Operator was cool, and I learnt a lot by this time, I knew this was a temporary solution, a highly insecure one.</description>
            <content type="html"><![CDATA[<p><img src="images/1.png#layoutTextWidth" alt="image"></p>
<p>It’s been almost a year since I first wrote about <a href="https://medium.com/@prune998/istio-0-8-0-envoy-cert-manager-lets-encrypt-for-tls-d26bee634541">using Let’s Encrypt SSL Certificates with Istio, 0.8.0</a> at this time.<br>
Then <a href="https://medium.com/@prune998/istio-1-0-2-envoy-cert-manager-lets-encrypt-for-tls-certificate-merge-7a774bff66c2">I blogged again</a> when Istio 1.0.2 came out. I had to build an Operator, <a href="https://github.com/prune998/certmerge-operator">Cert-Merge</a>, to allow to merge all the SSL certificates created in many Secrets by Cert-Manager into ONE single secret that Istio’s Gateway could use.</p>
<p>While building this Operator was cool, and I learnt a lot by this time, I knew this was a temporary solution, a highly insecure one.</p>
<p>Well, I’m happy to tell you that THIS TIME IS OVER !</p>
<p>Since Istio 1.1.x (maybe 1.1.5) there is a new feature called <strong>SDS</strong>. This stands for Secret Delivery Service and allows Istio components to receive SSL Certificates by the API.</p>
<h3 id="setup">Setup</h3>
<p>You have to upgrade your Istio to one of the latest, which is always a good thing anyway. As of today, go for 1.1.7.</p>
<p>Doing this, you have to ENABLE the SDS component of the Gateway.</p>
<p>This is done by adding this line to your Helm generation :</p>
<p><em>gateways.istio-ingressgateway.sds.enabled=true</em></p>
<p>Here is what I use to generate the manifests :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm template install/kubernetes/helm/istio - name istio  
</span></span><span style="display:flex;"><span>- set tracing.enabled<span style="color:#f92672">=</span>false  
</span></span><span style="display:flex;"><span>- set ingress.enabled<span style="color:#f92672">=</span>false  
</span></span><span style="display:flex;"><span>- set gateways.istio-ingressgateway.enabled<span style="color:#f92672">=</span>true  
</span></span><span style="display:flex;"><span>- set gateways.istio-ingressgateway.sds.enabled<span style="color:#f92672">=</span>true  
</span></span><span style="display:flex;"><span>- set gateways.istio-egressgateway.enabled<span style="color:#f92672">=</span>true  
</span></span><span style="display:flex;"><span>- set servicegraph.enabled<span style="color:#f92672">=</span>false  
</span></span><span style="display:flex;"><span>- set kiali.enabled<span style="color:#f92672">=</span>true  
</span></span><span style="display:flex;"><span>- set kiali.dashboard.jaegerURL<span style="color:#f92672">=[</span>https://jaeger.<span style="color:#f92672">](</span>https://jaeger.%7B%7B<span style="color:#f92672">)</span>local.domain  
</span></span><span style="display:flex;"><span>- set kiali.prometheusAddr<span style="color:#f92672">=[</span>http://prometheus-k8s.monitoring:9090<span style="color:#f92672">](</span>http://prometheus-k8s.monitoring:9090<span style="color:#f92672">)</span>  
</span></span><span style="display:flex;"><span>- set kiali.dashboard.grafanaURL<span style="color:#f92672">=[</span>http://grafana.monitoring:3000<span style="color:#f92672">](</span>http://grafana.monitoring:3000<span style="color:#f92672">)</span>  
</span></span><span style="display:flex;"><span>- set prometheus.enabled<span style="color:#f92672">=</span>false  
</span></span><span style="display:flex;"><span>- set grafana.enabled<span style="color:#f92672">=</span>false  
</span></span><span style="display:flex;"><span>- set global.proxy.autoInject<span style="color:#f92672">=</span>disabled  
</span></span><span style="display:flex;"><span>- set global.k8sIngressSelector<span style="color:#f92672">=</span>ingressgateway  
</span></span><span style="display:flex;"><span>- set global.k8sIngressHttps<span style="color:#f92672">=</span>false  
</span></span><span style="display:flex;"><span>- set global.tracer.zipkin.address<span style="color:#f92672">=</span>zipkin.monitoring:9411  
</span></span><span style="display:flex;"><span>- set global.outboundTrafficPolicy.mode<span style="color:#f92672">=</span>REGISTRY_ONLY  
</span></span><span style="display:flex;"><span>- set galley.enabled<span style="color:#f92672">=</span>true  
</span></span><span style="display:flex;"><span>- set global.proxy.accessLogFile<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/dev/stdout&#34;</span>  
</span></span><span style="display:flex;"><span>- namespace istio-system &gt; install/kubernetes/generated.yaml
</span></span></code></pre></div><h3 id="usage">Usage</h3>
<p>Now your Istio mesh is working, you can create gateways that use SDS to grab the SSL certificate.</p>
<p>You can check the Istio’s doc at <a href="https://istio.io/docs/examples/advanced-gateways/ingress-certmgr/">https://istio.io/docs/examples/advanced-gateways/ingress-certmgr/</a></p>
<p>This official Doc is using an <strong>Ingress</strong> resource instead of a plain <strong>Gateway</strong> + <strong>VirtualService</strong>… I don’t know why it’s done this way, and I thought using Ingress resources with Istio was deprecated. If anyone have informations on that, please comments.</p>
<p>Here is what I did for testing :</p>
<h4 id="certificate">Certificate</h4>
<p>Create your certificate as usual… something like :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">certmanager.k8s.io/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Certificate  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cert-hello.mydomain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">istio-system  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">commonName</span>: <span style="color:#ae81ff">hello.mydomain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dnsNames</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">hello.mydomain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">issuerRef</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterIssuer  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-prod  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">cert-hello.mydomain.com</span>
</span></span></code></pre></div><p>This will create a new TLS secret named <strong>cert-hello.mydomain.com</strong></p>
<h4 id="gateway">Gateway</h4>
<p>This is the fun part. In your Gateway, instead of giving the path to your key/cert, just set the keyword “SDS” :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.istio.io/v1alpha3  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Gateway  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gw-hello-mydomain-com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">istio</span>: <span style="color:#ae81ff">ingressgateway  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">servers</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">hosts</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">hello.mydomain.com  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">https-443-hello-mydomain-com ← this must be unique  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">number</span>: <span style="color:#ae81ff">443</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">HTTPS  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tls</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">credentialName</span>: <span style="color:#ae81ff">cert-hello.mydomain.com ← the certificate name you created above  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">SIMPLE  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">privateKey</span>: <span style="color:#ae81ff">sds  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serverCertificate</span>: <span style="color:#ae81ff">sds</span>
</span></span></code></pre></div><p>And VOILA !</p>
<p>Well, you have to setup your VirtualService, Service and Deployment, but this is as usual, nothing new….</p>
<p>Enjoy !</p>
<h4 id="edit-1">EDIT 1</h4>
<p>You <strong>NEED</strong> to keep the <em>Secret</em> holding the SSL <em>Certificate</em> in the <strong>same <em>Namespace</em></strong> as your Istio Ingress Gateway. (see <a href="https://github.com/istio/istio/issues/6486#issuecomment-495606248">github issue here</a>)<br>
You can still put your <em>Gateway</em>/<em>VirtualService</em> definitions where you want.</p>
<h4 id="edit-2">EDIT 2</h4>
<p>There is a presentation on that at KubeCon Europe 2019 (Spain) : <a href="https://www.youtube.com/watch?v=QlQyqCaTOh0">https://www.youtube.com/watch?v=QlQyqCaTOh0</a></p>
<h4 id="edit-3">EDIT 3</h4>
<p>Don’t use the <em>istio-ingressgateway-certs</em> Secret for SDS.<br>
As stated by Vladimir Pouzanov :</p>
<blockquote>
<p>SDS explicitly filters out (Secrets with) prefixes of “istio” and “prometheus”<br>
:-) of course it’s not documented.<br>
It will also skip secrets that have a field named “token” (commonly the service accounts).</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Istio 1.0.2 (Envoy) &#43; Cert-Manager &#43; Let’s Encrypt for TLS &#43; Certificate Merge</title>
            <link>https://piratemakers.ca/posts/2018/11/istio-1.0.2-envoy--cert-manager--lets-encrypt-for-tls--certificate-merge/</link>
            <pubDate>Wed, 07 Nov 2018 17:38:31 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2018/11/istio-1.0.2-envoy--cert-manager--lets-encrypt-for-tls--certificate-merge/</guid>
            <description>Recap I already talked about Istio + Cert-Manager in part one and part two. In the meantime Istio went to release 1.0, lastly 1.0.3.
While this version improves a lot of things and finally get rid of some nasty bugs when using gRPC (HTTP2) Streams, there’s still no improvement on the Ingress Gateway SSL Management.
Let me remind you :
Cert-Manager only create TLS Secrets, which are a kind of Secret that only contains a crt and key file.</description>
            <content type="html"><![CDATA[<p><img src="images/1.jpeg#layoutTextWidth" alt="image"></p>
<h3 id="recap">Recap</h3>
<p>I already talked about Istio + Cert-Manager in <a href="https://medium.com/@prune998/istio-envoy-cert-manager-lets-encrypt-for-tls-14b6a098f289">part one</a> and <a href="https://medium.com/@prune998/istio-0-8-0-envoy-cert-manager-lets-encrypt-for-tls-d26bee634541">part two</a>. In the meantime Istio went to release 1.0, lastly 1.0.3.</p>
<p>While this version improves a lot of things and finally get rid of some nasty bugs when using gRPC (HTTP2) Streams, there’s still no improvement on the Ingress Gateway SSL Management.</p>
<p>Let me remind you :</p>
<ul>
<li>Cert-Manager only create <strong>TLS Secrets</strong>, which are a kind of Secret that only contains a <strong>crt</strong> and <strong>key</strong> file.</li>
<li>Istio Ingress Gateway only mount <strong>ONE Secret</strong> named <em>istio-ingressgateway-certs.</em></li>
<li>Istio Ingress Gateway have no way to detect when a SSL Certificate is updated.</li>
</ul>
<p>This three constraints lead to the fact that :</p>
<ul>
<li>you can only create ONE <strong>Certificate</strong> Resource with all your endpoints in it</li>
<li>the target <strong>TLS Secret</strong> have to be located in the Istio-System Namespace</li>
<li>You can’t mix certificates created from Cert-Manager and another source (like providing your own Certificates for some domains)</li>
</ul>
<h3 id="what-solutions-do-we-have-">What solutions do we have ?</h3>
<p>Well, not much right now.</p>
<p>Cert-Manager’s team is looking into this and will change/stabilize the API <em>soon</em>, which should offer other ways to store Secrets, like Ashicorp Vault.<br>
When I say <em>soon</em>, it’s more of a joke than a close event. I opened a discussion months ago and went almost to a PR to allow Cert-Manager to be able to write multiple Certificates inside a single Secret, changing their type from TLS to Opaque. Following the discussion I did not push the PR. I was told that :</p>
<blockquote>
<p>We can’t accept a PR like this as we are trying to stabilize the API and the final storage for Certificates is not yet decided. Also, we have to be careful not to include things in the API that we couldn’t support in the long term.</p>
</blockquote>
<p>Istio is also looking for a solution to use something else than Secrets, of have something else manage the secrets for you. As of now, Istio (and the Ingress Gateway) do not support automatic update when a Secret is updated.</p>
<h3 id="then-enter-cert-merge-operator">Then enter Cert-Merge Operator</h3>
<p>I was so much frustrated about all this that I came with my own solution : <a href="https://github.com/prune998/certmerge-operator">Cert-Merge Operator</a>!</p>
<p>Be warned : this is my first time using the <a href="https://github.com/operator-framework/operator-sdk">Operator SDK</a> and this is Beta software. Still, I just put it in Production on our platform.</p>
<p>The idea is simple : as Istio can only read <em>ONE Secret</em> to fetch <em>Certificates</em> and since Cert-Manager can only set <em>ONE certificate</em> in each <em>Secret</em>, we need a way to <strong>merge many TLS Secret’s data into one Opaque Secret with many Certificates.</strong></p>
<p>So, how does this work ? Let’s find out…</p>
<p><img src="images/2.png#layoutTextWidth" alt="image"></p>
<ol>
<li>The user push Manifests to create some <em>Certificates</em></li>
<li><strong>Cert-Manager</strong> is triggered and create to corresponding TLS Secrets</li>
<li><strong>CertMerge Operator</strong> watch for Secrets and is triggered when Cert-Manager create or update them</li>
<li><strong>CertMerge Operator</strong> also watch for <em>CertMerge</em> requests. In our case, we decided to merge ALL certificates with a Label <em>certmerge=true</em> into ONE SINGLE <em>Opaque Secret.</em>
This is due to Istio limitation to only mount one secret inside the Ingress Gateway.</li>
<li><strong>CertMerge Operator</strong> create the Istio’s needed Secret</li>
<li>the <strong>Istio Ingress Gateway</strong> watch for <em>Gateway</em> Resources. Each <em>Gateway</em> is defined to use a different certificate name (coming from the same single Secret which is mounted at start)</li>
</ol>
<h3 id="can-i-do-that-in-prod-">Can I do that in Prod ?</h3>
<p>Well, while it’s working on our platform, there still are some possible issues :</p>
<p>First, this solution needs you to have a <strong>Label</strong> on the Cert-Manager’s Secret.<br>
This <strong>Label</strong> is used by the Cert-Merge Operator to search/select the secrets that needs to be merged. This not supported at the moment.<br>
It’s also why I’m pissed off by Cert-Manager project.</p>
<p>Short explanation : I opened an <a href="https://github.com/jetstack/cert-manager/issues/977">issue</a>, then a <a href="https://github.com/jetstack/cert-manager/pull/1027">PR</a>, to add support for Labels in the Certificate Custom Resource.<br>
This PR was rejected with almost the same statement I had months before :</p>
<blockquote>
<p>So at the moment there’s open questions around how we can define alternate representations of certificates (i.e. as a secret, as a field on another resource, or even being stored in other secret backends). We need to work out how these sorts of things will be represented before we accept new fields on our API resources that may in future be difficult to maintain.&gt; For that reason, I don’t think we can accept this PR for the time being.</p>
</blockquote>
<p>Well, you can go read the whole thread, but as far as I’m concerned, there ALREADY is a v1 API for Cert-Manager, and whatever is done, there WILL BE A v2 anytime soon. So, instead of improving V1 right now and maybe change it in V2, they prefer waiting for V2.</p>
<p>I already waited too many years of my life…</p>
<ul>
<li>for a girlfriend which dumped me after 5 years</li>
<li>for the new Iphone XS which would be faster than the X (which is, but have smaller battery)</li>
<li>for a real summer in Quebec City</li>
<li>for the next Macpro which never came (don’t call the trashcan a Macpro !)</li>
</ul>
<p>I will not wait for a CNCF Project to stop improving on V1 while they try to settle on V2.</p>
<p>So, to conclude : <strong>NO YOU CAN’T !</strong></p>
<p>As suggested by the Cert-Manager’s involved people, you CAN pre-create the <code>Secrets</code> with the desired names and add <code>Labels</code>. Cert-Manager will add the SSL Cert’s data afterward. (never tested this)</p>
<p>Well, again, I’m questioning these guy’s production knowledge. The whole point of all this is automation. I create a <code>Certificate</code> CR and I get a <code>Secret</code> with the certificate. If I have to create the <code>Secret</code> before uploading the <code>Certificate</code> CR, I would rather create the crt and key files on my own and upload them into the <code>Secret</code>.</p>
<h3 id="i-still-want-it-">I still want it !</h3>
<p>Notice : <em>It’s beta, it does not work with stock Cert-Manager, it may change in the future.</em></p>
<p>So if you still want to use it, you have to build your own Cert-Manager with my PR applied. You can clone from my <a href="https://github.com/prune998/cert-manager/tree/prune/certificate-labels">Github repo</a>.</p>
<p>Also, note that there MAY BE some security concerns using the CertMerge Operator… Be conscious that you are giving the right to an Operator to read ALL the Secrets in your Kubernetes cluster and potentially merge them into another Namespace.</p>
<p>I’m pretty sure LOTS of people will have to complain about that.</p>
<p>I still have to figure out the real workflow here…<br>
Should I just manage Secrets from within the Istio-System Namespace ?<br>
Should I only be able to merge Secrets from a Namespace into the same Namespace ?</p>
<h3 id="what-about-the-operator-sdk-">What about the Operator SDK ?</h3>
<p>Well, I got this Operator setup and running, starting from almost 0, in few hours coding. So I think we can say it’s a really cool and fast path to creating Operators.<br>
I also had [great support from the community] (<a href="https://github.com/operator-framework/operator-sdk/issues/694)when">https://github.com/operator-framework/operator-sdk/issues/694)when</a> I was struggling to add some features.</p>
<p>From my point of view I would have loved a little more examples and docs.</p>
<p>I won’t go through the Operator SDK Cli setup, just follow the <a href="https://github.com/operator-framework/operator-sdk#quick-start">Quick Start</a> of the <a href="https://coreos.com/blog/introducing-operator-framework">Blog Post</a>. I’m just going to explain some of my code.</p>
<p>Once you have the CLI setup you can start creating your Operator. As you’ll see in the QuickStart, you need to create a new Operator, add an API (your Custom Resource) and add a Controler. This is all done using the CLI and will provide a default implementation :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>operator-sdk new certmerge-operator  
</span></span><span style="display:flex;"><span>cd certmerge-operator  
</span></span><span style="display:flex;"><span>operator-sdk add api --api-version<span style="color:#f92672">=</span>certmerge.lecentre.net/v1alpha1 --kind<span style="color:#f92672">=</span>CertMerge  
</span></span><span style="display:flex;"><span>operator-sdk add controller --api-version<span style="color:#f92672">=</span>certmerge.lecentre.net/v1alpha1 --kind<span style="color:#f92672">=</span>CertMerge  
</span></span><span style="display:flex;"><span>operator-sdk generate k8s
</span></span></code></pre></div><p>The last command, <code>operator-sdk generate k8s</code> will generate the needed code from your Custom Resouce Definition so you will have to run it every time you change something.</p>
<h4 id="the-custom-resource">The Custom Resource</h4>
<p>In my case the Custom Resouce is of <code>Type: CertMerge</code> and is defined in <code>pkg/apis/certmerge/v1alpha1/certmerge_types.go</code> .</p>
<p>It must include all the needed fields your Operator will need to do it’s job. You also need a <code>List</code> type of your Resource. Here’s my CR :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// CertMerge is the Schema for the certmerges API  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">CertMerge</span> <span style="color:#66d9ef">struct</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">metav1</span>.<span style="color:#a6e22e">TypeMeta</span>   <span style="color:#e6db74">`json:&#34;,inline&#34;`</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">metav1</span>.<span style="color:#a6e22e">ObjectMeta</span> <span style="color:#e6db74">`json:&#34;metadata,omitempty&#34;```</span>  <span style="color:#a6e22e">Spec</span>   <span style="color:#a6e22e">CertMergeSpec</span>   <span style="color:#e6db74">`json:&#34;spec,omitempty&#34;`</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Status</span> <span style="color:#a6e22e">CertMergeStatus</span> <span style="color:#e6db74">`json:&#34;status,omitempty&#34;`</span>  
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// CertMergeList contains a list of CertMerge  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">CertMergeList</span> <span style="color:#66d9ef">struct</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">metav1</span>.<span style="color:#a6e22e">TypeMeta</span> <span style="color:#e6db74">`json:&#34;,inline&#34;`</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">metav1</span>.<span style="color:#a6e22e">ListMeta</span> <span style="color:#e6db74">`json:&#34;metadata,omitempty&#34;```</span>  <span style="color:#a6e22e">Items</span>           []<span style="color:#a6e22e">CertMerge</span> <span style="color:#e6db74">`json:&#34;items&#34;`</span>  
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Most important here are that my CR contains a <code>Spec</code>, holding the details of my CR, and a <code>Status</code>, holding the fields that my Operator can use to re-concile the CR. I haven’t add stuff to the Status part of the Operator right now.</p>
<p>The <code>Spec</code> is defined as :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// CertMergeSpec defines the desired state of CertMerge``type CertMergeSpec struct {  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">SecretName</span>      <span style="color:#66d9ef">string</span>             <span style="color:#e6db74">`json:&#34;name&#34;`</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">SecretNamespace</span> <span style="color:#66d9ef">string</span>             <span style="color:#e6db74">`json:&#34;namespace&#34;`</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Selector</span>        []<span style="color:#a6e22e">SecretSelector</span>   <span style="color:#e6db74">`json:&#34;selector&#34;`</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">SecretList</span>      []<span style="color:#a6e22e">SecretDefinition</span> <span style="color:#e6db74">`json:&#34;secretlist&#34;`</span>  
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// SecretSelector defines the needed parameters to search for secrets by Label  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">SecretSelector</span> <span style="color:#66d9ef">struct</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">LabelSelector</span> <span style="color:#a6e22e">metav1</span>.<span style="color:#a6e22e">LabelSelector</span> <span style="color:#e6db74">`json:&#34;labelselector&#34;`</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Namespace</span>     <span style="color:#66d9ef">string</span>               <span style="color:#e6db74">`json:&#34;namespace&#34;`</span>  
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// SecretDefinition defines the parameters to search for secrets by name  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">SecretDefinition</span> <span style="color:#66d9ef">struct</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Name</span>      <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;name&#34;`</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Namespace</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;namespace&#34;`</span>  
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To define a Merge we need to give it a Name and a Namespace, a list of Secrets to add (SecretList) and a list of Labels to search for (we will include all the certs that match the Labels).</p>
<h4 id="the-main">The Main</h4>
<p>There’s not much in the main. I decided to use <a href="https://github.com/Sirupsen/logrus">Logrus</a> as logger but there are active discussions to change it to <a href="https://github.com/golang/glog">Glog</a> and Zap (but my friend and co-worker Akh is strongly discouraging me to go with Glog) . I added an option to change the Log Level :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> (  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">logLevel</span>       = <span style="color:#a6e22e">flag</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;loglevel&#34;</span>, <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">WarnLevel</span>.<span style="color:#a6e22e">String</span>(), <span style="color:#e6db74">&#34;the log level to display&#34;</span>)  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">displayVersion</span> = <span style="color:#a6e22e">flag</span>.<span style="color:#a6e22e">Bool</span>(<span style="color:#e6db74">&#34;version&#34;</span>, <span style="color:#66d9ef">false</span>, <span style="color:#e6db74">&#34;Show version and quit&#34;</span>)  
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">flag</span>.<span style="color:#a6e22e">Parse</span>()
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// set logs in json format  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">myLogLevel</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">ParseLevel</span>(<span style="color:#f92672">*</span><span style="color:#a6e22e">logLevel</span>)  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">myLogLevel</span> = <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">WarnLevel</span>  
</span></span><span style="display:flex;"><span>  }  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">SetLevel</span>(<span style="color:#a6e22e">myLogLevel</span>)  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">SetFormatter</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">JSONFormatter</span>{}
</span></span></code></pre></div><p>Then you create a Manager which holds all the SDK components :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">mgr</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">manager</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">cfg</span>, <span style="color:#a6e22e">manager</span>.<span style="color:#a6e22e">Options</span>{<span style="color:#a6e22e">Namespace</span>: <span style="color:#e6db74">&#34;&#34;</span>})
</span></span></code></pre></div><p>Using an empty Namespace make the Operator watch ALL Namespaces. You will have to update the RBAC rules for your Operator to allow for this. I’ve changed the Roles/RoleBindings to ClusterRoles/ClusterRoleBindings.</p>
<p>You finally add all APIs and Controlers. These lines will load ALL the files located in the <code>pkg/apis</code> and <code>pkg/controller</code> to the Manager :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Setup Scheme for all resources  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">apis</span>.<span style="color:#a6e22e">AddToScheme</span>(<span style="color:#a6e22e">mgr</span>.<span style="color:#a6e22e">GetScheme</span>()); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)  
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Setup all Controllers  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">controller</span>.<span style="color:#a6e22e">AddToManager</span>(<span style="color:#a6e22e">mgr</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)  
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="the-watch">The Watch</h4>
<p>The Operator watch for some Resources change to trigger a Reconcile. This is done in the <code>Controler</code>. It’s located in the file <code>pkg/controller/certmerge/certmerge_controller.go</code></p>
<p>The <code>Add</code> function is called when we add the Controlers. This function indeed create the Controler and all the Watched. Obviously you want to watch your own Custom Resource (I will use CR now on) :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">add</span>(<span style="color:#a6e22e">mgr</span> <span style="color:#a6e22e">manager</span>.<span style="color:#a6e22e">Manager</span>, <span style="color:#a6e22e">r</span> <span style="color:#a6e22e">reconcile</span>.<span style="color:#a6e22e">Reconciler</span>, <span style="color:#a6e22e">mapFn</span> <span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">ToRequestsFunc</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Create a new controller  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">controller</span>.<span style="color:#a6e22e">New</span>(<span style="color:#e6db74">&#34;certmerge-controller&#34;</span>, <span style="color:#a6e22e">mgr</span>, <span style="color:#a6e22e">controller</span>.<span style="color:#a6e22e">Options</span>{<span style="color:#a6e22e">Reconciler</span>: <span style="color:#a6e22e">r</span>})  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>  
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Watch for changes to primary resource CertMerge  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Watch</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">source</span>.<span style="color:#a6e22e">Kind</span>{<span style="color:#a6e22e">Type</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">certmergev1alpha1</span>.<span style="color:#a6e22e">CertMerge</span>{}}, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">EnqueueRequestForObject</span>{})  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>  
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>If you’re building your own Operator from scratch, your <code>add</code> func is going to take only 2 parameters. The last one, <code>mapFn handler.ToRequestsFunc</code> is a function that will be called by some <code>Watch</code> instead of the default <code>Reconcile</code> function. I’ll get to it soon.</p>
<p>In this Operator, we watch for <code>CertMerge</code> CR and we create/update <code>Secrets</code>. The SDK have a cool way to link the <code>Secrets</code> we create. This allows us, for example, to automatically remove the <code>Secret</code> when the <code>CertMerge</code> is removed.</p>
<p>To do that we create a new <code>Watch</code> with a handler of <code>EnqueueRequestForOwner</code> instead of a <code>EnqueueRequestForObject</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// This will trigger the Reconcile if the Merged Secret is modified
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Watch</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">source</span>.<span style="color:#a6e22e">Kind</span>{<span style="color:#a6e22e">Type</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">corev1</span>.<span style="color:#a6e22e">Secret</span>{}}, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">EnqueueRequestForOwner</span>{  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">IsController</span>: <span style="color:#66d9ef">true</span>,  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">OwnerType</span>:    <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">certmergev1alpha1</span>.<span style="color:#a6e22e">CertMerge</span>{},  
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>So now, the Reconcile will be triggered if there is an event regarding a <code>CertMerge</code> resource of a <code>Secret</code> resource that is managed by our Operator.</p>
<p>When Cert-Manager renew a Certificate it will update the target Secret. This event also need to be watched by our Operator. This is done using another kind of <code>Watch</code> : the <code>EnqueueRequestsFromMapFunc</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Watch for Secret change and process them through the SecretTriggerCertMerge function
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// This watch enables us to reconcile a CertMerge when a concerned Secret is changed (create/update/delete)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Watch</span>(  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">source</span>.<span style="color:#a6e22e">Kind</span>{<span style="color:#a6e22e">Type</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">corev1</span>.<span style="color:#a6e22e">Secret</span>{}},  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">EnqueueRequestsFromMapFunc</span>{  
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ToRequests</span>: <span style="color:#a6e22e">mapFn</span>,  
</span></span><span style="display:flex;"><span>  },  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">p</span>,  
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>We’re saying here that we will run the <code>mapFn</code> function when a <code>Secret</code> event is triggered.</p>
<p>We also use <code>p</code>, a <code>Predicate</code>. Predicates are used to filter <code>Events</code>. The <code>Predicate</code> function will return <code>true</code> if the event have to be passed to the <code>mapFn</code> function or <code>false</code> to drop the event.</p>
<p>For example, the <code>Delete</code> events are dropped :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">DeleteFunc</span>: <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">e</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">DeleteEvent</span>) <span style="color:#66d9ef">bool</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>  
</span></span><span style="display:flex;"><span>},
</span></span></code></pre></div><p>We drop <code>Delete</code> events as, when deleting an object, the K8s API first create an<code>Update event</code> with some <code>Delete Metadata</code> then create a <code>Delete event</code>.</p>
<p>In case of an <code>Update</code> event, we don’t want to trigger a <code>Reconcile</code> if the Secret’s data is not changed :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// if old and new data is the same, don&#39;t reconcile  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">newObj</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">ObjectNew</span>.<span style="color:#a6e22e">DeepCopyObject</span>().(<span style="color:#f92672">*</span><span style="color:#a6e22e">corev1</span>.<span style="color:#a6e22e">Secret</span>)  
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">oldObj</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">ObjectOld</span>.<span style="color:#a6e22e">DeepCopyObject</span>().(<span style="color:#f92672">*</span><span style="color:#a6e22e">corev1</span>.<span style="color:#a6e22e">Secret</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">Equal</span>(<span style="color:#a6e22e">newObj</span>.<span style="color:#a6e22e">Data</span>, <span style="color:#a6e22e">oldObj</span>.<span style="color:#a6e22e">Data</span>) {  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>  
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I’m still not sure how to only trigger the right events. As the <code>mapFn</code> func only gets access to the latest object (not the old or the diff), it does not know if it’s a create, update or delete operation that triggered the event.<br>
In case of a delete, for example, 2 events are fired : first an <code>Update</code> and then a <code>Delete</code>. During the <code>Delete</code> operation, the Secret is already removed, so the reconcile will fail. The target Merged Secret will not be updated and the now-removed certificate will still be visible inside the Secret.</p>
<p>There’s still work to do to improve all this.</p>
<h3 id="secrets-event-management">Secret’s Event Management</h3>
<p>As stated, a <code>Secret</code> update event will trigger the <code>mapFn</code> func which, in this controller, is <code>SecretTriggerCertMerge</code>.</p>
<p>The purpose of this function is to find all the <code>CertMerge</code> CR that should be reconciled when a <code>Secret</code> is changed.</p>
<p>First thing to do here is to DROP the event if the <code>Secret</code> is/was created by the Operator itself. This case is already taken care by the other Secret’s Watch.</p>
<p>We then get all the <code>CertMerge</code> CR and check if the <code>Secret</code> have a Name or the Labels the CR requires.</p>
<p>If yes, we add the CR to the list and return it. Each CR in the list will trigger a Reconcile.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// parse each CertMerge CR and reconcile them if needed  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">cm</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">cml</span>.<span style="color:#a6e22e">Items</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">secretInCertMergeList</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cm</span>, <span style="color:#a6e22e">instance</span>) <span style="color:#f92672">||</span> <span style="color:#a6e22e">secretInCertMergeLabels</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cm</span>, <span style="color:#a6e22e">instance</span>) {  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// trigger the CertMerge Reconcile  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">result</span> = append(<span style="color:#a6e22e">result</span>, <span style="color:#a6e22e">reconcile</span>.<span style="color:#a6e22e">Request</span>{ <span style="color:#a6e22e">NamespacedName</span>: <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">ObjectKey</span>{<span style="color:#a6e22e">Namespace</span>: <span style="color:#a6e22e">cm</span>.<span style="color:#a6e22e">Namespace</span>, <span style="color:#a6e22e">Name</span>: <span style="color:#a6e22e">cm</span>.<span style="color:#a6e22e">Name</span>}})
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Infof</span>(<span style="color:#e6db74">&#34;CertMerge %s/%s added to Reconcile List&#34;</span>, <span style="color:#a6e22e">cm</span>.<span style="color:#a6e22e">Namespace</span>, <span style="color:#a6e22e">cm</span>.<span style="color:#a6e22e">Name</span>)  
</span></span><span style="display:flex;"><span>  }  
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span>
</span></span></code></pre></div><h4 id="reconcile">Reconcile</h4>
<p>The last part and most important is the Reconcile function.<br>
It is triggered when a<code>CertMerge</code> event occurs and when a <code>Secret</code> event is concerned by a <code>CertMerge</code> CR.</p>
<p>As we merge based on <code>Secret</code> Name and <code>Secret</code> Labels, we have a two pass strategy where we add all concerned <code>Secrets</code> to a list. We finally concat them into a <code>Secret</code> and put in back in K8s using the API.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">secret</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">newSecretForCR</span>(<span style="color:#a6e22e">instance</span>)  
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">certData</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>][]<span style="color:#66d9ef">byte</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">instance</span>.<span style="color:#a6e22e">Spec</span>.<span style="color:#a6e22e">SecretList</span>) &gt; <span style="color:#ae81ff">0</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">sec</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">instance</span>.<span style="color:#a6e22e">Spec</span>.<span style="color:#a6e22e">SecretList</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">secContent</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">searchSecretByName</span>(<span style="color:#a6e22e">sec</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#a6e22e">sec</span>.<span style="color:#a6e22e">Namespace</span>)  
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">certData</span>[<span style="color:#a6e22e">sec</span>.<span style="color:#a6e22e">Name</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;.crt&#34;</span>] = <span style="color:#a6e22e">secContent</span>.<span style="color:#a6e22e">Data</span>[<span style="color:#e6db74">&#34;tls.crt&#34;</span>]  
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">certData</span>[<span style="color:#a6e22e">sec</span>.<span style="color:#a6e22e">Name</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;.key&#34;</span>] = <span style="color:#a6e22e">secContent</span>.<span style="color:#a6e22e">Data</span>[<span style="color:#e6db74">&#34;tls.key&#34;</span>]  
</span></span><span style="display:flex;"><span>  }  
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">instance</span>.<span style="color:#a6e22e">Spec</span>.<span style="color:#a6e22e">Selector</span>) &gt; <span style="color:#ae81ff">0</span> {  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">sec</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">instance</span>.<span style="color:#a6e22e">Spec</span>.<span style="color:#a6e22e">Selector</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">secContent</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">searchSecretByLabel</span>(<span style="color:#a6e22e">sec</span>.<span style="color:#a6e22e">LabelSelector</span>.<span style="color:#a6e22e">MatchLabels</span>, <span style="color:#a6e22e">sec</span>.<span style="color:#a6e22e">Namespace</span>)  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">secCert</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">secContent</span>.<span style="color:#a6e22e">Items</span> {  
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">certData</span>[<span style="color:#a6e22e">secCert</span>.<span style="color:#a6e22e">Name</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;.crt&#34;</span>] = <span style="color:#a6e22e">secCert</span>.<span style="color:#a6e22e">Data</span>[<span style="color:#e6db74">&#34;tls.crt&#34;</span>]  
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">certData</span>[<span style="color:#a6e22e">secCert</span>.<span style="color:#a6e22e">Name</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;.key&#34;</span>] = <span style="color:#a6e22e">secCert</span>.<span style="color:#a6e22e">Data</span>[<span style="color:#e6db74">&#34;tls.key&#34;</span>]  
</span></span><span style="display:flex;"><span>    }  
</span></span><span style="display:flex;"><span>  }  
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">secret</span>.<span style="color:#a6e22e">Data</span> = <span style="color:#a6e22e">certData</span>  
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#a6e22e">secret</span>)
</span></span></code></pre></div><p>Of course this is far more complicated, but check the code, this is just a workflow overview.</p>
<h3 id="using-the-operator">Using the Operator</h3>
<p>If you still think this Operator can suite your needs, deploy it for yourself.</p>
<p>To do so you will find the sample deployment manifests in the <code>deploy</code> folder. You just need to apply them in the right namespace.</p>
<p>This deployment use the <code>:latest</code> image of my public <a href="https://hub.docker.com/r/prune/cert-operator/">Docker Hub Registry</a>.</p>
<p>Quoting the <code>README.md</code> file :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f deploy/namespace.yaml  
</span></span><span style="display:flex;"><span>kubectl -n cert-merge apply -f deploy/service_account.yaml  
</span></span><span style="display:flex;"><span>kubectl -n cert-merge apply -f deploy/role.yaml  
</span></span><span style="display:flex;"><span>kubectl -n cert-merge apply -f deploy/role_binding.yaml  
</span></span><span style="display:flex;"><span>kubectl -n cert-merge apply -f deploy/certmerge_v1alpha1_certmerge_crd.yaml  
</span></span><span style="display:flex;"><span>kubectl -n cert-merge apply -f deploy/operator.yaml
</span></span></code></pre></div><p>Ok you’ve got an operator, now what ?</p>
<h4 id="cert-manager-certificates">Cert-Manager Certificates</h4>
<p>Now that you have the Operator, you can split all your <code>Certificates</code> in different <code>Secrets</code>. This is my first <code>Certificate</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">certmanager.k8s.io/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Certificate  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cert-svc.dev.domain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">istio-system  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">acme</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">config</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">dns01</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">provider</span>: <span style="color:#ae81ff">aws-dns-prod  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">domains</span>:  
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">svc.dev.domain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">commonName</span>: <span style="color:#ae81ff">svc.dev.domain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dnsNames</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">svc.dev.domain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">env</span>: <span style="color:#e6db74">&#34;dev&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">certmerge</span>: <span style="color:#e6db74">&#34;true&#34;</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">issuerRef</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterIssuer  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-prod  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">cert-svc.dev.domain.com  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">organization</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">My Own Team</span>
</span></span></code></pre></div><p>Once Cert-Manager job is done I’ll have a new Secret <code>cert-svc.dev.domain.com</code> in the <code>istio-system</code> Namespace.</p>
<p>Let’s add another one :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">certmanager.k8s.io/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Certificate  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cert-svc.prod.domain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">istio-system  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">acme</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">config</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">dns01</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">provider</span>: <span style="color:#ae81ff">aws-dns-prod  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">domains</span>:  
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">svc.prod.domain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">commonName</span>: <span style="color:#ae81ff">svc.prod.domain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dnsNames</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">svc.prod.domain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">env</span>: <span style="color:#e6db74">&#34;prod&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">certmerge</span>: <span style="color:#e6db74">&#34;true&#34;</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">issuerRef</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterIssuer  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-prod  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">cert-svc.prod.domain.com  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">organization</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">My Own Team</span>
</span></span></code></pre></div><p>Ensure all certificates are generated :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl -n istio-system get secrets -l certmerge<span style="color:#f92672">=</span>true
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME                        TYPE                DATA      AGE  
</span></span><span style="display:flex;"><span>cert-svc.dev.domain.com     kubernetes.io/tls   <span style="color:#ae81ff">2</span>         7h  
</span></span><span style="display:flex;"><span>cert-svc.prod.domain.com    kubernetes.io/tls   <span style="color:#ae81ff">2</span>         7h
</span></span></code></pre></div><p>Now Create the Merge. We only need ONE <code>CertMerge</code> CR as Istio can only read ONE <code>Secret</code>. So let’s put everything in it :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">certmerge.lecentre.net/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CertMerge  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;certmerge-istio-ingress&#34;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">labelselector</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">matchLabels</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">certmerge</span>: <span style="color:#e6db74">&#34;true&#34;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">istio-system  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">istio-ingressgateway-certs  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">istio-system</span>
</span></span></code></pre></div><p>After that, you should have one new <code>Secret</code> called <code>istio-ingressgateway-certs</code>. Let’s check that :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl -n istio-system describe  secrets istio-ingressgateway-certs  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Name:         istio-ingressgateway-certs  
</span></span><span style="display:flex;"><span>Namespace:    istio-system  
</span></span><span style="display:flex;"><span>Labels:       certmerge<span style="color:#f92672">=</span>certmerge-istio-ingress  
</span></span><span style="display:flex;"><span>              creator<span style="color:#f92672">=</span>certmerge-operator  
</span></span><span style="display:flex;"><span>Annotations:  &lt;none&gt;<span style="color:#e6db74">``</span>Type:  Opaque<span style="color:#e6db74">``</span>Data  
</span></span><span style="display:flex;"><span><span style="color:#f92672">====</span>  
</span></span><span style="display:flex;"><span>cert-svc.dev.domain.com.crt     <span style="color:#ae81ff">1675</span> bytes  
</span></span><span style="display:flex;"><span>cert-svc.dev.domain.com.key     <span style="color:#ae81ff">1675</span> bytes  
</span></span><span style="display:flex;"><span>cert-svc.prod.domain.com.crt    <span style="color:#ae81ff">1675</span> bytes  
</span></span><span style="display:flex;"><span>cert-svc.prod.domain.com.key    <span style="color:#ae81ff">1675</span> bytes
</span></span></code></pre></div><p>That’s it !</p>
<p>You can now create the <code>Istio Gateways</code> for Dev:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.istio.io/v1alpha3  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Gateway  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">svc-dev-gateway  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">istio</span>: <span style="color:#ae81ff">ingressgateway  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">servers</span>:  
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">port</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">number</span>: <span style="color:#ae81ff">443</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">https-443-svc-dev  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">HTTPS  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tls</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">SIMPLE  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">serverCertificate</span>: <span style="color:#ae81ff">/etc/istio/ingressgateway-certs/cert-svc.dev.domain.com.crt  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">privateKey</span>: <span style="color:#ae81ff">/etc/istio/ingressgateway-certs/cert-svc.dev.domain.com.key  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hosts</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#34;svc.dev.domain.com&#34;</span>
</span></span></code></pre></div><p>And for Prod :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.istio.io/v1alpha3  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Gateway  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">svc-prod-gateway  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">istio</span>: <span style="color:#ae81ff">ingressgateway  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">servers</span>:  
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">port</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">number</span>: <span style="color:#ae81ff">443</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">https-443-svc-prod  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">HTTPS  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tls</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">SIMPLE  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">serverCertificate</span>: <span style="color:#ae81ff">/etc/istio/ingressgateway-certs/cert-svc.prod.domain.com.crt  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">privateKey</span>: <span style="color:#ae81ff">/etc/istio/ingressgateway-certs/cert-svc.prod.domain.com.key  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hosts</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#34;svc.prod.domain.com&#34;</span>
</span></span></code></pre></div><p>Add your <code>VirtualServices</code> as usual and you&rsquo;re done !</p>
<p>One note though :<br>
As of now, Istio Ingress Gateway is not able to detect when a “file” (a Certificate) is updated in the <code>Secret</code>.<br>
That means that even if you <code>Secret</code> will always be up to date when Cert-Manager renew some certs, Istio will not pick them up.<br>
The solution (not part of this blog) is to either :</p>
<ul>
<li>update the <code>Gateway</code> resource (maybe an update is not enough and you need to delete/create it again, will have to check that in another post)</li>
<li>trigger a reload of <code>Envoy</code> by calling it’s internal API</li>
</ul>
<p>Istio’s team is supposed to address that soon.</p>
<h3 id="final-words">Final words</h3>
<p>I’m really questioning the CNCF influence on many projects related to K8s lately.</p>
<p>K8s and micro-services are all about fast iteration, agility, automation…<br>
I’m not saying we can’t step back and think for some time. It’s good to have a clear plan, settle an API and support it.<br>
But it’s also fine to settle on a V1, improve it and reach a V2, even if that imply API changes.</p>
<p>It’s also good to admit things are missing in an API. Labels are a key component to the whole K8s ecosystem. Not having them is Cert-Manager is not a decision, it’s a lack of feature, whatever API you support.</p>
<p>Of course it’s my point of view, and I still thank all the people working hard on these projects. We need them. They are unreplaceable.<br>
Just keep in mind that APIs are not written in stone. You’re allowed to break your API when going from V1 to V2.</p>
<p>Also remember that all this work is a patch on the current implementation of Cert-Manager and Istio Ingress Gateway. As soon as something new comes in, like using an SSL backend storage (maybe Ashicorp Vault ?) or a Gateway SSL management by the Istio Backplane… you’ll be able to trash all this !</p>
]]></content>
        </item>
        
        <item>
            <title>Istio 0.8.0 (Envoy) &#43; Cert-Manager &#43; Let’s Encrypt for TLS</title>
            <link>https://piratemakers.ca/posts/2018/06/istio-0.8.0-envoy--cert-manager--lets-encrypt-for-tls/</link>
            <pubDate>Tue, 26 Jun 2018 18:57:13 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2018/06/istio-0.8.0-envoy--cert-manager--lets-encrypt-for-tls/</guid>
            <description>A few months back I wrote a blog post on how to use Cert-Manager to provide SSL certificates for Istio.
Since then, Istio reached version 0.8.0 and changed the Ingress API to a new version using Kubernetes Custom Resources. It is called the Route Rules v1alpha3.
What have changed ? Istio had a great blog post about it here. To sum it up quickly, instead of using Ingress manifests with annotations, you now have to define a Gateway, which defines the Layer 4 configuration, and a VirtualService which is the Layer 6/7 part.</description>
            <content type="html"><![CDATA[<p><img src="images/1.jpeg#layoutTextWidth" alt="image"></p>
<p>A few months back I wrote a blog post on <a href="https://medium.com/@prune998/istio-envoy-cert-manager-lets-encrypt-for-tls-14b6a098f289">how to use Cert-Manager to provide SSL certificates for Istio</a>.</p>
<p>Since then, Istio reached version 0.8.0 and changed the Ingress API to a new version using <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/">Kubernetes Custom Resources</a>. It is called the Route Rules v1alpha3.</p>
<h3 id="what-have-changed-">What have changed ?</h3>
<p>Istio had a great blog post about it <a href="https://istio.io/blog/2018/v1alpha3-routing/">here</a>. To sum it up quickly, instead of using Ingress manifests with annotations, you now have to define a Gateway, which defines the <strong>Layer 4</strong> configuration, and a VirtualService which is the <strong>Layer 6/7</strong> part.</p>
<p>You can go strait to the docs <a href="https://istio.io/docs/tasks/traffic-management/ingress/">here</a> and the reference <a href="https://istio.io/docs/reference/config/istio.networking.v1alpha3/">here</a>.</p>
<p>So, what does that implies to our old (pre 0.8.0) setup ?<br>
Well, let’s start from scratch and we’ll see…</p>
<h3 id="setup-istio">Setup Istio</h3>
<p>Setting up Istio is almost straightforward… do it the way you want, using the Helm chart with Tiller, without it or go with the Demo manifest that you may have (or not) depending on where you got Istio from.</p>
<p>My personal flavour is to use the Helm binary to create a static Deployment Manifest and use Kubectl to apply it. It goes something like :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm template install/kubernetes/helm/istio --name istio <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --set tracing.enabled<span style="color:#f92672">=</span>false --set ingress.enabled<span style="color:#f92672">=</span>false <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --set servicegraph.enabled<span style="color:#f92672">=</span>false --set prometheus.enabled<span style="color:#f92672">=</span>false <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --set global.proxy.policy<span style="color:#f92672">=</span>disabled --set grafana.enabled<span style="color:#f92672">=</span>false <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --namespace istio-system &gt; install/kubernetes/generated.yaml
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  kubectl create namespace istio-system
</span></span><span style="display:flex;"><span>  kubectl apply -n istio-system -f install/kubernetes/generated.yaml
</span></span></code></pre></div><h3 id="setup-cert-manager">Setup Cert-Manager</h3>
<p>It’s almost the same for cert-manager. Just clone it and apply the Manifest :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/jetstack/cert-manager.git
</span></span><span style="display:flex;"><span>cd cert-manager
</span></span><span style="display:flex;"><span>kubectl apply -f cert-manager/contrib/manifests/cert-manager/with-rbac.yaml
</span></span></code></pre></div><p>If it goes well you should see a pod started :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl -n cert-manager get pods
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME                            READY     STATUS    RESTARTS   AGE  
</span></span><span style="display:flex;"><span>cert-manager-794b55b96d-9b9zh   1/1       Running   <span style="color:#ae81ff">0</span>          3h
</span></span></code></pre></div><h3 id="setup-aws-route53">Setup AWS Route53</h3>
<p>Since the beginning my DNS was hosted on AWS using Route53. Still, my previous blog post was about using the HTTP01 provider, which requires to setup a website which can answer to the Let’s Encrypt handshake.</p>
<p>Cert-Manager is not (yet) compatible with how Istio 0.8.0 setup the Ingress. So it would be a real pain to use the HTTP provider again.</p>
<p>I decided to use the DNS01 provider, which is supported by both Cert-Manager and AWS Route53, and is far easier to setup that I thought.</p>
<h4 id="setup-policy">Setup Policy</h4>
<p>go to the AWS Dashboard -&gt; IAM -&gt; policies (<a href="https://console.aws.amazon.com/iam/home?#/policies">https://console.aws.amazon.com/iam/home?#/policies</a>) and create a Policy like :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  {  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;Version&#34;: </span><span style="color:#e6db74">&#34;2012-10-17&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;Statement&#34;: </span>[  
</span></span><span style="display:flex;"><span>        {  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;Effect&#34;: </span><span style="color:#e6db74">&#34;Allow&#34;</span>,  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;Action&#34;: </span>[  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;route53:GetHostedZone&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;route53:ListHostedZones&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;route53:ListHostedZonesByName&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;route53:GetHostedZoneCount&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;route53:ChangeResourceRecordSets&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;route53:ListResourceRecordSets&#34;</span>,  
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;route53:GetChange&#34;</span>  
</span></span><span style="display:flex;"><span>            ],  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;Resource&#34;: </span><span style="color:#e6db74">&#34;*&#34;</span>  
</span></span><span style="display:flex;"><span>        }  
</span></span><span style="display:flex;"><span>    ]  
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>Here is mine :</p>
<p><img src="images/2.png#layoutTextWidth" alt="image"></p>
<h4 id="setup-user">Setup User</h4>
<p>Go to the <code>user</code> tab and create a new user, applying the above policy to it. Select the <strong>Programmatic access checkbox.</strong> On the last page you will find the Access Key and the Secret Key. Note them down.</p>
<p>You will need to set the Secret Key in a Kubernetes Secret so the Cert-Manager can use it. This can be done by a single shell command using, again, kubectl :
<code>kubectl -n cert-manager create secret generic prod-route53-credentials-secret --from-literal=secret-access-key=&lt;your secret key here&gt;</code></p>
<p>This way the key is securely usable by your K8s cluster.</p>
<h3 id="create-your-certificate">Create your certificate</h3>
<p>As before, you need to create an Issuer and a Certificate. In this example we’ll use a ClusterIssuer, which is an Issuer not tied to a specific Namespace. This way you can create some certificates in any namespace. Stick to regular Issuers if you need more control.</p>
<h4 id="clusterissuer">ClusterIssuer</h4>
<p>This ClusterIssuer is using the <code>acme-v02</code> API.</p>
<p>Set the <code>privateKeySecretRef</code> to the name of the secret you want Cert-Manager to use. It have to be a new secret as it will be used to elect the <code>master</code> Cert-Manager instance in case you start many of them.</p>
<p><code>secretAccessKeySecretRef</code> is the name of the secret we just created before.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">certmanager.k8s.io/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterIssuer  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-prod  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">cert-manager  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">acme</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server</span>: <span style="color:#ae81ff">https://acme-v02.api.letsencrypt.org/directory</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">email</span>: <span style="color:#ae81ff">me@ici.com  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">privateKeySecretRef</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-prod  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">dns01</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">providers</span>:  
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aws-dns-prod  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">route53</span>:  
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">region</span>: <span style="color:#ae81ff">ca-central-1  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">accessKeyID</span>: <span style="color:#ae81ff">&lt;your access key from AWS&gt;  </span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">secretAccessKeySecretRef</span>:  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">prod-route53-credentials-secret  </span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">secret-access-key</span>
</span></span></code></pre></div><h4 id="certificate">Certificate</h4>
<p>You will need to create a <code>Certificate Manifest</code> so Cert-Manager can perform the request using the ACME API.</p>
<p>Before that, ensure that all the domain names you are requesting for are properly setup in your DNS server, in this cas, route53.</p>
<p>Here is where we also <strong>have a choice to make</strong>.</p>
<p>Beeing an admin (sysops, devops or SRE, you name it) for 20 years now, I would go to create an SSL certificate for every website, ie, for every FQDN that serves a different purpose. This way it’s easier to manage, expire (revoke) or split.</p>
<p>In fact, two things here almost prevent us from doing so :</p>
<ul>
<li>using Let’s Encrypt you programatically manage your certificates so you don’t have to care how you renew or revoke them (almost) as Cert-Manager will do that for you.</li>
<li>Istio does not (really) support Ingresses with multiple certificates. To be clearer, in Istio version 0.8.0 and the new IngressGateway, only one <code>Kubernetes Secret</code> is mounted inside the IngressGateway Pod.
Someone started a discussion about that <a href="https://github.com/istio/istio/issues/6486#issuecomment-400367378">there</a>, which I commented.</li>
</ul>
<p>So, for now, I recommend going with only one Certificate with all your FQDNs in it. Like :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">certmanager.k8s.io/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Certificate  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">domain-ingress-certs  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">istio-system  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">acme</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">config</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">dns01</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">provider</span>: <span style="color:#ae81ff">aws-dns-prod  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">domains</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">my.domain.com  </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">subnet.domain.com  </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">www.otherdomain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">commonName</span>: <span style="color:#ae81ff">my.domain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dnsNames</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">my.domain.com  </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">subnet.domain.com  </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">www.otherdomain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">issuerRef</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterIssuer  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-prod  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">istio-ingressgateway-certs</span>
</span></span></code></pre></div><p>Let’s break this down :</p>
<ul>
<li>the <code>Certificate</code> will be created in the secret called <code>istio-ingressgateway-certs</code> in the namespace <code>istio-system</code>. This is needed as the Istio Ingress Gateway is looking for this specific secret in it’s own namespace. DON’T MESS WITH IT, the <code>secretName</code> IS HARDCODED ! (see comments :) )</li>
<li>the issuer is named <code>letsencrypt-prod</code> and its kind is <code>ClusterIssuer</code></li>
<li>we are using the DNS-01 <code>provider</code> which is called <code>aws-dns-prod</code>, as defined, again, in the <code>ClusterIssuer</code></li>
<li>the 3 domains will use the DNS-01 challenge, as they are all listed under the <code>domains</code> list of the <code>dns01</code> provider. We could also have decided to use another provider for some of them… This is really agile !</li>
<li>The SSL certificate will have <code>my.domain.com</code> as CommonName and will also be valid for all the 3 domain names listed under the <code>dnsNames</code> line.</li>
</ul>
<p>When you push that using <code>kubectl</code>, Cert-Manager will connect to your AWS account and create some TXT records that will be used by Let’sEncrypt to ensure that you own the right to update the DNS.<br>
They will look like :
<code>_acme-challenge.my.domain.com TXT &quot;some value here&quot;</code></p>
<p>Once the DNS propagated and the Domain Ownership validated, Cert-Manager will create your <strong>istio-ingressgateway-certs</strong> secret, with two files in it : <code>tls.crt</code>and <code>tls.key</code></p>
<h3 id="configuring-the-istio-ingress-gateway">Configuring the Istio Ingress Gateway</h3>
<p>The final step for this setup is to configure Istio to use use the certificate.</p>
<p>With the new API starting from version 0.8.0, you have two resources to setup : the Gateway and the Virtual Service.</p>
<h4 id="gateway">Gateway</h4>
<p>The gateway is your OSI Layer 4 configuration. It tells Istio (Envoy) to listen on a port and, if needed, activate SSL. (ok, ssl is not layer4, but…well, it’s complicated :) )</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.istio.io/v1alpha3  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Gateway  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">web-gateway  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">test  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">istio</span>: <span style="color:#ae81ff">ingressgateway  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">servers</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">hosts</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">my.domain.com  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">number</span>: <span style="color:#ae81ff">80</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">HTTP  </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">hosts</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">my.domain.com  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">my.domain.com:443  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">subnet.domain.com  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">subnet.domain.com:443  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">https  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">number</span>: <span style="color:#ae81ff">443</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">HTTPS  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tls</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">SIMPLE  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">privateKey</span>: <span style="color:#ae81ff">/etc/istio/ingressgateway-certs/tls.key  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serverCertificate</span>: <span style="color:#ae81ff">/etc/istio/ingressgateway-certs/tls.crt</span>
</span></span></code></pre></div><p>So, we define here a <code>Gateway</code> name <code>web-gateway</code>, answering <code>my.domain.com</code> on both HTTP and HTTPS and <code>subnet.domain.com</code> and HTTPS.<br>
For HTTPS, I had to double the DNS names with the <code>:port</code> extension. I still don’t know if it’s a bug or a feature, but I opened another issue for that <a href="https://github.com/istio/istio/issues/6469">here</a>.</p>
<p>As a side note here, DON’T create another gateway for port 443 or 80 in the cluster, as they will both try to bind the same IP/port. Instead, either :</p>
<ul>
<li>add more FQDN to the domain list or</li>
<li>create another <code>server</code> entry and use the same port</li>
</ul>
<h3 id="update-20180822-">UPDATE 2018/08/22 !</h3>
<p>I don’t know if I was mistaken or if something changed with Istio 1.0.0, but you CAN create multiple gateways on the same port. Just use different names and use the SAME certificate file, as Istio IngressGateway still only use one Secret for now.<br>
Ex :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.istio.io/v1alpha3  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Gateway  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gateway-mydomain  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">test  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">istio</span>: <span style="color:#ae81ff">ingressgateway  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">servers</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">hosts</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">my.domain.com  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">my.domain.com:443  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">https-mydomain  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">number</span>: <span style="color:#ae81ff">443</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">HTTPS  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tls</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">SIMPLE  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">privateKey</span>: <span style="color:#ae81ff">/etc/istio/ingressgateway-certs/tls.key  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serverCertificate</span>: <span style="color:#ae81ff">/etc/istio/ingressgateway-certs/tls.crt  </span>
</span></span><span style="display:flex;"><span>---  
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.istio.io/v1alpha3  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Gateway  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gateway-otherdomain  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">test  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">istio</span>: <span style="color:#ae81ff">ingressgateway  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">servers</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">hosts</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">other.domain.com  </span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">other.domain.com:443  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">https-otherdomain  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">number</span>: <span style="color:#ae81ff">443</span>  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">HTTPS  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tls</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">SIMPLE  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">privateKey</span>: <span style="color:#ae81ff">/etc/istio/ingressgateway-certs/tls.key  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serverCertificate</span>: <span style="color:#ae81ff">/etc/istio/ingressgateway-certs/tls.crt</span>
</span></span></code></pre></div><h4 id="virtualservice">VirtualService</h4>
<p>In fact, we’ve done everything we needed to get an SSL cert via Let’s Encrypt.<br>
The VirtualService is the layer 6/7 configuration, which will split the traffic to your Kubernetes Services.</p>
<p>Since we’re here anyway, let me show you one possible config :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.istio.io/v1alpha3  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">VirtualService  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">domain-http  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">test  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">gateways</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">web-gateway  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hosts</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">my.domain.com  </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">my.domain.com:443  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">http</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">match</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">uri</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">prefix</span>: <span style="color:#ae81ff">/  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">route</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">destination</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">host</span>: <span style="color:#ae81ff">my-http-service  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">port</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">number</span>: <span style="color:#ae81ff">1080</span>
</span></span></code></pre></div><p>You can also create another one for the subdomain if you want it to go to another website :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.istio.io/v1alpha3  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">VirtualService  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">subnet-http  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">test  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">gateways</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">web-gateway  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hosts</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">subnet.domain.com  </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">subnet.domain.com:443  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">http</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">match</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">uri</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">prefix</span>: <span style="color:#ae81ff">/  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">route</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">destination</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">host</span>: <span style="color:#ae81ff">subnet-http-service  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">port</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">number</span>: <span style="color:#ae81ff">1081</span>
</span></span></code></pre></div><h3 id="conslusion">Conslusion</h3>
<p>I find this solution far better than the previous one with HTTP-01 challenge. No more ingress or services to remove.</p>
<p>Of course this implies using a supported DNS provider, as of today, one of Google cloud, AWS Route53, Clouflare, Akamai (<a href="https://cert-manager.readthedocs.io/en/latest/reference/issuers/acme/dns01.html#supported-dns01-providers">https://cert-manager.readthedocs.io/en/latest/reference/issuers/acme/dns01.html#supported-dns01-providers</a>)</p>
<p>Also, as mentioned, you have to use only one certificate for all your domains. Now that Let’s Encrypt also support star certificates (<code>*.domain.com</code> ) there may some good reasons to do so, but still I don’t like it.</p>
<p>Also, as of today (20180626), I see no way for the Istio IngressGateway to automatically reload it’s configuration when the certificate, so the <code>Kubernetes Secret</code>, changes.<br>
From my point of view, the <code>Istio Pilot</code> service should monitor the secret and send a kind of <code>SIGHUP</code> signal the the Ingressgateway Envoy when needed…</p>
<p>Stay tuned :)</p>
]]></content>
        </item>
        
        <item>
            <title>Istio (Envoy) &#43; Cert-Manager &#43; Let’s Encrypt for TLS</title>
            <link>https://piratemakers.ca/posts/2018/01/istio-envoy--cert-manager--lets-encrypt-for-tls/</link>
            <pubDate>Tue, 23 Jan 2018 23:12:08 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2018/01/istio-envoy--cert-manager--lets-encrypt-for-tls/</guid>
            <description>Updates 1 Thanks to comments by Laurent Demailly, here are some updates. This article have been updated accordinately :
there is now an official Helm Chart for Cert-Manager Istio Ingress also support GRPC, which is based on HTTP/2 Update 2 (2018–06–26) I made a new post to use Cert-Manager with Istio 0.8.0 here.
Istio Istio is a part of a new way to manage the flow of data in your Microservice world.</description>
            <content type="html"><![CDATA[<p><img src="images/1.jpeg#layoutTextWidth" alt="image"></p>
<h4 id="updates-1">Updates 1</h4>
<p>Thanks to comments by Laurent Demailly, here are some updates. This article have been updated accordinately :</p>
<ul>
<li>there is now an <a href="https://github.com/kubernetes/charts/tree/master/stable/cert-manager">official Helm Chart for Cert-Manager</a></li>
<li>Istio Ingress also support GRPC, which is based on HTTP/2</li>
</ul>
<h4 id="update-2-20180626">Update 2 (2018–06–26)</h4>
<p>I made a new post to use Cert-Manager with Istio 0.8.0 <a href="https://medium.com/@prune998/istio-0-8-0-envoy-cert-manager-lets-encrypt-for-tls-d26bee634541">here</a>.</p>
<h3 id="istio">Istio</h3>
<p><a href="https://istio.io/">Istio</a> is a part of a new way to manage the flow of data in your Microservice world. In fact, it’s even more than that to me.<br>
People can’t stop speaking of Microservice vs Monolith, how it’s better for dev, easy to maintain, faster to deploy…<br>
Well, they are right, but Microservices is not just having small applications talking to each others. It’s a way of thinking your infrastructure too. It’s also how your “simple” application expose metrics and logs, how you can track the state, how you can control the flow between your services and how you manage errors.</p>
<p>So what can Istio add to this Microservice world ?</p>
<p>Istio is an implementation of a Service Mesh !</p>
<blockquote>
<p>Whaaaaaat ? Service Mesh ? we already have Kubernetes API, we don’t need a “Mesh” do we ?</p>
</blockquote>
<p>Well, yes you do.<br>
I won’t explain all the benefits of using it, you’ll find enough docs online. but in few words, a Service Mesh is the layer that gives knowledge of others services to all your services.<br>
In fact, it also enforce all the “Microservices” best practices, like adding traffic and error metrics, add support to OpenTracing (Zipkin og Jaegger), allow control of retries, canary deployments, … well, read <a href="https://istio.io/docs/concepts/">Istio doc</a> !</p>
<p>So, back to the topic…</p>
<h3 id="prerequisits">Prerequisits</h3>
<ul>
<li>a running Kubernetes Cluster
version 1.7+ recommended</li>
<li>one or many DNS domain names</li>
<li>Istio installed in your cluster with a working Ingress Controler</li>
<li>the DNS domain names from above configured to point to the Istio Ingress IP</li>
</ul>
<h3 id="ssl">SSL</h3>
<p><strong>SSL</strong> is security (well, sort of), but it’s usually the last thing implemented in software. Why ? Well, it used to be “hard”, but I see no reasons now. [Let’s Encrypt] (<a href="https://letsencrypt.org/how-it-works/)created">https://letsencrypt.org/how-it-works/)created</a> a new paradigm where it’s DAMN so easy to create valide SSL certificates using an API call (protocol is called ACME… ). It offers you 3 ways to validate you’re the owner of the domain. using DNS, a “secret token” using HTTP or the, well, the 3rd solution is not available anymore as it proved to be insecure.<br>
So, you set up your DNS with a special TXT record that Let’s Encrypt gave you, or you put it inside your web root path (like /.well-known/acme-challenge/xxx) and Let’s Encrypt validate it. This is really simplified, but it’s almost that.</p>
<p>Some devs decided to implement the ACME protocol directly inside the application. That’s the decision the guys from <a href="https://traefik.io/">Traefik</a> took. <a href="https://caddyserver.com/">Caddy</a> also did something similar with “plugins”.<br>
It’s cool because you just have to define your vhost and the application take care of gathering and renewing the certificates.</p>
<p>Sadly, Istio (and the underlying Envoy proxy) did not. And that’s the point of this blog post !</p>
<h3 id="cert-manager">Cert-Manager</h3>
<p>Many folks got to the idea that, if not every software can implement the ACME protocol, we still need a tool to manage (like request, renew, deprecate) SSL certificates. That’s why LEGO was created. Then Kube-LEGO for kubernetes, then.. and finaly, they almost all agree to put everything inside <a href="https://github.com/jetstack/cert-manager">Cert-Manager</a> !</p>
<p>Cert-Manager come with a helm chart so it’s quite easy to deploy… just follow the doc, but it’s like :</p>
<p><strong>[update]</strong><br>
There is now an <a href="https://github.com/kubernetes/charts/tree/master/stable/cert-manager">official Helm Chart for Cert-Manager</a>, you don’t need to <code>git clone</code> , just do the <code>helm install</code> .</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/jetstack/cert-manager
</span></span><span style="display:flex;"><span>cd cert-manager
</span></span><span style="display:flex;"><span><span style="color:#75715e"># check out the latest release tag to ensure we use a supported version of cert-manager</span>
</span></span><span style="display:flex;"><span>git checkout v0.2.3
</span></span><span style="display:flex;"><span>helm install <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --name cert-manager <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>  --namespace kube-system* <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>  --set ingressShim.extraArgs<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{--default-issuer-name=letsencrypt-prod,--default-issuer-kind=ClusterIssuer}&#39;</span> <span style="color:#ae81ff">\ </span> 
</span></span><span style="display:flex;"><span>  contrib/charts/cert-manager
</span></span></code></pre></div><p>This commands will start a Cert-Manager pod in the kube-system Namespace.</p>
<p>I used the configuration line <code>--default-issuer-kind=ClusterIssuer</code> so I can create my issuers only once.</p>
<blockquote>
<p>an Issuer whaaaat ?</p>
</blockquote>
<p>Here’s how it’s working :</p>
<ul>
<li>you create an Issuer config which tels the Cert-Manager how to use the ACME API (you will usualy have only 2, staging and prod)</li>
<li>you create a Certificate definition telling which domains need SSL</li>
<li>Cert-Manager request the certificates for you</li>
</ul>
<p>So, let’s create the issuers. As I’m creating ClusterIssuers, I don’t care of a particular Namespace :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">certmanager.k8s.io/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterIssuer  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-prod  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">kube-system  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">acme</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># The ACME server URL  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server</span>: <span style="color:#ae81ff">https://acme-v01.api.letsencrypt.org/directorr</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Email address used for ACME registration  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">email</span>: <span style="color:#ae81ff">me@domain.com  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Name of a secret used to store the ACME account private key  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">privateKeySecretRef</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-prod  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Enable the HTTP-01 challenge provider  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">http01</span>: {}  
</span></span><span style="display:flex;"><span>---  
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">certmanager.k8s.io/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterIssuer  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-staging  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">kube-system  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">acme</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># The ACME server URL  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server</span>: <span style="color:#ae81ff">https://acme-staging.api.letsencrypt.org/directory</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Email address used for ACME registration  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">email</span>: <span style="color:#ae81ff">staging+me@domain.com  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Name of a secret used to store the ACME account private key  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">privateKeySecretRef</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-staging  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Enable the HTTP-01 challenge provider  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">http01</span>: {}
</span></span></code></pre></div><p>Then
<code>kubectl apply -f certificate-issuer.yml</code></p>
<p>Now you should have a working Cert-Manager. You need to create the config for your domains/services so the Istio Ingress can pick the right certificate.</p>
<h3 id="istio-ingress">Istio Ingress</h3>
<p>The Ingress is the front Web Proxy where you expose your services. It’s your edge… I say WEB PROXY as it only support HTTP/HTTPS for now. But let’s suppose you know everything about Ingress.</p>
<p><strong>[update]</strong><br>
This is not a real update but a precision, Ingree also support GRPC, which of course is HTTP/2.</p>
<p>The magic of Ingress is it’s implementation in the Kubernetes API. You create an Ingress Manifest and all your traffic is directed to the right Pod ! Magic ! Told you !</p>
<p>Well, in this case, it’s Dirty Magic !</p>
<p>For example, the Traefik Ingress binds port 80 and 443, manage the certificates, so you create an ingress for <a href="http://www.mydomain.com">www.mydomain.com</a> and it just works, because it’s doing everything.</p>
<p>For Istio, as you’re using the Cert-Manager, there are some more steps. To be quick, here they are (as of 01/2018, it may change quickly) :</p>
<ul>
<li>create a Certificate Request for domain <a href="http://www.mydomain.com">www.mydomain.com</a></li>
<li>Cert-Manager will pick this definition and create a pod, which is in fact a web server that can answer the ACME challenge (<a href="https://github.com/jetstack/cert-manager/blob/master/docs/user-guides/ingress-shim.md">Ingress-Shim</a>)
It will also create a Service and an HTTP Ingress so it is reacheable by the Lets Encrypt servers</li>
<li>The previous point will not work as you are using Istio Ingress, so you have to delete the <code>Service</code> and <code>Ingress</code></li>
<li>Create your own Service that points to the Pod</li>
<li>Create your own Istio Ingress so the pod is accessible</li>
</ul>
<p>Sounds crazy ?<br>
Well, it is, for now. And it’s EVEN WORSE :</p>
<p>When using Cert-Manager with Istio, you can only have ONE certificate for external services !<br>
So you have to add all the public DNS names to this one certificate !</p>
<p>So let’s implement it…</p>
<h4 id="certificate">Certificate</h4>
<p>Put this manifest in a file like <em>certificate-istio.yml</em> :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">certmanager.k8s.io/v1alpha1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Certificate  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">istio-ingress-certs  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">istio-system  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">istio-ingress-certs  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">issuerRef</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">letsencrypt-staging  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterIssuer  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">commonName</span>: <span style="color:#ae81ff">www.mydomain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dnsNames</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">www.mydomain.com  </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">mobile.mydomain.com  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">acme</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">config</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">http01</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">ingressClass</span>: <span style="color:#ae81ff">none  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">domains</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">www.mydomain.com  </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">mobile.mydomain.com</span>
</span></span></code></pre></div><p>What we see here is :</p>
<ul>
<li>we want a certificate</li>
<li>it will support 2 domains, <em><a href="https://www.mydomain.com">www.mydomain.com</a></em> and <em>mobile.mydomain.com</em></li>
<li>This Certificate Request is in the same Namespace as the Istio Ingress (istio-system)</li>
<li>it will use the HTTP-01 ACME Challenge</li>
<li>the certificate will be copied to a K8s Secret named <em>istio-ingress-certs ←</em> this is SUPER IMPORTANT as the Istio Ingress (Envoy proxy) expect it.</li>
</ul>
<p>then :
<code>kubectl apply -f certificate-istio.yml</code></p>
<p>Once done, you will start seeing logs going through the cert-manager pod, as well as in the Istio Ingress… something like :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>istio-ingress-7f8468bb7b-pxl94 istio-ingress [2018-01-23T21:01:53.341Z] &#34;GET /.well-known/acme-challenge/xxxxxxx HTTP/1.1&#34; 503 UH 0 19 0 - &#34;10.20.5.1&#34; &#34;Go-http-client/1.1&#34; &#34;xxx&#34; &#34;www.domain.com&#34; &#34;-&#34;  
</span></span><span style="display:flex;"><span>istio-ingress-7f8468bb7b-pxl94 istio-ingress [2018-01-23T21:01:58.287Z] &#34;GET /.well-known/acme-challenge/xxxxxx HTTP/1.1&#34; 503 UH 0 19 0 - &#34;10.20.5.1&#34; &#34;Go-http-client/1.1&#34; &#34;xxxx&#34; &#34;mobile.domain.com&#34; &#34;-&#34;
</span></span></code></pre></div><p>This is because the Let’s Encrypt servers is polling for the validation token and your setup is not working yet. As of now your setup looks like that :</p>
<p><img src="images/2.jpeg#layoutTextWidth" alt="image"></p>
<p>Now it’s time to remove the unwanted stuff created by Cert-Manager.<br>
Use your best K8s tool, like the Dashboard or kubectl, and remove the service and ingress from the <em>istio-system</em> Namespace. They will be named like <strong>cm-istio-ingress-certs-xxxx.</strong> If you have many domain names in your certificate request, you will have more things to remove.</p>
<p>Also, don’t remove the pods !! (they will be re-created in case of error)</p>
<p>(as a reminder : kubectl -n istio-system delete ing cm-istio-ingress-certs-xxxx)</p>
<h4 id="services">Services</h4>
<p>Now that your setup is clean, you can go on and re-create the needed Services and Ingress.</p>
<p>You will need as many services as you have different domain names. In our case, 2. Here is the manifest :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cert-manager-ingress-www  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">istio-system  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">auth.istio.io/8089</span>: <span style="color:#ae81ff">NONE  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">port</span>: <span style="color:#ae81ff">8089</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http-certingr  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">certmanager.k8s.io/domain</span>: <span style="color:#ae81ff">www.mydomain.com  </span>
</span></span><span style="display:flex;"><span>---  
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cert-manager-ingress-mobile  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">istio-system  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">auth.istio.io/8089</span>: <span style="color:#ae81ff">NONE  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">port</span>: <span style="color:#ae81ff">8089</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http-certingr  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">certmanager.k8s.io/domain</span>: <span style="color:#ae81ff">mobile.mydomain.com</span>
</span></span></code></pre></div><p>then
<code>kubectl apply -f certificate-services.yml</code></p>
<p>You can then check your services. Each one should have one taget pod assigned.</p>
<p>Note here that the Service Name does not matter. It’s up to you to give a specific name so you will not mix up all your domains.</p>
<h4 id="ingress">Ingress</h4>
<p>It’s now time to create the Ingress so your “ACME Token Pods” are accessible from the outside.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">extensions/v1beta1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.io/ingress.class</span>: <span style="color:#ae81ff">istio  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">certmanager.k8s.io/acme-challenge-type</span>: <span style="color:#ae81ff">http01  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">certmanager.k8s.io/cluster-issuer</span>: <span style="color:#ae81ff">letsencrypt-staging  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">istio-ingress-certs-mgr  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">istio-system  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">http</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/.well-known/acme-challenge/.*  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">cert-manager-ingress-www  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">servicePort</span>: <span style="color:#ae81ff">http-certingr  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">host</span>: <span style="color:#ae81ff">www.mydomain.com  </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">http</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/.well-known/acme-challenge/.*  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">cert-manager-ingress-mobile  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">servicePort</span>: <span style="color:#ae81ff">http-certingr  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">host</span>: <span style="color:#ae81ff">mobile.mydomain.com</span>
</span></span></code></pre></div><p>Again, we have a few things to note here :</p>
<ul>
<li>ingress is in the same Namespace as the Certificate, Services and Ingress</li>
<li>ingress Class is <em>Istio</em> (obviously)</li>
<li>we are using the <em>staging</em> issuer (remember the first step when we created the Issuers)
Depending wether you created an <code>Issuer</code> or a <code>ClusterIssuer</code> your have to use the right annotation. Documentation is in the <a href="https://github.com/jetstack/cert-manager/blob/master/docs/user-guides/ingress-shim.md">Ingress-Shim</a> project</li>
<li>we must create an HTTP rule for each domain</li>
<li>the <em>backend/serviceName</em> must match the services we created in the previous step, as well as the domain name, so :
<em><a href="https://www.mydomain.com">www.mydomain.com</a></em> → serviceName <em>cert-manager-ingress-www</em> → pod <em>cm-istio-ingress-certs-xxx</em> where the label <em>certmanager.k8s.io/domain =</em> <a href="http://www.mydomain.com"><em>www.mydomain.com</em></a></li>
</ul>
<p>again :
<code>kubectl apply -f certificate-ingress.yml</code></p>
<p>And that’s it !</p>
<p>Checking the Istio-Ingress logs, you should see a couple of <em>“GET /.well-known/acme-challenge/xxx HTTP/1.1” 200</em></p>
<h3 id="sample-application">Sample application</h3>
<p>I used a sample application to validate my setup is working:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">helloworld-v1  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">helloworld  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">helloworld  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span>---  
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">helloworld-v2  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">helloworld  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v2  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">helloworld  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v2  </span>
</span></span><span style="display:flex;"><span>---  
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">extensions/v1beta1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.io/ingress.class</span>: <span style="color:#ae81ff">istio  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.io/ingress.allow-http</span>: <span style="color:#e6db74">&#34;false&#34;</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">istio-ingress-https  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tls</span>:  
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">istio-ingress-certs  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">http</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/.*  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">helloworld-v1  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">servicePort</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">host</span>: <span style="color:#ae81ff">www.mydomain.com</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">http</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/.*  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">helloworld-v2  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">servicePort</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">host</span>: <span style="color:#ae81ff">mobile.mydomain.com  </span>
</span></span><span style="display:flex;"><span>---  
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">extensions/v1beta1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.io/ingress.class</span>: <span style="color:#ae81ff">istio  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">istio-ingress-http  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">http</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/.*  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">helloworld-v1  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">servicePort</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">host</span>: <span style="color:#ae81ff">www.mydomain.com</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">http</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/.*  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">helloworld-v2  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">servicePort</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">host</span>: <span style="color:#ae81ff">mobile.mydomain.com  </span>
</span></span><span style="display:flex;"><span>---  
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ReplicationController  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">helloworld  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">helloworld-v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">app</span>: <span style="color:#ae81ff">helloworld  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:  
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;kelseyhightower/helloworld:v1&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">helloworld  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">ports</span>:  
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http  </span>
</span></span><span style="display:flex;"><span>---  
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ReplicationController  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">helloworld  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v2  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">helloworld-v2  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">app</span>: <span style="color:#ae81ff">helloworld  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v2  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:  
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;kelseyhightower/helloworld:v2&#34;</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">helloworld  </span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">ports</span>:  
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>  
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http</span>
</span></span></code></pre></div><p>We must thanks Kelsy Hightower, again, for his HelloWorld example app 🙏</p>
<p>then:
<code>kubectl -n default apply -f helloworld.yml</code></p>
<p>Note you will need one Ingress for all you HTTPS domains, and one for the HTTP… Only the HTTPS is represented here :</p>
<p><img src="images/3.jpeg#layoutTextWidth" alt="image"></p>
<p>Cert-Manager should remove the Token-Exchange pods in the istio-system namespace after the validation is done. Yes, once the Cert-Manager agreed with the Let’s Encrypt servers, they exchange a permanent key that is used for renewal. No need of the pods, and even Services and Ingress, at least if your are sure you will not need to add or change something in the certificate.</p>
<h3 id="updating-the-certificate">Updating the Certificate</h3>
<p>When updating the certificate, I suggest to first create the right <code>Service</code> for it. Then update the <code>Ingress</code> to send traffic to the right service.<br>
Finally, update your <code>Certificate</code> definition and add the new domain name.</p>
<p>Cert-Manager will create a new <code>ingress</code> and <code>service</code> that you will have to delete. Everything else will take place by itself. Wait a few seconds for <code>Istio-Ingress</code> to reload it’s certificate and you’re good to <code>curl</code> !</p>
<h3 id="conclusion">Conclusion</h3>
<p>While I find it pretty ugly right now, it’s working…<br>
If you need to update your certificate or add a new domain name, you will have to update your certificate definition so the whole process can start over. This is really a pain and certainly a LOT harder than having it fully integrated like with Traefik or Caddy. I’m sure this will change quickly though.</p>
<p>I would like to thank <a href="https://github.com/ldemailly">Laurent Demailly</a> for it’s work on this. See Istio Issue [868] (<a href="https://github.com/istio/istio.github.io/issues/868)for">https://github.com/istio/istio.github.io/issues/868)for</a> more details and discussion. He’s working on a sample application deployment, Fortio, using Istio + TLS and he’s the one who inspired and help me getting all this to work.</p>
]]></content>
        </item>
        
        <item>
            <title>What nobody tells you about Kubernetes</title>
            <link>https://piratemakers.ca/posts/2017/07/what-nobody-tells-you-about-kubernetes/</link>
            <pubDate>Tue, 18 Jul 2017 12:03:59 +0000</pubDate>
            
            <guid>https://piratemakers.ca/posts/2017/07/what-nobody-tells-you-about-kubernetes/</guid>
            <description>This is a first post in a long serie to come about what you never heard and maybe never thought about when using K8s (Kubernetes), and maybe other orchestration tools.
I’ve been using Kubernetes for a long time. In fact, at some point, I decided not to use K8s for the company I was working for, because it was too new, unstable, not easy to deploy… At this time, I also decided not to use Marrathon, which was brand new and too linked to the (crappy) Mesos/Hadoop ecosystem (it’s better now with DC/OS).</description>
            <content type="html"><![CDATA[<p>This is a first post in a long serie to come about what you never heard and maybe never thought about when using K8s (Kubernetes), and maybe other orchestration tools.</p>
<p>I’ve been using <a href="https://kubernetes.io/">Kubernetes</a> for a long time. In fact, at some point, I decided not to use K8s for the company I was working for, because it was too new, unstable, not easy to deploy… At this time, I also decided not to use Marrathon, which was brand new and too linked to the (crappy) Mesos/Hadoop ecosystem (it’s better now with DC/OS).</p>
<p>My setup was composed of ubuntu servers + kickstart to set them up if physical+ Ansible to setup the server and deploy applications. That was working great !<br>
Until some management decided to move to <a href="https://www.openshift.com/">Openshift</a>.</p>
<p>Oh man ! Openshift ! It’s like using a two year old K8s with a RedHat interface. And if you’re using the Enterprise licences, you’re another year late. True Story, but not this one (maybe later).</p>
<p>Promises are great when you move to an orchestration tool like K8s. What is sold includes :</p>
<ul>
<li>no service breakdown</li>
<li>easy deployment</li>
<li>reproducible deployment</li>
<li>tons of metrics</li>
<li>log gathering made easy</li>
<li>maximum resource usage</li>
<li>no resource exhaustion</li>
<li>no network outage</li>
</ul>
<p>But many other things are not pushed to the front shelves, like, well, you still need to manage your logs, you disk space, your resources, your deployments, and the most important thing : you are using someone else’s work as your deployment script and image !</p>
<p>You can translate that : <strong>using K8s is easy as someone else did the hard job for me</strong>.</p>
<p>So, for the first post, and as an example, here is something that NOBODY tells you about Kubernetes !</p>
<h3 id="logs-gathering-with-fluentd--es--kibana">Logs gathering with Fluentd + ES + Kibana</h3>
<p>Many blog posts are explaining how to do this. It’s SO easy.</p>
<p>Well, if it’s so easy, why do we still have to install it ? Why isn’t it bundled ?</p>
<blockquote>
<p>Use Helm Charts, it’s so easy to deploy</p>
</blockquote>
<p>Well, that is true if you don’t want to use latest release/features. What my experience is, is that <a href="https://github.com/kubernetes/charts">“official” Helm Chart</a> for ES (which is still in the incubator) is installing ES 2.4. New releases of Fluentd/Kibana require a newer ES. And knowing that they are now at version 5.5, who want’s to go with the old (and not supported anymore ? have to confirm that) 2.4 version that I was using 3 or 4 years ago ?</p>
<p>That is where your logging journey begins.</p>
<p>In the coming articles I’ll get into each of the painful story I went through.</p>
<p>Please, don’t be mad at me, I’m not saying K8s is crap or not production ready. I’m just saying that K8s is a forest and many, many, goblins, unicorns, princesses and dragons are hiding inside it.</p>
<p>Also, I’m no expert. I’m always learning, and I’m trying to give a feedback of all this learning. I will have (I do have) newbie problems, because I don’t know this or that. But most of the time, it ends as beeing a really small thing I wasn’t aware of, because nobody is telling it.</p>
<p>My conclusion is that the problem here is not K8s, but what you are (not) doing with it :</p>
<ul>
<li>you are not installing JMX in java application (to scrape metrics with Prom)</li>
<li>you are not logging in JSON</li>
<li>you are keeping Info logs in your deployments</li>
<li>you are using outdated version</li>
<li>you don’t know what you are deploying</li>
<li>you are using Docker Images without having the Dockerfile to build them (related to the point above)</li>
<li>you are doing things by hand instead of code</li>
</ul>
<p>And so on…</p>
<p>And still, you are blogging about what you’re doing. You are releasing you code on Github (because you are cool and you enjoy Opensource).<br>
And others are reading your blog post and think like “wow that’s amazing, I need that in my company.</p>
<p>Until the next day, when all the data is lost because your Deployment is not using a persistent storage !</p>
<p>Stay tuned for the next posts, like :</p>
<ul>
<li>ES official images are 650M large ! Why ? (tip : they don’t know how to compile -static + other fun facts)</li>
<li>Fluent-bit is not parsing your application Json logs (you need an option !!!)</li>
<li>Missing JMX activation inside Java application images</li>
</ul>
<h3 id="writer">Writer</h3>
<p>I’m known as Prune and I’ve been working in the Internet/Hosting/Media industry for almost 20 years. I’ve been from Telnet to SSH, from shell script to Orchestration and Cloud computing and am still learning.</p>
<p>I’m now living in Quebec, Canada and am working as a system architect/ops for a company involved in road driving security devices/apps.</p>
]]></content>
        </item>
        
    </channel>
</rss>
